<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Stats</name>
    </assembly>
    <members>
        <member name="T:ShoNS.Stats.AnovaStats">
            <summary></summary>
        </member>
        <member name="F:ShoNS.Stats.AnovaStats.source">
            <summary>Source</summary>
        </member>
        <member name="F:ShoNS.Stats.AnovaStats.SS">
            <summary>Sum of squares</summary>
        </member>
        <member name="F:ShoNS.Stats.AnovaStats.df">
            <summary>Degrees of freedom</summary>
        </member>
        <member name="F:ShoNS.Stats.AnovaStats.MS">
            <summary>Mean square</summary>
        </member>
        <member name="F:ShoNS.Stats.AnovaStats.f">
            <summary>F-statistic</summary>
        </member>
        <member name="F:ShoNS.Stats.AnovaStats.p">
            <summary>p-value</summary>
        </member>
        <member name="T:ShoNS.Stats.Anova1">
            <summary>Performs 1-way ANOVA</summary>
        </member>
        <member name="M:ShoNS.Stats.Anova1.Compute(ShoNS.Array.DoubleArray)">
            <summary>Computes the 1-way ANOVA</summary>
            <param name="data">The matrix containing the data; each column corresponds to a group</param>
            <returns>The ANOVA stats for the groups and error</returns>
        </member>
        <member name="M:ShoNS.Stats.Anova1.Compute(System.Collections.Generic.IList{ShoNS.Array.DoubleArray})">
            <summary>Computes the 1-way ANOVA</summary>
            <param name="data">The groups, passed as a list of DoubleArray</param>
            <returns>The ANOVA stats for the groups and error</returns>
        </member>
        <member name="T:ShoNS.Stats.Anova2">
            <summary>Balanced 2-way ANOVA</summary>
        </member>
        <member name="M:ShoNS.Stats.Anova2.Compute(ShoNS.Array.DoubleArray)">
            <summary>Computes the ANOVA for the input data, number of replications is assumed to be 1</summary>
        </member>
        <member name="M:ShoNS.Stats.Anova2.Compute(ShoNS.Array.DoubleArray,System.Int32)">
            <summary>Computes the ANOVA for the input data, where the number of replications is provided</summary>
        </member>
        <member name="T:ShoNS.Stats.Beta">
            <summary>Beta distribution</summary>
        </member>
        <member name="M:ShoNS.Stats.Beta.Cdf(System.Double,System.Double,System.Double)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Value at which to compute the cdf</param>
            <param name="a">Shape parameter (alpha)</param>
            <param name="b">Shape parameter (beta)</param>
        </member>
        <member name="M:ShoNS.Stats.Beta.Cdf(System.Collections.IEnumerable,System.Double,System.Double)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Values at which to compute the cdf</param>
            <param name="a">Shape parameter (alpha)</param>
            <param name="b">Shape parameter (beta)</param>
        </member>
        <member name="M:ShoNS.Stats.Beta.Cdf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Values at which to compute the cdf</param>
            <param name="a">Shape parameters (alpha), one per input value</param>
            <param name="b">Shape parameters (beta), one per input value</param>
        </member>
        <member name="M:ShoNS.Stats.Beta.Pdf(System.Double,System.Double,System.Double)">
            <summary>Probability distribution function</summary>
            <param name="x">Value at which to compute the pdf</param>
            <param name="a">Shape parameter (alpha)</param>
            <param name="b">Shape parameter (beta)</param>
        </member>
        <member name="M:ShoNS.Stats.Beta.Pdf(System.Collections.IEnumerable,System.Double,System.Double)">
            <summary>Probability distribution function</summary>
            <param name="x">Values at which to compute the pdf</param>
            <param name="a">Shape parameter (alpha)</param>
            <param name="b">Shape parameter (beta)</param>
        </member>
        <member name="M:ShoNS.Stats.Beta.Pdf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Probability distribution function</summary>
            <param name="x">Values at which to compute the pdf</param>
            <param name="a">Shape parameters (alpha), one per input value</param>
            <param name="b">Shape parameters (beta), one per input value</param>
        </member>
        <member name="M:ShoNS.Stats.Beta.Stats(System.Double,System.Double,System.Double@)">
            <summary>Mean and variance</summary>
            <param name="a">Shape parameter (alpha)</param>
            <param name="b">Shape parameter (beta)</param>
            <param name="var">Output: variance</param>
            <returns>Mean</returns>
        </member>
        <member name="M:ShoNS.Stats.Beta.Stats(System.Collections.IEnumerable,System.Collections.IEnumerable,ShoNS.Array.DoubleArray@)">
            <summary>Mean and variance</summary>
            <param name="a">Shape parameters (alpha)</param>
            <param name="b">Shape parameters (beta)</param>
            <param name="var">Output: variance</param>
            <returns>Mean</returns>
        </member>
        <member name="M:ShoNS.Stats.Beta.Inv(System.Double,System.Double,System.Double)">
            <summary>Inverse beta cumulative probability distribution</summary>
            <param name="p">Probability at which to compute the inverse cdf</param>
            <param name="a">Shape parameter (alpha)</param>
            <param name="b">Shape parameter (beta)</param>
        </member>
        <member name="M:ShoNS.Stats.Beta.Inv(System.Collections.IEnumerable,System.Double,System.Double)">
            <summary>Inverse beta cumulative probability distribution</summary>
            <param name="p">Probabilities at which to compute the inverse cdf</param>
            <param name="a">Shape parameter (alpha)</param>
            <param name="b">Shape parameter (beta)</param>
        </member>
        <member name="M:ShoNS.Stats.Beta.Inv(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Inverse beta cumulative probability distribution</summary>
            <param name="p">Probabilities at which to compute the inverse cdf</param>
            <param name="a">Shape parameter (alpha), one per input value</param>
            <param name="b">Shape parameter (beta), one per input value</param>
        </member>
        <member name="M:ShoNS.Stats.Beta.MLE(System.Collections.IEnumerable,System.Double@)">
            <summary>Maximum likely estimate</summary>
            <param name="dataIn">Data to fit</param>
            <param name="bhat">Shape estimate (beta)</param>
            <returns>Shape estimate (alpha)</returns>
        </member>
        <member name="T:ShoNS.Stats.Bino">
            <summary>Binomial distribution</summary>
        </member>
        <member name="M:ShoNS.Stats.Bino.Cdf(System.Double,System.Double,System.Double)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Value at which to compute the cdf</param>
            <param name="n">Number of trials</param>
            <param name="p">Success probability</param>
        </member>
        <member name="M:ShoNS.Stats.Bino.Cdf(System.Collections.IEnumerable,System.Double,System.Double)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Values at which to compute the cdf</param>
            <param name="n">Number of trials</param>
            <param name="p">Success probability</param>
        </member>
        <member name="M:ShoNS.Stats.Bino.Cdf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Values at which to compute the cdf</param>
            <param name="n">Number of trials, one per input value</param>
            <param name="p">Success probability, one per input value</param>
        </member>
        <member name="M:ShoNS.Stats.Bino.Pdf(System.Double,System.Double,System.Double)">
            <summary>Probability distribution function</summary>
            <param name="x">Value at which to compute the pdf</param>
            <param name="n">Number of trials</param>
            <param name="p">Success probability</param>
        </member>
        <member name="M:ShoNS.Stats.Bino.Pdf(System.Collections.IEnumerable,System.Double,System.Double)">
            <summary>Probability distribution function</summary>
            <param name="x">Values at which to compute the pdf</param>
            <param name="n">Number of trials</param>
            <param name="p">Success probability</param>
        </member>
        <member name="M:ShoNS.Stats.Bino.Pdf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Probability distribution function</summary>
            <param name="x">Values at which to compute the pdf</param>
            <param name="n">Number of trials, one per input value</param>
            <param name="p">Success probability, one per input value</param>
        </member>
        <member name="M:ShoNS.Stats.Bino.Inv(System.Double,System.Double,System.Double)">
            <summary>Inverse cumulative distribution function</summary>
            <param name="prob">Probability at which to compute the inverse cdf</param>
            <param name="n">Number of trials</param>
            <param name="p">Success probability</param>
        </member>
        <member name="M:ShoNS.Stats.Bino.Inv(System.Collections.IEnumerable,System.Double,System.Double)">
            <summary>Inverse cumulative distribution function</summary>
            <param name="prob">Probabilities at which to compute the inverse cdf</param>
            <param name="n">Number of trials</param>
            <param name="p">Success probability</param>
        </member>
        <member name="M:ShoNS.Stats.Bino.Inv(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Inverse cumulative distribution function</summary>
            <param name="prob">Probabilities at which to compute the inverse cdf</param>
            <param name="n">Number of trials, one per input value</param>
            <param name="p">Success probability, one per input value</param>
        </member>
        <member name="M:ShoNS.Stats.Bino.Stats(System.Double,System.Double,System.Double@)">
             <summary>Mean and variance</summary>
             <param name="n">Number of trials</param>
             <param name="p">Success probability</param>
            <param name="var">Output: variance</param>
            <returns>Mean</returns> 
        </member>
        <member name="M:ShoNS.Stats.Bino.Stats(System.Collections.IEnumerable,System.Collections.IEnumerable,ShoNS.Array.DoubleArray@)">
             <summary>Mean and variance</summary>
             <param name="n">Number of trials</param>
             <param name="p">Success probability</param>
            <param name="var">Output: variance</param>
            <returns>Mean</returns> 
        </member>
        <member name="M:ShoNS.Stats.Bino.MLE(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Maximum likelihood estimate</summary>
        </member>
        <member name="M:ShoNS.Stats.Bino.MLE(System.Double,System.Int32)">
            <summary>Maximum likelihood estimate of a single sample</summary>
        </member>
        <member name="T:ShoNS.Stats.NegBino">
            <summary>Negative Binomial Distribution</summary>
        </member>
        <member name="M:ShoNS.Stats.NegBino.Cdf(System.Double,System.Double,System.Double)">
            <summary>Cumulative distribution function</summary>
        </member>
        <member name="M:ShoNS.Stats.NegBino.Cdf(System.Collections.IEnumerable,System.Double,System.Double)">
            <summary>Cumulative distribution function</summary>
        </member>
        <member name="M:ShoNS.Stats.NegBino.Cdf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Cumulative distribution function</summary>
        </member>
        <member name="M:ShoNS.Stats.NegBino.Pdf(System.Double,System.Double,System.Double)">
            <summary>Probability distribution function</summary>
        </member>
        <member name="M:ShoNS.Stats.NegBino.Pdf(System.Collections.IEnumerable,System.Double,System.Double)">
            <summary>Probability distribution function</summary>
        </member>
        <member name="M:ShoNS.Stats.NegBino.Pdf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Probability distribution function</summary>
        </member>
        <member name="M:ShoNS.Stats.NegBino.Inv(System.Double,System.Double,System.Double)">
            <summary>Inverse cumulative distribution function</summary>
        </member>
        <member name="M:ShoNS.Stats.NegBino.Inv(System.Collections.IEnumerable,System.Double,System.Double)">
            <summary>Inverse cumulative distribution function</summary>
        </member>
        <member name="M:ShoNS.Stats.NegBino.Inv(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Inverse cumulative distribution function</summary>
        </member>
        <member name="M:ShoNS.Stats.NegBino.Stats(System.Double,System.Double,System.Double@)">
            <summary>Mean and variance</summary>
        </member>
        <member name="M:ShoNS.Stats.NegBino.Stats(System.Collections.IEnumerable,System.Collections.IEnumerable,ShoNS.Array.DoubleArray@)">
            <summary>Mean and variance</summary>
        </member>
        <member name="T:ShoNS.Stats.BootstrapResults`1">
            <summary>Results of bootstrapping</summary>
        </member>
        <member name="F:ShoNS.Stats.BootstrapResults`1.stats">
            <summary>The results of applying a function to the samples</summary>
        </member>
        <member name="F:ShoNS.Stats.BootstrapResults`1.indices">
            <summary> The randomly selected indices</summary>
        </member>
        <member name="T:ShoNS.Stats.Bootstrap">
            <summary>Bootstrap Resampling</summary>
        </member>
        <member name="M:ShoNS.Stats.Bootstrap.Resample``2(System.Random,System.Int32,System.Func{ShoNS.Array.IArray{``0},``1},ShoNS.Array.IArray{``0})">
            <summary>Parallel bootstrap resampling</summary>
            <param name="rn">Random number generator to use to select the samples</param>
            <param name="numSamples">Number of samples to create</param>
            <param name="f">Function to apply</param>
            <param name="data">The data to resample</param>
            <returns>BoostrapResults object</returns>
        </member>
        <member name="M:ShoNS.Stats.Bootstrap.ResampleSeq``2(System.Random,System.Int32,System.Func{ShoNS.Array.IArray{``0},``1},ShoNS.Array.IArray{``0})">
            <summary>Bootstrap resampling, done sequentially</summary>
            <param name="rn">Random number generator to use to select the samples</param>
            <param name="numSamples">Number of samples to create</param>
            <param name="f">Function to apply</param>
            <param name="data">The data to resample</param>
            <returns>BoostrapResults object</returns>
        </member>
        <member name="M:ShoNS.Stats.Bootstrap.Resample``3(System.Random,System.Int32,System.Func{ShoNS.Array.IArray{``0},ShoNS.Array.IArray{``1},``2},ShoNS.Array.IArray{``0},ShoNS.Array.IArray{``1})">
            <summary>Parallel bootstrap resampling</summary>
            <param name="rn">Random number generator to use to select the samples</param>
            <param name="numSamples">Number of samples to create</param>
            <param name="f">Function to apply</param>
            <param name="data1">The data to resample</param>
            <param name="data2">The data to resample</param> 
            <returns>BoostrapResults object</returns>
        </member>
        <member name="M:ShoNS.Stats.Bootstrap.ResampleSeq``3(System.Random,System.Int32,System.Func{ShoNS.Array.IArray{``0},ShoNS.Array.IArray{``1},``2},ShoNS.Array.IArray{``0},ShoNS.Array.IArray{``1})">
            <summary>Bootstrap resampling, if running .NET 4.0 this is done in parallel</summary>
            <summary>Bootstrap resampling, done sequentially</summary>
            <param name="rn">Random number generator to use to select the samples</param>
            <param name="numSamples">Number of samples to create</param>
            <param name="f">Function to apply</param>
            <param name="data1">The data to resample</param>
            <param name="data2">The data to resample</param> 
            <returns>BoostrapResults object</returns>
        </member>
        <member name="M:ShoNS.Stats.Bootstrap.Resample``4(System.Random,System.Int32,System.Func{ShoNS.Array.IArray{``0},ShoNS.Array.IArray{``1},ShoNS.Array.IArray{``2},``3},ShoNS.Array.IArray{``0},ShoNS.Array.IArray{``1},ShoNS.Array.IArray{``2})">
            <summary>Parallel bootstrap resampling</summary>
            <param name="rn">Random number generator to use to select the samples</param>
            <param name="numSamples">Number of samples to create</param>
            <param name="f">Function to apply</param>
            <param name="data1">The data to resample</param>
            <param name="data2">The data to resample</param> 
            <param name="data3">The data to resample</param>  
            <returns>BoostrapResults object</returns>
        </member>
        <member name="M:ShoNS.Stats.Bootstrap.ResampleSeq``4(System.Random,System.Int32,System.Func{ShoNS.Array.IArray{``0},ShoNS.Array.IArray{``1},ShoNS.Array.IArray{``2},``3},ShoNS.Array.IArray{``0},ShoNS.Array.IArray{``1},ShoNS.Array.IArray{``2})">
            <summary>Bootstrap resampling, done sequentially</summary>
            <param name="rn">Random number generator to use to select the samples</param>
            <param name="numSamples">Number of samples to create</param>
            <param name="f">Function to apply</param>
            <param name="data1">The data to resample</param>
            <param name="data2">The data to resample</param> 
            <param name="data3">The data to resample</param>  
            <returns>BoostrapResults object</returns>
        </member>
        <member name="M:ShoNS.Stats.Bootstrap.Resample``5(System.Random,System.Int32,System.Func{ShoNS.Array.IArray{``0},ShoNS.Array.IArray{``1},ShoNS.Array.IArray{``2},ShoNS.Array.IArray{``3},``4},ShoNS.Array.IArray{``0},ShoNS.Array.IArray{``1},ShoNS.Array.IArray{``2},ShoNS.Array.IArray{``3})">
            <summary>Parallel bootstrap resampling</summary>
            <param name="rn">Random number generator to use to select the samples</param>
            <param name="numSamples">Number of samples to create</param>
            <param name="f">Function to apply</param>
            <param name="data1">The data to resample</param>
            <param name="data2">The data to resample</param> 
            <param name="data3">The data to resample</param>  
            <param name="data4">The data to resample</param>  
            <returns>BoostrapResults object</returns>
        </member>
        <member name="M:ShoNS.Stats.Bootstrap.ResampleSeq``5(System.Random,System.Int32,System.Func{ShoNS.Array.IArray{``0},ShoNS.Array.IArray{``1},ShoNS.Array.IArray{``2},ShoNS.Array.IArray{``3},``4},ShoNS.Array.IArray{``0},ShoNS.Array.IArray{``1},ShoNS.Array.IArray{``2},ShoNS.Array.IArray{``3})">
            <summary>Bootstrap resampling, done sequentially</summary>
            <param name="rn">Random number generator to use to select the samples</param>
            <param name="numSamples">Number of samples to create</param>
            <param name="f">Function to apply</param>
            <param name="data1">The data to resample</param>
            <param name="data2">The data to resample</param> 
            <param name="data3">The data to resample</param>  
            <param name="data4">The data to resample</param>  
            <returns>BoostrapResults object</returns>
        </member>
        <member name="T:ShoNS.Stats.Chi2">
            <summary>Chi-square distribution</summary>
        </member>
        <member name="M:ShoNS.Stats.Chi2.Cdf(System.Double,System.Double)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Value at which to compute the cdf</param>
            <param name="v">Degrees of freedom</param>
        </member>
        <member name="M:ShoNS.Stats.Chi2.CdfComplement(System.Double,System.Double)">
            <summary>1.0 - Cdf</summary>
            <remarks>This method is meant for cases where the cdf is very close to 1</remarks>
            <param name="x">Value at which to compute the cdf</param>
            <param name="v">Degrees of freedom</param> 
        </member>
        <member name="M:ShoNS.Stats.Chi2.Cdf(System.Collections.IEnumerable,System.Double)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Values at which to compute the cdf</param>
            <param name="v">Degrees of freedom</param>
        </member>
        <member name="M:ShoNS.Stats.Chi2.Cdf(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Values at which to compute the cdf</param>
            <param name="v">Degrees of freedom, one per input value</param>
        </member>
        <member name="M:ShoNS.Stats.Chi2.Pdf(System.Double,System.Double)">
            <summary>Probability distribution function</summary>
            <param name="x">Value at which to compute the pdf</param>
            <param name="v">Degrees of freedom</param>
        </member>
        <member name="M:ShoNS.Stats.Chi2.Pdf(System.Collections.IEnumerable,System.Double)">
            <summary>Probability distribution function</summary>
            <param name="x">Values at which to compute the pdf</param>
            <param name="v">Degrees of freedom</param>
        </member>
        <member name="M:ShoNS.Stats.Chi2.Pdf(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Probability distribution function</summary>
            <param name="x">Values at which to compute the pdf</param>
            <param name="v">Degrees of freedom, one per input value</param>
        </member>
        <member name="M:ShoNS.Stats.Chi2.Inv(System.Double,System.Double)">
            <summary>Inverse cdf</summary>
        </member>
        <member name="M:ShoNS.Stats.Chi2.Inv(System.Collections.IEnumerable,System.Double)">
            <summary>Inverse cdf</summary>
        </member>
        <member name="M:ShoNS.Stats.Chi2.Inv(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Inverse cdf</summary>
        </member>
        <member name="M:ShoNS.Stats.Chi2.Stats(System.Double,System.Double@)">
            <summary>Mean and variance</summary>
        </member>
        <member name="M:ShoNS.Stats.Chi2.Stats(System.Collections.IEnumerable,ShoNS.Array.DoubleArray@)">
            <summary>Mean and variance</summary>
        </member>
        <member name="T:ShoNS.Stats.Chi2Test">
            <summary>Pearson's chi-square test</summary>
        </member>
        <member name="M:ShoNS.Stats.Chi2Test.Test(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Double@)">
            <summary>Compute the p-value and chi-square, given observed and expected values</summary>
        </member>
        <member name="M:ShoNS.Stats.Chi2Test.Test(System.Collections.IEnumerable,System.Double@)">
            <summary>Compute the p-value and chi-square, given the table of observed values</summary>
        </member>
        <member name="T:ShoNS.Stats.Rank">
            <summary>Methods for computing the ranks of a sample</summary>
        </member>
        <member name="M:ShoNS.Stats.Rank.TiedRank(ShoNS.Array.DoubleArray,ShoNS.Array.DoubleArray@)">
            <summary>Compute the tied rank, returning the tie correction</summary>
            <param name="x">Vector of values</param>
            <param name="rank">The ranks</param>
            <returns>Tie correction</returns>
        </member>
        <member name="T:ShoNS.Stats.Corr">
            <summary>Correlation base class</summary>
        </member>
        <member name="F:ShoNS.Stats.Corr.rho">
            <summary>Correlation coefficient</summary>
        </member>
        <member name="F:ShoNS.Stats.Corr.twoTail">
            <summary></summary>
        </member>
        <member name="F:ShoNS.Stats.Corr.oneTailLT">
            <summary></summary>
        </member>
        <member name="F:ShoNS.Stats.Corr.oneTailGT">
            <summary></summary>
        </member>
        <member name="F:ShoNS.Stats.Corr.N">
            <summary></summary>
        </member>
        <member name="M:ShoNS.Stats.Corr.CompCorr(ShoNS.Array.DoubleArray,ShoNS.Array.DoubleArray)">
            <summary>Computes the correlation between two vectors</summary>
        </member>
        <member name="M:ShoNS.Stats.Corr.CompCorrW(System.Collections.IEnumerable)">
            <summary>Computes the correlation between the columns of x</summary>
        </member>
        <member name="M:ShoNS.Stats.Corr.CompCorrW(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary> Computes the correlation between the columns of x and y</summary>
        </member>
        <member name="M:ShoNS.Stats.Corr.TwoTailComp(System.Double,System.Double)">
            <summary>Computes the two-tailed p-value</summary>
        </member>
        <member name="M:ShoNS.Stats.Corr.OneTailGTComp(System.Double,System.Double)">
            <summary>Computes the one-tail p-value (right side)</summary>
        </member>
        <member name="M:ShoNS.Stats.Corr.OneTailLTComp(System.Double,System.Double)">
            <summary>Computes the one-tail p-value (left side)</summary>
        </member>
        <member name="P:ShoNS.Stats.Corr.Rho">
            <summary>Correlation coefficient</summary>
        </member>
        <member name="T:ShoNS.Stats.Pearson">
            <summary>Pearson's correlation</summary>
        </member>
        <member name="M:ShoNS.Stats.Pearson.#ctor(System.Collections.IEnumerable)">
            <summary>Pearson's correlation</summary>
        </member>
        <member name="M:ShoNS.Stats.Pearson.#ctor(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Pearson's correlation</summary>
        </member>
        <member name="M:ShoNS.Stats.Pearson.CompCorr(ShoNS.Array.DoubleArray,ShoNS.Array.DoubleArray)">
            <summary>Computes the correlation between the two matrices</summary>
        </member>
        <member name="P:ShoNS.Stats.Pearson.TwoTail">
            <summary>Probability that the correlation is not equal to 0</summary>
        </member>
        <member name="P:ShoNS.Stats.Pearson.OneTailLT">
            <summary>Probability that the correlation is less than 0</summary>
        </member>
        <member name="P:ShoNS.Stats.Pearson.OneTailGT">
            <summary>Probability that the correlation is greater than 0</summary>
        </member>
        <member name="T:ShoNS.Stats.Spearman">
            <summary>Spearman's rank correlation</summary>
        </member>
        <member name="M:ShoNS.Stats.Spearman.#ctor(System.Collections.IEnumerable)">
            <summary>Computes the correlation between the columns of x</summary>
        </member>
        <member name="M:ShoNS.Stats.Spearman.#ctor(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary> Computes the correlation between the columns of x and y</summary>
        </member>
        <member name="M:ShoNS.Stats.Spearman.CompCorr(ShoNS.Array.DoubleArray,ShoNS.Array.DoubleArray)">
            <summary> Computes the correlation between the columns of x and y</summary>
        </member>
        <member name="P:ShoNS.Stats.Spearman.TwoTail">
            <summary>Probability that the correlation is not equal to 0</summary>
        </member>
        <member name="P:ShoNS.Stats.Spearman.OneTailLT">
            <summary>Probability that the correlation is less than 0</summary>
        </member>
        <member name="P:ShoNS.Stats.Spearman.OneTailGT">
            <summary>Probability that the correlation is > 0</summary>
        </member>
        <member name="T:ShoNS.Stats.Exp">
            <summary>Exponential distribution</summary>
        </member>
        <member name="M:ShoNS.Stats.Exp.Cdf(System.Double,System.Double)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Value at which to compute the cdf</param>
            <param name="mu">Scale parameter</param>
        </member>
        <member name="M:ShoNS.Stats.Exp.Cdf(System.Double)">
            <summary>Cumulative distribution function, default scale of 1</summary>
            <param name="x">Value at which to compute the cdf</param>
        </member>
        <member name="M:ShoNS.Stats.Exp.Cdf(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Values at which to compute the cdf</param>
            <param name="mu">Scale parameters</param>
        </member>
        <member name="M:ShoNS.Stats.Exp.Cdf(System.Collections.IEnumerable)">
            <summary>Cumulative distribution function, default scale of 1</summary>
            <param name="x">Values at which to compute the cdf</param>
        </member>
        <member name="M:ShoNS.Stats.Exp.Pdf(System.Double,System.Double)">
            <summary>Probability distribution function</summary>
            <param name="x">Value at which to compute the pdf</param>
            <param name="mu">Scale parameter</param>
        </member>
        <member name="M:ShoNS.Stats.Exp.Pdf(System.Double)">
            <summary>Probability distribution function, default scale of 1</summary>
            <param name="x">Value at which to compute the pdf</param>
        </member>
        <member name="M:ShoNS.Stats.Exp.Pdf(System.Collections.IEnumerable,System.Double)">
            <summary>Probability distribution function</summary>
            <param name="x">Values at which to compute the cdf</param>
            <param name="mu">Scale parameter</param>
        </member>
        <member name="M:ShoNS.Stats.Exp.Pdf(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Probability distribution function</summary>
            <param name="x">Values at which to compute the cdf</param>
            <param name="mu">Scale parameters</param>
        </member>
        <member name="M:ShoNS.Stats.Exp.Pdf(System.Collections.IEnumerable)">
            <summary>Probability distribution function, default scale value of 1.0</summary>
            <param name="x">Values at which to compute the cdf</param>
        </member>
        <member name="M:ShoNS.Stats.Exp.Inv(System.Double,System.Double)">
            <summary>Inverse cumulative distribution function</summary> 
            <param name="p">Probability at which to compute the inverse cdf</param>
            <param name="mu">Scale parameter</param>
        </member>
        <member name="M:ShoNS.Stats.Exp.Inv(System.Double)">
            <summary>Inverse cumulative distribution function, default scale of 1.0</summary> 
            <param name="p">Probability at which to compute the inverse cdf</param>
        </member>
        <member name="M:ShoNS.Stats.Exp.Inv(System.Collections.IEnumerable,System.Double)">
            <summary>Inverse cumulative distribution function</summary> 
            <param name="p">Probabilities at which to compute the inverse cdf</param>
            <param name="mu">Scale parameter</param>
        </member>
        <member name="M:ShoNS.Stats.Exp.Inv(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Inverse cumulative distribution function</summary> 
            <param name="p">Probabilities at which to compute the inverse cdf</param>
            <param name="mu">Scale parameters</param>
        </member>
        <member name="M:ShoNS.Stats.Exp.Inv(System.Collections.IEnumerable)">
            <summary>Inverse cumulative distribution function, default scale of 1.0</summary> 
            <param name="p">Probabilities at which to compute the inverse cdf</param>
        </member>
        <member name="M:ShoNS.Stats.Exp.Stats(System.Double,System.Double@)">
             <summary>Mean and variance</summary>
             <param name="mu">Scale parameter</param>
            <param name="var">Output: variance</param>
             <returns>Mean</returns>
        </member>
        <member name="M:ShoNS.Stats.Exp.Stats(System.Collections.IEnumerable,ShoNS.Array.DoubleArray@)">
             <summary>Mean and variance</summary>
             <param name="mu">Scale parameters</param>
            <param name="var">Output: variance</param>
             <returns>Mean</returns>
        </member>
        <member name="M:ShoNS.Stats.Exp.MLE(System.Collections.IEnumerable)">
            <summary>Maximum likelihood estimate</summary>
            <param name="dataIn">Data to fit</param>
            <returns>mu estimate</returns>
        </member>
        <member name="T:ShoNS.Stats.F">
            <summary>F distribution</summary>
        </member>
        <member name="M:ShoNS.Stats.F.Cdf(System.Double,System.Double,System.Double)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Value at which to compute the cdf</param>
            <param name="v1">Degree of freedom parameter</param>
            <param name="v2">Degree of freedom parameter</param>
        </member>
        <member name="M:ShoNS.Stats.F.Cdf(System.Collections.IEnumerable,System.Double,System.Double)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Values at which to compute the cdf</param>
            <param name="v1">Degree of freedom parameter</param>
            <param name="v2">Degree of freedom parameter</param>
        </member>
        <member name="M:ShoNS.Stats.F.Cdf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Valuess at which to compute the cdf</param>
            <param name="v1">Degree of freedom parameters, one per input value</param>
            <param name="v2">Degree of freedom parameters, one per input value</param>
        </member>
        <member name="M:ShoNS.Stats.F.Pdf(System.Double,System.Double,System.Double)">
            <summary>Probability distribution function</summary>
            <param name="x">Value at which to compute the pdf</param>
            <param name="v1">Degree of freedom parameter</param>
            <param name="v2">Degree of freedom parameter</param>
        </member>
        <member name="M:ShoNS.Stats.F.Pdf(System.Collections.IEnumerable,System.Double,System.Double)">
            <summary>Probability distribution function</summary>
            <param name="x">Values at which to compute the pdf</param>
            <param name="v1">Degree of freedom parameter</param>
            <param name="v2">Degree of freedom parameter</param>
        </member>
        <member name="M:ShoNS.Stats.F.Pdf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Probability distribution function</summary>
            <param name="x">Valuess at which to compute the pdf</param>
            <param name="v1">Degree of freedom parameters, one per input value</param>
            <param name="v2">Degree of freedom parameters, one per input value</param>
        </member>
        <member name="M:ShoNS.Stats.F.Inv(System.Double,System.Double,System.Double)">
            <summary>Inverse cumulative distribution function</summary>
            <param name="p">Probability at which to compute the inverse cdf</param>
            <param name="v1">Degree of freedom parameter</param>
            <param name="v2">Degree of freedom parameter</param>
        </member>
        <member name="M:ShoNS.Stats.F.Inv(System.Collections.IEnumerable,System.Double,System.Double)">
            <summary>Inverse cumulative distribution function</summary>
            <param name="p">Probabilities at which to compute the inverse cdf</param>
            <param name="v1">Degree of freedom parameter</param>
            <param name="v2">Degree of freedom parameter</param>
        </member>
        <member name="M:ShoNS.Stats.F.Inv(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Inverse cumulative distribution function</summary>
            <param name="p">Probabilities at which to compute the inverse cdf</param>
            <param name="v1">Degree of freedom parameter, one per input value</param>
            <param name="v2">Degree of freedom parameter, one per input value</param>
        </member>
        <member name="M:ShoNS.Stats.F.Stats(System.Double,System.Double,System.Double@)">
            <summary>Mean and variance</summary>
            <param name="v1">Degree of freedom parameter</param>
            <param name="v2">Degree of freedom parameter</param>
            <param name="var">Output: variance</param>
            <returns>Mean</returns>
        </member>
        <member name="M:ShoNS.Stats.F.Stats(System.Collections.IEnumerable,System.Collections.IEnumerable,ShoNS.Array.DoubleArray@)">
            <summary>Mean and variance</summary>
            <param name="v1">Degree of freedom parameter</param>
            <param name="v2">Degree of freedom parameter</param>
            <param name="var">Output: variance</param>
            <returns>Mean</returns>
        </member>
        <member name="T:ShoNS.Stats.Gamma">
            <summary>Gamma distribution</summary>
        </member>
        <member name="M:ShoNS.Stats.Gamma.Cdf(System.Double,System.Double,System.Double)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Value at which to compute the cdf</param>
            <param name="k">Shape parameter</param>
            <param name="theta">Scale parameter</param>
        </member>
        <member name="M:ShoNS.Stats.Gamma.Cdf(System.Collections.IEnumerable,System.Double,System.Double)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Values at which to compute the cdf</param>
            <param name="k">Shape parameter</param>
            <param name="theta">Scale parameter</param>
        </member>
        <member name="M:ShoNS.Stats.Gamma.Cdf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Values at which to compute the cdf</param>
            <param name="k">Shape parameters, one per input value</param>
            <param name="theta">Scale parameter, one per input value</param>
        </member>
        <member name="M:ShoNS.Stats.Gamma.Pdf(System.Double,System.Double,System.Double)">
            <summary>Probability distribution function</summary>
            <param name="x">Value at which to compute the cdf</param>
            <param name="k">Shape parameter</param>
            <param name="theta">Scale parameter</param>
        </member>
        <member name="M:ShoNS.Stats.Gamma.Pdf(System.Collections.IEnumerable,System.Double,System.Double)">
            <summary>Probability distribution function</summary>
            <param name="x">Values at which to compute the cdf</param>
            <param name="k">Shape parameter</param>
            <param name="theta">Scale parameter</param>
        </member>
        <member name="M:ShoNS.Stats.Gamma.Pdf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Probability distribution function</summary>
            <param name="x">Values at which to compute the cdf</param>
            <param name="k">Shape parameter, one per input value</param>
            <param name="theta">Scale parameter, one per input value</param>
        </member>
        <member name="M:ShoNS.Stats.Gamma.GammaP(System.Double,System.Double)">
            <summary>p-gamma function</summary>
            <remarks>This gammainc(x,a,'lower') or gammainc(x,a) in Matlab</remarks>
        </member>
        <member name="M:ShoNS.Stats.Gamma.GammaP(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>p-gamma function</summary>
        </member>
        <member name="M:ShoNS.Stats.Gamma.GammaQ(System.Double,System.Double)">
            <summary>q-gamma function</summary>
            <remarks>This gammainc(x,a,'upper')in Matlab</remarks>
        </member>
        <member name="M:ShoNS.Stats.Gamma.GammaQ(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>q-gamma function</summary>
        </member>
        <member name="M:ShoNS.Stats.Gamma.GammaIncLower(System.Double,System.Double)">
            <summary>Lower incomplete gamma function</summary>
        </member>
        <member name="M:ShoNS.Stats.Gamma.GammaIncUpper(System.Double,System.Double)">
            <summary>Upper incomplete gamma function</summary>
        </member>
        <member name="M:ShoNS.Stats.Gamma.Inv(System.Double,System.Double,System.Double)">
            <summary>Inverse cumulative distribution function</summary>
            <param name="p">Probability at which to compute the inverse cdf</param>
            <param name="k">Shape parameter</param>
            <param name="theta">Scale parameter</param>
        </member>
        <member name="M:ShoNS.Stats.Gamma.Inv(System.Collections.IEnumerable,System.Double,System.Double)">
            <summary>Inverse cumulative distribution function</summary>
            <param name="p">Probabilities at which to compute the inverse cdf</param>
            <param name="k">Shape parameter</param>
            <param name="theta">Scale parameter</param>
        </member>
        <member name="M:ShoNS.Stats.Gamma.Inv(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Inverse cumulative distribution function</summary>
            <param name="p">Probabilities at which to compute the inverse cdf</param>
            <param name="k">Shape parameters, one per input value</param>
            <param name="theta">Scale parameter, one per input value</param>
        </member>
        <member name="M:ShoNS.Stats.Gamma.Stats(System.Double,System.Double,System.Double@)">
            <summary>Mean and variance</summary>
            <param name="k">Shape parameter</param>
            <param name="theta">Scale parameter</param>
            <param name="var">Output: variance</param>
            <returns>Mean</returns>
        </member>
        <member name="M:ShoNS.Stats.Gamma.Stats(System.Collections.IEnumerable,System.Collections.IEnumerable,ShoNS.Array.DoubleArray@)">
            <summary>Mean and variance</summary>
            <param name="k">Shape parameters</param>
            <param name="theta">Scale parameters</param>
            <param name="var">Output: variance</param>
            <returns>Mean</returns>
        </member>
        <member name="M:ShoNS.Stats.Gamma.Psi(System.Double)">
            <summary>Computes the psi (digamma) function</summary>
        </member>
        <member name="M:ShoNS.Stats.Gamma.MLE(System.Collections.IEnumerable,System.Double@)">
            <summary>Maximum likelihood estimate</summary>
            <param name="dataIn">Data to fit</param>
            <param name="thetahat">Output: theta estimate</param>
            <returns>k estimate</returns>
        </member>
        <member name="T:ShoNS.Stats.Gauss">
            <summary>The Gaussian (normal) distribution </summary>
        </member>
        <member name="M:ShoNS.Stats.Gauss.Cdf(System.Double)">
            <summary>Computes the cumulative distribution function using the default values for mu (0) and sigma (1).</summary>
            <param name="x">Value for which the cdf is computed.</param>
        </member>
        <member name="M:ShoNS.Stats.Gauss.Cdf(System.Collections.IEnumerable)">
            <summary>Computes the cumulative distribution function using the default values for mu (0) and sigma (1).</summary>
            <param name="x">Values for which the cdf is computed.</param>
        </member>
        <member name="M:ShoNS.Stats.Gauss.Cdf(System.Double,System.Double,System.Double)">
            <summary>Computes the cumulative distribution function using the given mu and sigma.</summary>
            <param name="x">Value for which the cdf is computed.</param>
            <param name="mu">mu</param>
            <param name="sigma">sigma</param>
        </member>
        <member name="M:ShoNS.Stats.Gauss.Cdf(System.Collections.IEnumerable,System.Double,System.Double)">
            <summary>Computes the cumulative distribution function using the given mu and sigma.</summary>
            <param name="x">Values for which the cdf is computed.</param>
            <param name="mu">mu</param>
            <param name="sigma">sigma</param>
        </member>
        <member name="M:ShoNS.Stats.Gauss.Cdf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Computes the cumulative distribution function using the given mu and sigma.</summary>
            <param name="x">Value for which the cdf is computed.</param>
            <param name="mu">mu, one per input value</param>
            <param name="sigma">sigma, one per input value</param>
        </member>
        <member name="M:ShoNS.Stats.Gauss.Erf(System.Double)">
            <summary>Computes the error function.</summary>
            <param name="x">Value for which the erf is computed.</param>
        </member>
        <member name="M:ShoNS.Stats.Gauss.Erf(System.Collections.IEnumerable)">
            <summary>Computes the error function.</summary>
            <param name="x">Values for which the erf is computed.</param>
        </member>
        <member name="M:ShoNS.Stats.Gauss.Erfc(System.Double)">
            <summary>Computes the complementary error function.</summary>
            <param name="x">Value for which the erfc is computed.</param>
        </member>
        <member name="M:ShoNS.Stats.Gauss.Erfc(System.Collections.IEnumerable)">
            <summary>Computes the complementary error function.</summary>
            <param name="x">Values for which the erfc is computed.</param>
        </member>
        <member name="M:ShoNS.Stats.Gauss.Pdf(System.Double)">
            <summary>Computes the probability distribution function for the default values of mu (0) and sigma(1).</summary>
            <param name="x">Value for which the pdf is computed.</param>
        </member>
        <member name="M:ShoNS.Stats.Gauss.Pdf(System.Collections.IEnumerable)">
            <summary>Computes the probability distribution function for the default values of mu (0) and sigma(1).</summary>
            <param name="x">Values for which the pdf is computed.</param>
        </member>
        <member name="M:ShoNS.Stats.Gauss.Pdf(System.Double,System.Double,System.Double)">
            <summary>Computes the probability distribution function for the give values of mu and sigma.</summary>
            <param name="x">Value for which the pdf is computed.</param>
            <param name="mu">mu</param>
            <param name="sigma">sigma</param>
        </member>
        <member name="M:ShoNS.Stats.Gauss.Pdf(System.Collections.IEnumerable,System.Double,System.Double)">
            <summary>Computes the probability distribution function for the give values of mu and sigma.</summary>
            <param name="x">Values for which the pdf is computed.</param>
            <param name="mu">mu</param>
            <param name="sigma">sigma</param>
        </member>
        <member name="M:ShoNS.Stats.Gauss.Pdf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Computes the probability distribution function for the give values of mu and sigma.</summary>
            <param name="x">Values for which the pdf is computed.</param>
            <param name="mu">mu, one per input value</param>
            <param name="sigma">sigma, one per input value</param>
        </member>
        <member name="M:ShoNS.Stats.Gauss.ErfCInv(System.Double)">
            <summary>Computes the inverse complementary error function.</summary>
            <param name="p">Value for which erfcinv is computed.</param>
        </member>
        <member name="M:ShoNS.Stats.Gauss.ErfCInv(System.Collections.IEnumerable)">
            <summary>Computes the inverse complementary error function.</summary>
            <param name="p">Values for which erfcinv is computed.</param>
        </member>
        <member name="M:ShoNS.Stats.Gauss.ErfInv(System.Double)">
            <summary>Computes the inverse error function.</summary>
            <param name="p">Value for which erfinv is computed.</param>
        </member>
        <member name="M:ShoNS.Stats.Gauss.ErfInv(System.Collections.IEnumerable)">
            <summary>Computes the inverse error function.</summary>
            <param name="p">Values for which erfinv is computed.</param>
        </member>
        <member name="M:ShoNS.Stats.Gauss.Inv(System.Double)">
            <summary>Computes the inverse cumulative distribution for the default values of mu (0) and sigma (1).</summary>
            <param name="p">Value for which the norminv is computed.</param>
        </member>
        <member name="M:ShoNS.Stats.Gauss.Inv(System.Collections.IEnumerable)">
            <summary>Computes the inverse cumulative distribution for the default values of mu (0) and sigma (1).</summary>
            <param name="p">Values for which the norminv is computed.</param>
        </member>
        <member name="M:ShoNS.Stats.Gauss.Inv(System.Double,System.Double,System.Double)">
            <summary>Computes the inverse cumulative distribution for the given values of mu and sigma.</summary>
            <param name="p">Value for which the norminv is computed.</param>
            <param name="mu">mu</param>
            <param name="sigma">sigma</param>
        </member>
        <member name="M:ShoNS.Stats.Gauss.Inv(System.Collections.IEnumerable,System.Double,System.Double)">
            <summary>Computes the inverse cumulative distribution for the given values of mu and sigma.</summary>
            <param name="p">Values for which the norminv is computed.</param>
            <param name="mu">mu</param>
            <param name="sigma">sigma</param>
        </member>
        <member name="M:ShoNS.Stats.Gauss.Inv(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Computes the inverse cumulative distribution for the given values of mu and sigma.</summary>
            <param name="p">Valuess for which the norminv is computed.</param>
            <param name="mu">mu, one per input value</param>
            <param name="sigma">sigma, one per input value</param>
        </member>
        <member name="M:ShoNS.Stats.Gauss.Stats(System.Double,System.Double,System.Double@)">
            <summary>Computes the expected mean and variance of the distribution with the given mu and sigma.</summary>
            <param name="mu">mu</param>
            <param name="sigma">sigma</param>
            <param name="var">Expected variance</param>
            <returns>Expected mean</returns>
        </member>
        <member name="M:ShoNS.Stats.Gauss.Stats(System.Collections.IEnumerable,System.Collections.IEnumerable,ShoNS.Array.DoubleArray@)">
            <summary>Computes the expected mean and variance of the distribution with the given mu and sigma.</summary>
            <param name="mu">mu</param>
            <param name="sigma">sigma</param>
            <param name="var">Expected variance</param>
            <returns>Expected mean</returns>
        </member>
        <member name="M:ShoNS.Stats.Gauss.MLE(System.Collections.IEnumerable,System.Double@)">
            <summary>Computes the maximum-likelihood estimation for the given input data.</summary>
            <param name="dataIn">The data</param>
            <param name="varhat">The estimated variance</param>
            <returns>The estimated mean</returns>
        </member>
        <member name="T:ShoNS.Stats.LogNorm">
            <summary>The log-normal distribution </summary>
        </member>
        <member name="M:ShoNS.Stats.LogNorm.Cdf(System.Double,System.Double,System.Double)">
            <summary>Computes the cumulative distribution function using the given mu and sigma.</summary>
            <param name="x">Value for which the cdf is computed.</param>
            <param name="mu">mu</param>
            <param name="sigma">sigma</param>
        </member>
        <member name="M:ShoNS.Stats.LogNorm.Cdf(System.Double)">
            <summary>Computes the cumulative distribution function using mu = 0 and sigma = 1.</summary>
            <param name="x">Value for which the cdf is computed.</param>
        </member>
        <member name="M:ShoNS.Stats.LogNorm.Cdf(System.Collections.IEnumerable,System.Double,System.Double)">
            <summary>Computes the cumulative distribution function using the given mu and sigma.</summary>
            <param name="x">Values for which the cdf is computed.</param>
            <param name="mu">mu</param>
            <param name="sigma">sigma</param>
        </member>
        <member name="M:ShoNS.Stats.LogNorm.Cdf(System.Collections.IEnumerable)">
            <summary>Computes the cumulative distribution function using mu = 0 and sigma = 1.</summary>
            <param name="x">Values for which the cdf is computed.</param>
        </member>
        <member name="M:ShoNS.Stats.LogNorm.Cdf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Computes the cumulative distribution function using the given mu and sigma.</summary>
            <param name="x">Values for which the cdf is computed.</param>
            <param name="mu">mu</param>
            <param name="sigma">sigma</param>
        </member>
        <member name="M:ShoNS.Stats.LogNorm.Pdf(System.Double,System.Double,System.Double)">
            <summary>Computes the probability distribution function using the given mu and sigma.</summary>
            <param name="x">Value for which the pdf is computed.</param>
            <param name="mu">mu</param>
            <param name="sigma">sigma</param>
        </member>
        <member name="M:ShoNS.Stats.LogNorm.Pdf(System.Double)">
            <summary>Computes the probability distribution function using mu = 0 and sigma = 1.</summary>
            <param name="x">Value for which the pdf is computed.</param>
        </member>
        <member name="M:ShoNS.Stats.LogNorm.Pdf(System.Collections.IEnumerable,System.Double,System.Double)">
            <summary>Computes the probability distribution function using the given mu and sigma.</summary>
            <param name="x">Values for which the pdf is computed.</param>
            <param name="mu">mu</param>
            <param name="sigma">sigma</param>
        </member>
        <member name="M:ShoNS.Stats.LogNorm.Pdf(System.Collections.IEnumerable)">
            <summary>Computes the probability distribution function using mu=0 and sigma = 1.</summary>
            <param name="x">Values for which the pdf is computed.</param>
        </member>
        <member name="M:ShoNS.Stats.LogNorm.Pdf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Computes the probability distribution function using the given mu and sigma.</summary>
            <param name="x">Values for which the pdf is computed.</param>
            <param name="mu">mu</param>
            <param name="sigma">sigma</param>
        </member>
        <member name="M:ShoNS.Stats.LogNorm.Inv(System.Double,System.Double,System.Double)">
            <summary>Computes the inverse cumulative distribution function using the given mu and sigma.</summary>
            <param name="p">Value for which the inverse cdf is computed.</param>
            <param name="mu">mu</param>
            <param name="sigma">sigma</param>
        </member>
        <member name="M:ShoNS.Stats.LogNorm.Inv(System.Double)">
            <summary>Computes the inverse cumulative distribution function using mu=0 and sigma =1</summary>
            <param name="p">Value for which the inverse cdf is computed.</param>
        </member>
        <member name="M:ShoNS.Stats.LogNorm.Inv(System.Collections.IEnumerable,System.Double,System.Double)">
            <summary>Computes the inverse cumulative distribution function using the given mu and sigma.</summary>
            <param name="p">Values for which the inverse cdf is computed.</param>
            <param name="mu">mu</param>
            <param name="sigma">sigma</param>
        </member>
        <member name="M:ShoNS.Stats.LogNorm.Inv(System.Collections.IEnumerable)">
            <summary>Computes the inverse cumulative distribution function using mu = 0 and sigma = 1.</summary>
            <param name="p">Values for which the inverse cdf is computed.</param>
        </member>
        <member name="M:ShoNS.Stats.LogNorm.Inv(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Computes the inverse cumulative distribution function using the given mu and sigma.</summary>
            <param name="p">Values for which the inverse cdf is computed.</param>
            <param name="mu">mu</param>
            <param name="sigma">sigma</param>
        </member>
        <member name="M:ShoNS.Stats.LogNorm.Stats(System.Double,System.Double,System.Double@)">
            <summary>Computes the expected mean and variance of the distribution with the given mu and sigma.</summary>
            <param name="mu">mu</param>
            <param name="sigma">sigma</param>
            <param name="var">Expected variance</param>
            <returns>Expected mean</returns>
        </member>
        <member name="M:ShoNS.Stats.LogNorm.MLE(System.Collections.IEnumerable,System.Double@)">
            <summary>Computes the maximum-likelihood estimation for the given input data.</summary>
            <param name="dataIn">The data</param>
            <param name="varhat">The estimated variance</param>
            <returns>The estimated mean</returns>
        </member>
        <member name="T:ShoNS.Stats.MVNorm">
            <summary>Multivariate normal distribution</summary>
        </member>
        <member name="M:ShoNS.Stats.MVNorm.Pdf(ShoNS.Array.DoubleArray,ShoNS.Array.DoubleArray,ShoNS.Array.DoubleArray)">
            <summary>Computes the probability distribution function</summary>
            <param name="x">Vector of length d</param>
            <param name="mu">Vector of length d</param>
            <param name="sigma">Matrix of size d x d</param>
        </member>
        <member name="M:ShoNS.Stats.MVNorm.Pdf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Computes the probability distribution function</summary>
            <param name="xIn">Vector of length d, must be convertible to DoubleArray</param>
            <param name="muIn">Vector of length d, must be convertible to DoubleArray</param>
            <param name="sigmaIn">Matrix of size d x d, must be convertible to DoubleArray</param>
        </member>
        <member name="M:ShoNS.Stats.MVNorm.Cdf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable,System.Double)">
            <summary>Computes the cumulative distribution function for a multivariate Gaussian
            The Cdf is the integral of the Pdf from negative infinity up to xIn
            Computed via a Monte Carlo algorithm, so the output has noise</summary>
            <param name="xIn">the upper limit of the integral (a vector of values)</param>
            <param name="muIn">the mean of the Gaussian (vector of values)</param>
            <param name="sigmaIn">the covariance of the Gaussian (a matrix of values)</param>
            <param name="eps">The accuracy of the Monte Carlo algorithm</param>
            <returns>the value of the integral, between 0.0 and 1.0</returns>
        </member>
        <member name="M:ShoNS.Stats.MVNorm.Cdf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Computes the cumulative distribution function for a multivariate Gaussian
            The Cdf is the integral of the Pdf from negative infinity up to xIn
            Computed via a Monte Carlo algorithm, so the output has noise.
            Relative accuracy of Monte Carlo defaults to 1e-3</summary>
            <param name="xIn">the upper limit of the integral (a vector of values)</param>
            <param name="muIn">the mean of the Gaussian (vector of values)</param>
            <param name="sigmaIn">the covariance of the Gaussian (a matrix of values)</param>
            <returns>the value of the integral, between 0.0 and 1.0</returns>
        </member>
        <member name="M:ShoNS.Stats.MVNorm.Cdf(ShoNS.Array.DoubleArray,ShoNS.Array.DoubleArray,ShoNS.Array.DoubleArray,System.Double)">
            <summary>Computes the cumulative distribution function for a multivariate Gaussian</summary>
            <param name="x">Vector of length d</param>
            <param name="mu">Vector of length d</param>
            <param name="sigma">Matrix of size d x d</param>
            <param name="eps">The relative accuracy of the Monte Carlo algorithm</param>
        </member>
        <member name="M:ShoNS.Stats.MVNorm.Integral(ShoNS.Array.DoubleArray,ShoNS.Array.DoubleArray,ShoNS.Array.DoubleArray)">
            <summary>Computes the cumulative distribution function for a multivariate Gaussian.
            Computed via a Monte Carlo algorithm, default relative error = 1e-3</summary>
            <param name="lo">Vector of length d</param>
            <param name="hi">Vector of length d</param>
            <param name="sigma">Matrix of size d x d</param>
        </member>
        <member name="M:ShoNS.Stats.MVNorm.Integral(ShoNS.Array.DoubleArray,ShoNS.Array.DoubleArray,ShoNS.Array.DoubleArray,System.Double)">
            <summary>Computes the cumulative distribution function for a multivariate Gaussian.
            Computed via a Monte Carlo algorithm</summary>
            <param name="lo">Vector of length d</param>
            <param name="hi">Vector of length d</param>
            <param name="sigma">Matrix of size d x d</param>
            <param name="eps">The desired accuracy of the Monte Carlo algorithm</param>
        </member>
        <member name="M:ShoNS.Stats.MVNorm.MLE(System.Collections.IEnumerable,ShoNS.Array.DoubleArray@)">
            <summary>Maximum likelihood estimate</summary>
            <param name="dataIn">Data to fit. You can pass a list of sample vectors of length n or a 2d array where the rows are the samples of dimension n.</param>
            <param name="covHat">Covariance estimate</param>
            <returns>Mean estimate</returns>
        </member>
        <member name="T:ShoNS.Stats.Geom">
            <summary>Geometric distribution</summary>
        </member>
        <member name="M:ShoNS.Stats.Geom.Cdf(System.Double,System.Double)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Value at which to compute the cdf</param>
            <param name="p">Success probability</param>
        </member>
        <member name="M:ShoNS.Stats.Geom.Cdf(System.Collections.IEnumerable,System.Double)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Values at which to compute the cdf</param>
            <param name="p">Success probability</param>
        </member>
        <member name="M:ShoNS.Stats.Geom.Cdf(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Values at which to compute the cdf</param>
            <param name="p">Success probabilities, one per input value</param>
        </member>
        <member name="M:ShoNS.Stats.Geom.Pdf(System.Double,System.Double)">
            <summary>Probability distribution function</summary>
            <param name="x">Value at which to compute the pdf</param>
            <param name="p">Success probability</param>
        </member>
        <member name="M:ShoNS.Stats.Geom.Pdf(System.Collections.IEnumerable,System.Double)">
            <summary>Probability distribution function</summary>
            <param name="x">Values at which to compute the cdf</param>
            <param name="p">Success probability</param>
        </member>
        <member name="M:ShoNS.Stats.Geom.Pdf(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Probability distribution function</summary>
            <param name="x">Values at which to compute the cdf</param>
            <param name="p">Success probabilities, one per input value</param>
        </member>
        <member name="M:ShoNS.Stats.Geom.Inv(System.Double,System.Double)">
            <summary>Inverse cumulative distribution function</summary>
            <param name="prob">Probability at which to compute the inverse cdf</param>
            <param name="p">Success probability</param>
        </member>
        <member name="M:ShoNS.Stats.Geom.Inv(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Inverse cumulative distribution function</summary>
            <param name="prob">Probability at which to compute the inverse cdf</param>
            <param name="p">Success probability</param>
        </member>
        <member name="M:ShoNS.Stats.Geom.Stats(System.Double,System.Double@)">
            <summary>Mean and variance</summary>
            <param name="p">Success probability</param>
            <param name="var">Output: variance</param>
            <returns>Mean</returns>
        </member>
        <member name="M:ShoNS.Stats.Geom.Stats(System.Collections.IEnumerable,ShoNS.Array.DoubleArray@)">
            <summary>Mean and variance</summary>
            <param name="p">Success probabilities</param>
            <param name="var">Output: variance</param>
            <returns>Mean</returns>
        </member>
        <member name="T:ShoNS.Stats.HyperGeom">
            <summary>Hypergeometric distribution</summary>
        </member>
        <member name="M:ShoNS.Stats.HyperGeom.Cdf(System.Double,System.Double,System.Double,System.Double)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Value at which to compute the cdf</param>
            <param name="m">Parameter m</param>
            <param name="k">Parameter k</param>
            <param name="n">Parameter n</param>
        </member>
        <member name="M:ShoNS.Stats.HyperGeom.Pdf(System.Double,System.Double,System.Double,System.Double)">
            <summary>Probability distribution function</summary>
            <param name="x">Value at which to compute the pdf</param>
            <param name="m">Parameter m</param>
            <param name="k">Parameter k</param>
            <param name="n">Parameter n</param>
        </member>
        <member name="M:ShoNS.Stats.HyperGeom.Stats(System.Double,System.Double,System.Double,System.Double@)">
             <summary>Mean and variance</summary>
             <param name="m">Parameter m</param>
             <param name="k">Parameter k</param>
             <param name="n">Parameter n</param>
            <param name="var">Output: variance</param>
             <returns>Mean</returns>
        </member>
        <member name="T:ShoNS.Stats.JB">
            <summary>Performs the Jarque-Bera test for normality</summary>
        </member>
        <member name="M:ShoNS.Stats.JB.Test(System.Collections.IEnumerable,System.Double@)">
            <summary>Computes the p-value and Jarque-Bera statistic</summary>
            <param name="x">Samples to test; must be of length 2000 or greater.</param>
            <param name="jbstat">Output - the JB statistic</param>
            <returns>p-value</returns>
        </member>
        <member name="T:ShoNS.Stats.CdfDelNoArg">
            <summary>cdf that takes no parameters</summary>
        </member>
        <member name="T:ShoNS.Stats.CdfDelOneArg">
            <summary>cdf that takes one parameter</summary>
        </member>
        <member name="T:ShoNS.Stats.CdfDelTwoArg">
            <summary>cdf that takes two parameters</summary>
        </member>
        <member name="T:ShoNS.Stats.CdfDelThreeArg">
            <summary>cdf that takes three parameters</summary>
        </member>
        <member name="T:ShoNS.Stats.KS">
            <summary>Computes the Kolmogorov-Smirnov goodness-of-fit</summary>
        </member>
        <member name="M:ShoNS.Stats.KS.Test(System.Collections.IEnumerable)">
            <summary>Compute the 2-tail probability for the data in x, using the normal distribution.</summary>
        </member>
        <member name="M:ShoNS.Stats.KS.Test(System.Collections.IEnumerable,ShoNS.Stats.CdfDelNoArg)">
             <summary>Compute the 2-tail probability for the data in x, given the theoretical cdf.</summary>
            <remarks>Call this version if the cdf takes no parameters.</remarks>
        </member>
        <member name="M:ShoNS.Stats.KS.Test(System.Collections.IEnumerable,ShoNS.Stats.CdfDelOneArg,System.Double)">
             <summary>Compute the 2-tail probability for the data in x, given the theoretical cdf.</summary>
            <remarks>Call this version if the cdf takes one parameters.</remarks>
        </member>
        <member name="M:ShoNS.Stats.KS.Test(System.Collections.IEnumerable,ShoNS.Stats.CdfDelTwoArg,System.Double,System.Double)">
             <summary>Compute the 2-tail probability for the data in x, given the theoretical cdf.</summary>
            <remarks>Call this version if the cdf takes two parameters.</remarks>
        </member>
        <member name="M:ShoNS.Stats.KS.Test(System.Collections.IEnumerable,ShoNS.Stats.CdfDelThreeArg,System.Double,System.Double,System.Double)">
             <summary>Compute the 2-tail probability for the data in x, given the theoretical cdf.</summary>
            <remarks>Call this version if the cdf takes three parameters.</remarks>
        </member>
        <member name="T:ShoNS.Stats.Logistic">
            <summary>Logistic distribution</summary>
        </member>
        <member name="M:ShoNS.Stats.Logistic.Pdf(System.Double,System.Double,System.Double)">
            <summary>Probability distribution function</summary>
            <param name="x">Value at which to compute the pdf</param>
            <param name="mu">Location parameter</param>
            <param name="scale">Scale parameter</param>
        </member>
        <member name="M:ShoNS.Stats.Logistic.Pdf(System.Collections.IEnumerable,System.Double,System.Double)">
            <summary>Probability distribution function</summary>
            <param name="x">Values at which to compute the pdf</param>
            <param name="mu">Location parameter</param>
            <param name="scale">Scale parameter</param>
        </member>
        <member name="M:ShoNS.Stats.Logistic.Pdf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Probability distribution function</summary>
            <param name="x">Values at which to compute the pdf</param>
            <param name="mu">Location parameter, one per input value</param>
            <param name="scale">Scale parameter, one per input value</param>
        </member>
        <member name="M:ShoNS.Stats.Logistic.Cdf(System.Double,System.Double,System.Double)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Value at which to compute the cdf</param>
            <param name="mu">Location parameter</param>
            <param name="scale">Scale parameter</param>
        </member>
        <member name="M:ShoNS.Stats.Logistic.Cdf(System.Collections.IEnumerable,System.Double,System.Double)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Values at which to compute the cdf</param>
            <param name="mu">Location parameter</param>
            <param name="scale">Scale parameter</param>
        </member>
        <member name="M:ShoNS.Stats.Logistic.Cdf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Values at which to compute the cdf</param>
            <param name="mu">Location parameter, one per input value</param>
            <param name="scale">Scale parameter, one per input value</param>
        </member>
        <member name="M:ShoNS.Stats.Logistic.Inv(System.Double,System.Double,System.Double)">
            <summary>Inverse cumulative distribution function</summary>
            <param name="p">Probability at which to compute the inverse cdf</param>
            <param name="mu">Location parameter</param>
            <param name="scale">Scale parameter</param>
        </member>
        <member name="M:ShoNS.Stats.Logistic.Inv(System.Collections.IEnumerable,System.Double,System.Double)">
            <summary>Inverse cumulative distribution function</summary>
            <param name="p">Probability at which to compute the inverse cdf</param>
            <param name="mu">Location parameter</param>
            <param name="scale">Scale parameter</param>
        </member>
        <member name="M:ShoNS.Stats.Logistic.Inv(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Inverse cumulative distribution function</summary>
            <param name="p">Probabilities at which to compute the inverse cdf</param>
            <param name="mu">Location parameters, one per input value</param>
            <param name="scale">Scale parameters, one per input value</param>
        </member>
        <member name="M:ShoNS.Stats.Logistic.Stats(System.Double,System.Double,System.Double@)">
            <summary>Mean and variance</summary>
            <param name="mu">Location parameter</param>
            <param name="scale">Scale parameter</param>
            <param name="var">Output: variance</param>
            <returns>Mean</returns>
        </member>
        <member name="M:ShoNS.Stats.Logistic.Stats(System.Collections.IEnumerable,System.Collections.IEnumerable,ShoNS.Array.DoubleArray@)">
            <summary>Mean and variance</summary>
            <param name="mu">Location parameter</param>
            <param name="scale">Scale parameter</param>
            <param name="var">Output: variance</param>
            <returns>Mean</returns>
        </member>
        <member name="T:ShoNS.Stats.Rayleigh">
            <summary>Rayleigh distribution</summary>
        </member>
        <member name="M:ShoNS.Stats.Rayleigh.Pdf(System.Double,System.Double)">
            <summary>Probability distribution function</summary>
            <param name="x">Value at which to compute the pdf</param>
            <param name="sigma">Sigma</param>
        </member>
        <member name="M:ShoNS.Stats.Rayleigh.Pdf(System.Collections.IEnumerable,System.Double)">
            <summary>Probability distribution function</summary>
            <param name="x">Values at which to compute the pdf</param>
            <param name="sigma">Sigma</param>
        </member>
        <member name="M:ShoNS.Stats.Rayleigh.Pdf(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Probability distribution function</summary>
            <param name="x">Values at which to compute the pdf</param>
            <param name="sigma">Sigma, one per input value</param>
        </member>
        <member name="M:ShoNS.Stats.Rayleigh.Cdf(System.Double,System.Double)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Value at which to compute the cdf</param>
            <param name="sigma">Sigma</param>
        </member>
        <member name="M:ShoNS.Stats.Rayleigh.Cdf(System.Collections.IEnumerable,System.Double)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Values at which to compute the cdf</param>
            <param name="sigma">Sigma</param>
        </member>
        <member name="M:ShoNS.Stats.Rayleigh.Cdf(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Values at which to compute the cdf</param>
            <param name="sigma">Sigma, one per input value</param>
        </member>
        <member name="M:ShoNS.Stats.Rayleigh.Inv(System.Double,System.Double)">
            <summary>Inverse cumulative distribution function</summary>
            <param name="p">Probability at which to compute the inverse cdf</param>
            <param name="sigma">Sigma</param>
        </member>
        <member name="M:ShoNS.Stats.Rayleigh.Inv(System.Collections.IEnumerable,System.Double)">
            <summary>Inverse cumulative distribution function</summary>
            <param name="p">Probabilities at which to compute the inverse cdf</param>
            <param name="sigma">Sigma</param>
        </member>
        <member name="M:ShoNS.Stats.Rayleigh.Inv(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Inverse cumulative distribution function</summary>
            <param name="p">Probabilities at which to compute the inverse cdf</param>
            <param name="sigma">Sigma</param>
        </member>
        <member name="M:ShoNS.Stats.Rayleigh.Stats(System.Double,System.Double@)">
            <summary>Mean and variance</summary>
            <param name="sigma">Sigma</param>
            <param name="var">Output: variance</param>
            <returns>Mean</returns>
        </member>
        <member name="M:ShoNS.Stats.Rayleigh.Stats(System.Collections.IEnumerable,ShoNS.Array.DoubleArray@)">
            <summary>Mean and variance</summary>
            <param name="sigma">Sigma</param>
            <param name="var">Output: variance</param>
            <returns>Mean</returns>
        </member>
        <member name="M:ShoNS.Stats.Rayleigh.MLE(System.Collections.IEnumerable)">
            <summary>Maximum likelihood estimate</summary>
            <param name="data">Data to fit</param>
            <returns>Estimate for sigma</returns>
        </member>
        <member name="T:ShoNS.Stats.Laplace">
            <summary>Laplace distribution</summary>
        </member>
        <member name="M:ShoNS.Stats.Laplace.Pdf(System.Double,System.Double,System.Double)">
            <param name="x">Value at which to compute the pdf</param>
            <param name="mu">Location parameter</param>
            <param name="b">Scale parameter</param>
        </member>
        <member name="M:ShoNS.Stats.Laplace.Pdf(System.Collections.IEnumerable,System.Double,System.Double)">
            <param name="x">Values at which to compute the pdf</param>
            <param name="mu">Location parameter</param>
            <param name="b">Scale parameter</param>
        </member>
        <member name="M:ShoNS.Stats.Laplace.Pdf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <param name="x">Values at which to compute the pdf</param>
            <param name="mu">Location parameter, one per input value</param>
            <param name="b">Scale parameter, one per input value</param>
        </member>
        <member name="M:ShoNS.Stats.Laplace.Cdf(System.Double,System.Double,System.Double)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Value at which to compute the cdf</param>
            <param name="mu">Location parameter</param>
            <param name="b">Scale parameter</param>
        </member>
        <member name="M:ShoNS.Stats.Laplace.Cdf(System.Collections.IEnumerable,System.Double,System.Double)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Values at which to compute the cdf</param>
            <param name="mu">Location parameter</param>
            <param name="b">Scale parameter</param>
        </member>
        <member name="M:ShoNS.Stats.Laplace.Cdf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Values at which to compute the cdf</param>
            <param name="mu">Location parameter, one per input value</param>
            <param name="b">Scale parameter, one per input value</param>
        </member>
        <member name="M:ShoNS.Stats.Laplace.Inv(System.Double,System.Double,System.Double)">
            <summary>Inverse cumulative distribution function</summary>
            <param name="p">Probability at which to compute the inverse cdf</param>
            <param name="mu">Location parameter</param>
            <param name="b">Scale parameter</param>
        </member>
        <member name="M:ShoNS.Stats.Laplace.Inv(System.Collections.IEnumerable,System.Double,System.Double)">
            <summary>Inverse cumulative distribution function</summary>
            <param name="p">Probabilities at which to compute the inverse cdf</param>
            <param name="mu">Location parameter</param>
            <param name="b">Scale parameter</param>
        </member>
        <member name="M:ShoNS.Stats.Laplace.Inv(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Inverse cumulative distribution function</summary>
            <param name="p">Probabilities at which to compute the inverse cdf</param>
            <param name="mu">Location parameter, one per input value</param>
            <param name="b">Scale parameter, one per input value</param>
        </member>
        <member name="M:ShoNS.Stats.Laplace.Stats(System.Double,System.Double,System.Double@)">
             <summary>Mean and variance</summary>
             <param name="mu">Location parameter</param>
             <param name="b">Scale parameter</param>
            <param name="var">Output: variance</param>
             <returns>Mean</returns>
        </member>
        <member name="M:ShoNS.Stats.Laplace.Stats(System.Collections.IEnumerable,System.Collections.IEnumerable,ShoNS.Array.DoubleArray@)">
             <summary>Mean and variance</summary>
             <param name="mu">Location parameter</param>
             <param name="b">Scale parameter</param>
            <param name="var">Output: variance</param>
             <returns>Mean</returns>
        </member>
        <member name="T:ShoNS.Stats.Cauchy">
            <summary>Cauchy distribution</summary>
        </member>
        <member name="M:ShoNS.Stats.Cauchy.Pdf(System.Double,System.Double,System.Double)">
            <summary>Probability distribution function</summary>
            <param name="x">Value at which to compute the pdf</param>
            <param name="x0">Location parameter</param>
            <param name="gamma">Scale parameter</param>
        </member>
        <member name="M:ShoNS.Stats.Cauchy.Pdf(System.Collections.IEnumerable,System.Double,System.Double)">
            <summary>Probability distribution function</summary>
            <param name="x">Values at which to compute the pdf</param>
            <param name="x0">Location parameter</param>
            <param name="gamma">Scale parameter</param>
        </member>
        <member name="M:ShoNS.Stats.Cauchy.Pdf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Probability distribution function</summary>
            <param name="x">Values at which to compute the pdf</param>
            <param name="x0">Location parameter, one per input value</param>
            <param name="gamma">Scale parameter, one per input value</param>
        </member>
        <member name="M:ShoNS.Stats.Cauchy.Cdf(System.Double,System.Double,System.Double)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Value at which to compute the cdf</param>
            <param name="x0">Location parameter</param>
            <param name="gamma">Scale parameter</param>
        </member>
        <member name="M:ShoNS.Stats.Cauchy.Cdf(System.Collections.IEnumerable,System.Double,System.Double)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Values at which to compute the cdf</param>
            <param name="x0">Location parameter</param>
            <param name="gamma">Scale parameter</param>
        </member>
        <member name="M:ShoNS.Stats.Cauchy.Cdf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Values at which to compute the cdf</param>
            <param name="x0">Location parameter, one per input value</param>
            <param name="gamma">Scale parameter, one per input value</param>
        </member>
        <member name="M:ShoNS.Stats.Cauchy.Inv(System.Double,System.Double,System.Double)">
            <summary>Inverse cumulative distribution function</summary>
            <param name="p">Probability at which to compute the inverse cdf</param>
            <param name="x0">Location parameter</param>
            <param name="gamma">Scale parameter</param>
        </member>
        <member name="M:ShoNS.Stats.Cauchy.Inv(System.Collections.IEnumerable,System.Double,System.Double)">
            <summary>Inverse cumulative distribution function</summary>
            <param name="p">Probabilities at which to compute the inverse cdf</param>
            <param name="x0">Location parameter</param>
            <param name="gamma">Scale parameter</param>
        </member>
        <member name="M:ShoNS.Stats.Cauchy.Inv(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Inverse cumulative distribution function</summary>
            <param name="p">Probabilities at which to compute the inverse cdf</param>
            <param name="x0">Location parameter, one per input value</param>
            <param name="gamma">Scale parameter, one per input value</param>
        </member>
        <member name="T:ShoNS.Stats.Pareto">
            <summary>Pareto distribution</summary>
        </member>
        <member name="M:ShoNS.Stats.Pareto.Pdf(System.Double,System.Double,System.Double)">
            <summary>Probability distribution function</summary>
            <param name="x">Value at which to compute the pdf</param>
            <param name="xm">Scale parameter</param>
            <param name="alpha">Shape parameter</param>
        </member>
        <member name="M:ShoNS.Stats.Pareto.Pdf(System.Collections.IEnumerable,System.Double,System.Double)">
            <summary>Probability distribution function</summary>
            <param name="x">Values at which to compute the pdf</param>
            <param name="xm">Location parameter</param>
            <param name="alpha">Scale parameter</param>
        </member>
        <member name="M:ShoNS.Stats.Pareto.Pdf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Probability distribution function</summary>
            <param name="x">Values at which to compute the pdf</param>
            <param name="xm">Location parameter, one per input value</param>
            <param name="alpha">Scale parameter, one per input value</param>
        </member>
        <member name="M:ShoNS.Stats.Pareto.Cdf(System.Double,System.Double,System.Double)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Value at which to compute the cdf</param>
            <param name="xm">Scale parameter</param>
            <param name="alpha">Shape parameter</param>
        </member>
        <member name="M:ShoNS.Stats.Pareto.Cdf(System.Collections.IEnumerable,System.Double,System.Double)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Values at which to compute the cdf</param>
            <param name="xm">Location parameter</param>
            <param name="alpha">Scale parameter</param>
        </member>
        <member name="M:ShoNS.Stats.Pareto.Cdf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Values at which to compute the cdf</param>
            <param name="xm">Location parameter, one per input value</param>
            <param name="alpha">Scale parameter, one per input value</param>
        </member>
        <member name="M:ShoNS.Stats.Pareto.Inv(System.Double,System.Double,System.Double)">
            <summary>Inverse cumulative distribution function</summary>
            <param name="p">Probability at which to compute the inverse cdf</param>
            <param name="xm">Scale parameter</param>
            <param name="alpha">Shape parameter</param>
        </member>
        <member name="M:ShoNS.Stats.Pareto.Inv(System.Collections.IEnumerable,System.Double,System.Double)">
            <summary>Inverse cumulative distribution function</summary>
            <param name="p">Probabilities at which to compute the inverse cdf</param>
            <param name="xm">Scale parameter</param>
            <param name="alpha">Shape parameter</param>
        </member>
        <member name="M:ShoNS.Stats.Pareto.Inv(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Inverse cumulative distribution function</summary>
            <param name="p">Probabilities at which to compute the inverse cdf</param>
            <param name="xm">Location parameter, one per input value</param>
            <param name="alpha">Scale parameter, one per input value</param>
        </member>
        <member name="M:ShoNS.Stats.Pareto.Stats(System.Double,System.Double,System.Double@)">
            <summary>Computes the expected mean and variance of the distribution with the given xm and alpha.</summary>
            <param name="xm">xm</param>
            <param name="alpha">alpha</param>
            <param name="var">Expected variance</param>
            <returns>Expected mean</returns>
        </member>
        <member name="M:ShoNS.Stats.Pareto.Stats(System.Collections.IEnumerable,System.Collections.IEnumerable,ShoNS.Array.DoubleArray@)">
            <summary>Computes the expected mean and variance of the distribution with the given xm and alpha.</summary>
            <param name="xm">xm</param>
            <param name="alpha">alpha</param>
            <param name="var">Expected variance</param>
            <returns>Expected mean</returns>
        </member>
        <member name="M:ShoNS.Stats.Pareto.MLE(System.Collections.IEnumerable,System.Double@)">
            <summary>Computes the maximum-likelihood estimation for the given input data.</summary>
            <param name="dataIn">The data</param>
            <param name="alphahat">The estimated alpha</param>
            <returns>The estimated xm</returns>
        </member>
        <member name="T:ShoNS.Stats.RandAlgo">
            <summary>Defines the underlying algorithm used to generate random numbers.</summary>
        </member>
        <member name="F:ShoNS.Stats.RandAlgo.MCG31">
            <summary>31-bit multiplicative congruential generator</summary>
        </member>
        <member name="F:ShoNS.Stats.RandAlgo.R250">
            <summary>Generalized feedback shift register generator</summary>	
        </member>
        <member name="F:ShoNS.Stats.RandAlgo.MRG32K3A">
            <summary>Combined multiple recursive generator with two components of order 3</summary>	
        </member>
        <member name="F:ShoNS.Stats.RandAlgo.MCG59">
            <summary>59-bit multiplicative congruential generator</summary>
        </member>
        <member name="F:ShoNS.Stats.RandAlgo.MT">
            <summary>Mersenne-Twister</summary>
        </member>
        <member name="F:ShoNS.Stats.RandAlgo.SOBOL">
            <summary>32-bit Gray-code based generator</summary>
        </member>
        <member name="F:ShoNS.Stats.RandAlgo.NIEDERR">
            <summary>32-bit Gray-code based generator</summary>
        </member>
        <member name="T:ShoNS.Stats.AccuracyMode">
            <summary>Defines the accuracy mode used by the generator.</summary>
        </member>
        <member name="F:ShoNS.Stats.AccuracyMode.FAST">
            <summary>Fast generation</summary>
        </member>
        <member name="F:ShoNS.Stats.AccuracyMode.ACCURATE">
            <summary>Accurate generation</summary>
        </member>
        <member name="T:ShoNS.Stats.GaussGenMethod">
            <summary>Defines the methods for generating Gaussian random numbers</summary>
        </member>
        <member name="F:ShoNS.Stats.GaussGenMethod.BOXMULLER">
            <summary>Box-Muller</summary>
        </member>
        <member name="F:ShoNS.Stats.GaussGenMethod.BOXMULLER2">
            <summary>Box-Muller in pairs</summary>
        </member>
        <member name="F:ShoNS.Stats.GaussGenMethod.ICDF">
            <summary>Inverse CDF</summary>
        </member>
        <member name="T:ShoNS.Stats.PoissonGenMethod">
            <summary>Defines the methods for generating Poisson random numbers</summary>
        </member>
        <member name="F:ShoNS.Stats.PoissonGenMethod.PTPE">
            <summary>PTPE acceptance/rejection</summary>
        </member>
        <member name="F:ShoNS.Stats.PoissonGenMethod.NORM">
            <summary>Transformation of normal generation</summary>
        </member>
        <member name="T:ShoNS.Stats.BaseRand">
            <summary> Base class for generating the continuous distributions </summary>
        </member>
        <member name="F:ShoNS.Stats.BaseRand.BUFFER_SIZE">
            <summary>Buffer size</summary>
        </member>
        <member name="F:ShoNS.Stats.BaseRand.streamPtr">
            <summary>Stream containing random numbers</summary>
        </member>
        <member name="F:ShoNS.Stats.BaseRand.randArr">
            <summary>Array of random numbers</summary>
        </member>
        <member name="F:ShoNS.Stats.BaseRand.curcount">
            <summary>Current random number count</summary>
        </member>
        <member name="F:ShoNS.Stats.BaseRand.seed">
            <summary>Seed</summary>
        </member>
        <member name="F:ShoNS.Stats.BaseRand.algo">
            <summary>Underlying algorithm to use</summary>
        </member>
        <member name="M:ShoNS.Stats.BaseRand.#ctor(System.Int32)">
            <summary>Create a generator object with the given seed and using Mersenne-Twister.</summary>
        </member>
        <member name="M:ShoNS.Stats.BaseRand.#ctor(ShoNS.Stats.RandAlgo,System.Int32)">
            <summary>Create a generator object with the given algorithm and seed</summary>
        </member>
        <member name="M:ShoNS.Stats.BaseRand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.BaseRand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.BaseRand.Dispose(System.Boolean)">
            <summary>Dispose of generator object</summary>
        </member>
        <member name="M:ShoNS.Stats.BaseRand.Finalize">
            <summary>Finalizer</summary>
        </member>
        <member name="M:ShoNS.Stats.BaseRand.Dispose">
            <summary>Dispose of generator object</summary>
        </member>
        <member name="M:ShoNS.Stats.BaseRand.Next">
            <summary>Returns the next 32-bit random integer</summary>
        </member>
        <member name="M:ShoNS.Stats.BaseRand.Next(System.Int32)">
            <summary>Returns the next 32-bit random integer</summary>
            <param name="maxValue">Maximum integer to return</param>
        </member>
        <member name="M:ShoNS.Stats.BaseRand.Next(System.Int32,System.Int32)">
            <summary>Returns the next 32-bit random integer</summary>
            <param name="minValue">Minimum integer to return</param>
            <param name="maxValue">Maximum integer to return</param>
        </member>
        <member name="M:ShoNS.Stats.BaseRand.NextBytes(System.Byte[])">
            <summary>Returns the next random bytes</summary>
            <param name="buffer">Byte buffer to fill</param>
        </member>
        <member name="M:ShoNS.Stats.BaseRand.NextDouble">
            <summary>Returns the next double-precision floating point number</summary>
        </member>
        <member name="P:ShoNS.Stats.BaseRand.Algo">
            <summary>Gets the underlying algorithm in use</summary>
        </member>
        <member name="P:ShoNS.Stats.BaseRand.Seed">
            <summary>Gets the current seed in use</summary>
        </member>
        <member name="T:ShoNS.Stats.BaseRandDiscrete">
            <summary>Base class for generating the discrete distributions</summary>
        </member>
        <member name="F:ShoNS.Stats.BaseRandDiscrete.BUFFER_SIZE">
            <summary>Buffer size</summary>
        </member>
        <member name="F:ShoNS.Stats.BaseRandDiscrete.streamPtr">
            <summary>Stream containing random numbers</summary>
        </member>
        <member name="F:ShoNS.Stats.BaseRandDiscrete.randArr">
            <summary>Array of random numbers</summary> 
        </member>
        <member name="F:ShoNS.Stats.BaseRandDiscrete.curcount">
            <summary>Current random number count</summary>        
        </member>
        <member name="F:ShoNS.Stats.BaseRandDiscrete.seed">
            <summary>Seed</summary>       
        </member>
        <member name="F:ShoNS.Stats.BaseRandDiscrete.algo">
            <summary>Underlying algorithm to use</summary>
        </member>
        <member name="M:ShoNS.Stats.BaseRandDiscrete.#ctor(System.Int32)">
            <summary>Create a generator object with the given seed and using Mersenne-Twister.</summary>
        </member>
        <member name="M:ShoNS.Stats.BaseRandDiscrete.#ctor(ShoNS.Stats.RandAlgo,System.Int32)">
            <summary>Create a generator object with the given algorithm and seed.</summary>
        </member>
        <member name="M:ShoNS.Stats.BaseRandDiscrete.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.BaseRandDiscrete.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.BaseRandDiscrete.Dispose(System.Boolean)">
            <summary>Dispose of generator object</summary>        
        </member>
        <member name="M:ShoNS.Stats.BaseRandDiscrete.Finalize">
            <summary>Finalizer</summary>
        </member>
        <member name="M:ShoNS.Stats.BaseRandDiscrete.Dispose">
            <summary>Dispose of generator object</summary>
        </member>
        <member name="M:ShoNS.Stats.BaseRandDiscrete.Next">
            <summary>Returns the next 32-bit random integer</summary>
        </member>
        <member name="M:ShoNS.Stats.BaseRandDiscrete.Next(System.Int32)">
            <summary>Returns the next 32-bit random integer</summary>
            <param name="maxValue">Maximum integer to return</param>
        </member>
        <member name="M:ShoNS.Stats.BaseRandDiscrete.Next(System.Int32,System.Int32)">
            <summary>Returns the next 32-bit random integer</summary>
            <param name="minValue">Minimum integer to return</param>
            <param name="maxValue">Maximum integer to return</param>
        </member>
        <member name="M:ShoNS.Stats.BaseRandDiscrete.NextBytes(System.Byte[])">
            <summary>Returns the next random bytes</summary>
            <param name="buffer">Byte buffer to fill</param>
        </member>
        <member name="M:ShoNS.Stats.BaseRandDiscrete.NextDouble">
            <summary>Returns the next double-precision floating point number</summary>
        </member>
        <member name="P:ShoNS.Stats.BaseRandDiscrete.Algo">
            <summary>Gets the underlying algorithm in use</summary>
        </member>
        <member name="P:ShoNS.Stats.BaseRandDiscrete.Seed">
            <summary>Gets the current seed in use</summary>
        </member>
        <member name="T:ShoNS.Stats.BetaRandMKL">
            <summary>Random numbers from a beta distribution with shape parameters, p and q, offset parameter a, and scale parameter scale.</summary>
        </member>
        <member name="M:ShoNS.Stats.BetaRandMKL.#ctor(System.Double,System.Double,System.Int32)">
            <summary>Creates a beta random number generator with offset = 0 and scale = 1</summary>
            <param name="p">Shape</param>
            <param name="q">Shape</param> 
            <param name="seed">Seed</param>
        </member>
        <member name="M:ShoNS.Stats.BetaRandMKL.#ctor(System.Double,System.Double,System.Double,System.Int32)">
            <summary>Creates a beta random number generator with offset = 0.</summary>
            <param name="p">Shape</param>
            <param name="q">Shape</param> 
            <param name="scale">Scale</param>
            <param name="seed">Seed</param>
        </member>
        <member name="M:ShoNS.Stats.BetaRandMKL.#ctor(System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>Creates a beta random number generator</summary>
            <param name="p">Shape</param>
            <param name="q">Shape</param> 
            <param name="a">Offset</param>  
            <param name="scale">Scale</param>
            <param name="seed">Seed</param>
        </member>
        <member name="M:ShoNS.Stats.BetaRandMKL.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.BetaRandMKL.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.BetaRandMKL.Sample">
            <summary>Returns a double-precision floating point random number</summary>
        </member>
        <member name="P:ShoNS.Stats.BetaRandMKL.Accuracy">
            <summary>Gets/sets the accuracy mode used by MKL, default is FAST</summary>
        </member>
        <member name="T:ShoNS.Stats.BinoRandMKL">
            <summary>Random numbers from a binomial distribution with number of trials parameter numTrials and success probability parameter p.</summary>
        </member>
        <member name="M:ShoNS.Stats.BinoRandMKL.#ctor(System.Int32,System.Double,System.Int32)">
            <summary>Creates a binomial random number generator</summary>
            <param name="numTrials">Number of trials</param>
            <param name="p">Success probability in each trial</param>
            <param name="seed">Seed</param>
        </member>
        <member name="M:ShoNS.Stats.BinoRandMKL.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.BinoRandMKL.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.BinoRandMKL.Next">
            <summary>Returns the next 32-bit random integer</summary>
        </member>
        <member name="T:ShoNS.Stats.BernoulliRandMKL">
            <summary>Random numbers from a Bernoulli distribution with success probabilty parameter p.</summary>
        </member>
        <member name="M:ShoNS.Stats.BernoulliRandMKL.#ctor(System.Double,System.Int32)">
            <summary>Creates a Bernoulli random number generator</summary>
            <param name="p">Success probability</param>
            <param name="seed">Seed</param>
        </member>
        <member name="M:ShoNS.Stats.BernoulliRandMKL.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.BernoulliRandMKL.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.BernoulliRandMKL.Next">
            <summary>Returns the next 32-bit random integer</summary>
        </member>
        <member name="T:ShoNS.Stats.NegBinoRandMKL">
            <summary>Random numbers from a negative binomial distribution with number of failures parameter a and success probablity parameter p.</summary>
        </member>
        <member name="M:ShoNS.Stats.NegBinoRandMKL.#ctor(System.Double,System.Double,System.Int32)">
            <summary>Creates a negative binomial random number generator</summary>
            <param name="a">Number of failures</param>
            <param name="p">Success probability</param>
            <param name="seed">Seed</param>
        </member>
        <member name="M:ShoNS.Stats.NegBinoRandMKL.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.NegBinoRandMKL.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.NegBinoRandMKL.Next">
            <summary>Returns the next 32-bit random integer</summary>
        </member>
        <member name="T:ShoNS.Stats.ExpRandMKL">
            <summary>Random numbers from an exponential distribution with scale parameter beta and offset a.</summary>
        </member>
        <member name="M:ShoNS.Stats.ExpRandMKL.#ctor(System.Double,System.Int32)">
            <summary>Creates an exponential random number generator with the offset = 0.</summary>
            <param name="beta">Scale</param>
            <param name="seed">Seed</param>
        </member>
        <member name="M:ShoNS.Stats.ExpRandMKL.#ctor(System.Double,System.Double,System.Int32)">
            <summary>Creates an exponential random number generator</summary>
            <param name="beta">Scale</param>
            <param name="a">Offset</param>        
            <param name="seed">Seed</param>
        </member>
        <member name="M:ShoNS.Stats.ExpRandMKL.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.ExpRandMKL.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.ExpRandMKL.Sample">
            <summary>Returns a double-precision floating point random number</summary>
        </member>
        <member name="P:ShoNS.Stats.ExpRandMKL.Accuracy">
            <summary>Gets/sets the accuracy mode used by MKL, default is FAST</summary>
        </member>
        <member name="T:ShoNS.Stats.GammaRandMKL">
            <summary>Random numbers from a gamma distribution with shape alpha, offset a, and scale beta.</summary>
        </member>
        <member name="M:ShoNS.Stats.GammaRandMKL.#ctor(System.Double,System.Double,System.Double,System.Int32)">
            <summary>Creates a gamma random number generator</summary>
            <param name="alpha">Shape</param>
            <param name="a">Offset</param>
            <param name="beta">Scale</param>
            <param name="seed">Seed</param>
        </member>
        <member name="M:ShoNS.Stats.GammaRandMKL.#ctor(System.Double,System.Double,System.Int32)">
            <summary>Creates a gamma random number generator with offset = 0</summary>
            <param name="alpha">Shape</param>
            <param name="beta">Scale</param>
            <param name="seed">Seed</param>
        </member>
        <member name="M:ShoNS.Stats.GammaRandMKL.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.GammaRandMKL.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.GammaRandMKL.Sample">
            <summary>Returns a double-precision floating point random number</summary>
        </member>
        <member name="P:ShoNS.Stats.GammaRandMKL.Accuracy">
            <summary>Gets/sets the accuracy mode used by MKL, default is FAST</summary>
        </member>
        <member name="T:ShoNS.Stats.Chi2RandMKL">
            <summary>Random numbers from a chi-square distribution with degrees of freedom parameter v.</summary>
        </member>
        <member name="M:ShoNS.Stats.Chi2RandMKL.#ctor(System.Double,System.Int32)">
            <summary>Create a Chi2Rand object with the given degrees of freedom, v, and using the seed</summary>
        </member>
        <member name="M:ShoNS.Stats.Chi2RandMKL.Next">
            <summary>Return an integer: not implemented for Chi2Rand</summary>
        </member>
        <member name="M:ShoNS.Stats.Chi2RandMKL.Next(System.Int32)">
            <summary>Return an integer with the given maximum value: not implemented for Chi2Rand</summary>
        </member>
        <member name="M:ShoNS.Stats.Chi2RandMKL.Next(System.Int32,System.Int32)">
            <summary>Return an integer betwen the given minimum and maximum values: not implemented for Chi2Rand</summary>
        </member>
        <member name="M:ShoNS.Stats.Chi2RandMKL.NextBytes(System.Byte[])">
            <summary>Return a buffer of bytes: not implemented for Chi2Rand</summary>
        </member>
        <member name="M:ShoNS.Stats.Chi2RandMKL.Sample">
            <summary>Returns a double-precision floating point random number</summary>
        </member>
        <member name="M:ShoNS.Stats.Chi2RandMKL.NextDouble">
            <summary>Returns a double-precision floating point random number</summary>
        </member>
        <member name="P:ShoNS.Stats.Chi2RandMKL.Seed">
            <summary>Gets the current seed in use</summary>
        </member>
        <member name="T:ShoNS.Stats.GaussRandMKL">
            <summary>Random numbers from a Gaussian distribution.</summary>
        </member>
        <member name="M:ShoNS.Stats.GaussRandMKL.#ctor(System.Double,System.Double,System.Int32)">
            <summary>Random numbers from a Gaussian distribution with the given mean and standard deviation, uses BOX-MULLER by default</summary>
        </member>
        <member name="M:ShoNS.Stats.GaussRandMKL.#ctor(ShoNS.Stats.GaussGenMethod,System.Double,System.Double,System.Int32)">
            <summary>Random numbers from a Gaussian distribution with the given mean and standard deviation, using the given generation method</summary>
        </member>
        <member name="M:ShoNS.Stats.GaussRandMKL.#ctor(System.Int32)">
            <summary>Random numbers from a Gaussian distribution with mean of 0 and standard deviation of 1, uses BOX-MULLER by default</summary>
        </member>
        <member name="M:ShoNS.Stats.GaussRandMKL.#ctor(ShoNS.Stats.GaussGenMethod,System.Int32)">
            <summary>Random numbers from a Gaussian distribution with mean of 0 and standard deviation of 1</summary>
        </member>
        <member name="M:ShoNS.Stats.GaussRandMKL.#ctor(System.Int32,System.Double,System.Double,System.Int32)">
            <summary>Meant for multithreaded appliations: Random numbers from a Gaussian distribution with the given mean and standard deviation, uses BOX-MULLER by default</summary>
        </member>
        <member name="M:ShoNS.Stats.GaussRandMKL.#ctor(System.Int32,ShoNS.Stats.GaussGenMethod,System.Double,System.Double,System.Int32)">
            <summary>Meant for multithreaded appliations: Random numbers from a Gaussian distribution with the given mean and standard deviation, using the given generation method</summary>
        </member>
        <member name="M:ShoNS.Stats.GaussRandMKL.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.GaussRandMKL.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.GaussRandMKL.Sample">
            <summary>Returns a double-precision floating point random number</summary>
        </member>
        <member name="P:ShoNS.Stats.GaussRandMKL.GenMethod">
            <summary>Gets the method used to generate random numbers</summary>
        </member>
        <member name="T:ShoNS.Stats.GaussRandMKLFactory">
            <summary> Gaussian random number generator factory object which produces generators suitable for multi-threaded use.</summary>
        </member>
        <member name="M:ShoNS.Stats.GaussRandMKLFactory.#ctor(System.Int32)">
            <summary>Creates a Gaussian random number generator factory object with mean of 0 and standard deviation of 1</summary>
            <param name="seed">Seed to use</param>
        </member>
        <member name="M:ShoNS.Stats.GaussRandMKLFactory.#ctor(System.Double,System.Double,System.Int32)">
            <summary>Creates a Gaussian random number generator factory object</summary>
            <param name="mean">Mean</param>
            <param name="std">Standard deviation</param>
            <param name="seed">Seed to use</param>
        </member>
        <member name="M:ShoNS.Stats.GaussRandMKLFactory.#ctor(ShoNS.Stats.GaussGenMethod,System.Double,System.Double,System.Int32)">
            <summary>Creates a Gaussian random number generator factory object</summary>
            <param name="genMethod">Method for generating Gaussian random numbers</param>
            <param name="mean">Mean</param>
            <param name="std">Standard deviation</param>
            <param name="seed">Seed to use</param>
        </member>
        <member name="M:ShoNS.Stats.GaussRandMKLFactory.CreateRandom">
            <summary>Creates a Gaussian Random object</summary>
            <returns>Gaussian random number generator</returns>
        </member>
        <member name="T:ShoNS.Stats.GaussMVRandMKL">
            <summary>Random numbers from a multivariate Gaussian distribution.</summary>
        </member>
        <member name="M:ShoNS.Stats.GaussMVRandMKL.Dispose(System.Boolean)">
            <summary>Dispose of generator object</summary>
        </member>
        <member name="M:ShoNS.Stats.GaussMVRandMKL.Finalize">
            <summary>Finalizer</summary>
        </member>
        <member name="M:ShoNS.Stats.GaussMVRandMKL.Dispose">
            <summary>Dispose of generator object</summary>
        </member>
        <member name="M:ShoNS.Stats.GaussMVRandMKL.#ctor(ShoNS.Array.DoubleArray,ShoNS.Array.DoubleArray,System.Int32)">
            <summary>Random numbers from a multivariate Gaussian distribution with the given mean and covariance, uses BOX-MULLER2 by default</summary>
        </member>
        <member name="M:ShoNS.Stats.GaussMVRandMKL.#ctor(ShoNS.Stats.GaussGenMethod,ShoNS.Array.DoubleArray,ShoNS.Array.DoubleArray,System.Int32)">
            <summary>Random numbers from a multivariate Gaussian distribution with the given mean and covariance, using the given generation method</summary>
        </member>
        <member name="M:ShoNS.Stats.GaussMVRandMKL.NextVector">
            <summary>Returns a random vector</summary>
        </member>
        <member name="M:ShoNS.Stats.GaussMVRandMKL.RandomMatrix(System.Int32)">
            <summary>Creates a random n x d matrix</summary>
        </member>
        <member name="P:ShoNS.Stats.GaussMVRandMKL.GenMethod">
            <summary>Gets the method used to generate random numbers</summary>
        </member>
        <member name="T:ShoNS.Stats.GeomRandMKL">
            <summary>Random numbers from a geometric distribution with success probability parameter p.</summary>
        </member>
        <member name="M:ShoNS.Stats.GeomRandMKL.#ctor(System.Double,System.Int32)">
            <summary>Creates a geometric random number generator</summary>
            <param name="p">Success probability</param>
            <param name="seed">Seed</param>
        </member>
        <member name="M:ShoNS.Stats.GeomRandMKL.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.GeomRandMKL.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.GeomRandMKL.Next">
            <summary>Returns the next 32-bit random integer</summary>
        </member>
        <member name="T:ShoNS.Stats.HypergeomRandMKL">
            <summary>Random numbers from a hypergeometric distribution.</summary>
        </member>
        <member name="M:ShoNS.Stats.HypergeomRandMKL.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a hypergeometric random number generator</summary>
            <param name="l"></param>
            <param name="s"></param>
            <param name="m"></param>
            <param name="seed">Seed</param>
        </member>
        <member name="M:ShoNS.Stats.HypergeomRandMKL.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.HypergeomRandMKL.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.HypergeomRandMKL.Next">
            <summary>Returns the next 32-bit random integer</summary>
        </member>
        <member name="T:ShoNS.Stats.LogNormRandMKL">
            <summary>Random numbers from a log normal distribution.</summary>
        </member>
        <member name="M:ShoNS.Stats.LogNormRandMKL.#ctor(System.Double,System.Double,System.Double,System.Int32)">
            <summary>Creates a log normal random number generator with b = 0</summary>
            <param name="a"></param>
            <param name="sigma"></param>
            <param name="beta"></param>
            <param name="seed">Seed</param>
        </member>
        <member name="M:ShoNS.Stats.LogNormRandMKL.#ctor(System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>Creates a log normal random number generator</summary>
            <param name="a"></param>
            <param name="sigma"></param>
            <param name="beta"></param>
            <param name="b"></param>
            <param name="seed">Seed</param>
        </member>
        <member name="M:ShoNS.Stats.LogNormRandMKL.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.LogNormRandMKL.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.LogNormRandMKL.Sample">
            <summary>Returns the next double-precision floating point number</summary>
        </member>
        <member name="P:ShoNS.Stats.LogNormRandMKL.Accuracy">
            <summary>Gets/sets the accuracy mode used by MKL, default is FAST</summary>
        </member>
        <member name="T:ShoNS.Stats.LaplaceRandMKL">
            <summary>Random numbers from a Laplace distribution</summary>
        </member>
        <member name="M:ShoNS.Stats.LaplaceRandMKL.#ctor(System.Double,System.Int32)">
            <summary>Creates a Laplace random number generator with a = 0</summary>
        </member>
        <member name="M:ShoNS.Stats.LaplaceRandMKL.#ctor(System.Double,System.Double,System.Int32)">
            <summary>Creates a Laplace random number generator</summary>
        </member>
        <member name="M:ShoNS.Stats.LaplaceRandMKL.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.LaplaceRandMKL.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.LaplaceRandMKL.Sample">
            <summary>Returns a double-precision floating point random number</summary>
        </member>
        <member name="T:ShoNS.Stats.CauchyRandMKL">
            <summary>Random numbers from a Cauchy distribution</summary>
        </member>
        <member name="M:ShoNS.Stats.CauchyRandMKL.#ctor(System.Double,System.Int32)">
            <summary>Creates a Cauchy random number generator with a = 0</summary>
        </member>
        <member name="M:ShoNS.Stats.CauchyRandMKL.#ctor(System.Double,System.Double,System.Int32)">
            <summary>Creates a Cauchy random number generator</summary>
        </member>
        <member name="M:ShoNS.Stats.CauchyRandMKL.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.CauchyRandMKL.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.CauchyRandMKL.Sample">
            <summary>Returns a double-precision floating point random number</summary>
        </member>
        <member name="T:ShoNS.Stats.GumbelRandMKL">
            <summary>Random numbers from a Gumbel distribution</summary>
        </member>
        <member name="M:ShoNS.Stats.GumbelRandMKL.#ctor(System.Double,System.Int32)">
            <summary>Creates a Gumbel random number generator with a = 0</summary>
        </member>
        <member name="M:ShoNS.Stats.GumbelRandMKL.#ctor(System.Double,System.Double,System.Int32)">
            <summary>Creates a Gumbel random number generator</summary>
        </member>
        <member name="M:ShoNS.Stats.GumbelRandMKL.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.GumbelRandMKL.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.GumbelRandMKL.Sample">
            <summary>Returns a double-precision floating point random number</summary>
        </member>
        <member name="T:ShoNS.Stats.WeibullRandMKL">
            <summary>Random numbers from a Weibull distribution</summary>
        </member>
        <member name="M:ShoNS.Stats.WeibullRandMKL.#ctor(System.Double,System.Double,System.Int32)">
            <summary>Creates a Weibull random number generator with a = 0</summary>
            <param name="alpha">Shape</param>
            <param name="beta">Scale</param> 
            <param name="seed">Seed</param>
        </member>
        <member name="M:ShoNS.Stats.WeibullRandMKL.#ctor(System.Double,System.Double,System.Double,System.Int32)">
            <summary>Creates a Weibull random number generator</summary>
            <param name="alpha">Shape</param>
            <param name="beta">Scale</param> 
            <param name="a">Offset</param>
            <param name="seed">Seed</param>
        </member>
        <member name="M:ShoNS.Stats.WeibullRandMKL.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.WeibullRandMKL.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.WeibullRandMKL.Sample">
            <summary>Returns a double-precision floating point random number</summary>
        </member>
        <member name="P:ShoNS.Stats.WeibullRandMKL.Accuracy">
            <summary>Gets/sets the accuracy mode used by MKL, default is FAST</summary>
        </member>
        <member name="T:ShoNS.Stats.RayleighRandMKL">
            <summary>Random numbers from a Rayleigh distribution</summary>
        </member>
        <member name="M:ShoNS.Stats.RayleighRandMKL.#ctor(System.Double,System.Int32)">
            <summary>Creates a Rayleigh random number generator with a = 0</summary>
        </member>
        <member name="M:ShoNS.Stats.RayleighRandMKL.#ctor(System.Double,System.Double,System.Int32)">
            <summary>Creates a Rayleigh random number generator</summary>
        </member>
        <member name="M:ShoNS.Stats.RayleighRandMKL.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.RayleighRandMKL.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.RayleighRandMKL.Sample">
            <summary>Returns a double-precision floating point random number</summary>
        </member>
        <member name="P:ShoNS.Stats.RayleighRandMKL.Accuracy">
            <summary>Gets/sets the accuracy mode used by MKL, default is FAST</summary>
        </member>
        <member name="T:ShoNS.Stats.PoissonRandMKL">
            <summary>Random numbers from a Poisson distribution with parameter lambda.</summary>
        </member>
        <member name="M:ShoNS.Stats.PoissonRandMKL.#ctor(System.Double,System.Int32)">
            <summary>Creates a Poisson random number generator, using PTPE as the method.</summary>
        </member>
        <member name="M:ShoNS.Stats.PoissonRandMKL.#ctor(ShoNS.Stats.PoissonGenMethod,System.Double,System.Int32)">
            <summary>Creates a Poisson random number generator</summary>
        </member>
        <member name="M:ShoNS.Stats.PoissonRandMKL.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.PoissonRandMKL.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.PoissonRandMKL.Next">
            <summary>Returns the next 32-bit random integer</summary>
        </member>
        <member name="P:ShoNS.Stats.PoissonRandMKL.GenMethod">
            <summary>Gets the method used to generate random numbers</summary>
        </member>
        <member name="T:ShoNS.Stats.PoissonVRandMKL">
            <summary>Random numbers from a Poisson distribution with parameter lambda.</summary>
        </member>
        <member name="M:ShoNS.Stats.PoissonVRandMKL.#ctor(System.Double,System.Int32)">
            <summary>Creates a PoissonV random number generator</summary>
        </member>
        <member name="M:ShoNS.Stats.PoissonVRandMKL.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.PoissonVRandMKL.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.PoissonVRandMKL.Next">
            <summary>Returns the next 32-bit random integer</summary>
        </member>
        <member name="T:ShoNS.Stats.TRandMKL">
            <summary>Random numbers from a Student's t-distribution with the degrees of freedom parameter v.</summary>
        </member>
        <member name="M:ShoNS.Stats.TRandMKL.#ctor(System.Double,System.Int32)">
            <summary>Creates a t random number generator</summary>
            <param name="v">Degrees of freedom</param>
            <param name="seed">Seed</param>
        </member>
        <member name="M:ShoNS.Stats.TRandMKL.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.TRandMKL.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.TRandMKL.Next">
            <summary>Return an integer: not implemented for TRandMKL</summary>
        </member>
        <member name="M:ShoNS.Stats.TRandMKL.Next(System.Int32)">
            <summary>Return an integer with the given maximum value: not implemented for TRandMKL</summary>
        </member>
        <member name="M:ShoNS.Stats.TRandMKL.Next(System.Int32,System.Int32)">
            <summary>Return an integer betwen the given minimum and maximum values: not implemented for TRandMKL</summary>
        </member>
        <member name="M:ShoNS.Stats.TRandMKL.NextBytes(System.Byte[])">
            <summary>Return a buffer of bytes: not implemented for TRandMKL</summary>
        </member>
        <member name="M:ShoNS.Stats.TRandMKL.Sample">
            <summary>Return a double</summary>
        </member>
        <member name="M:ShoNS.Stats.TRandMKL.NextDouble">
            <summary>Return a double</summary>
        </member>
        <member name="P:ShoNS.Stats.TRandMKL.Seed">
            <summary>Gets the current seed in use</summary>
        </member>
        <member name="T:ShoNS.Stats.FRandMKL">
            <summary>Random numbers from an f-distribution with degrees of freedom parameters v1 and v2.</summary>
        </member>
        <member name="M:ShoNS.Stats.FRandMKL.#ctor(System.Double,System.Double,System.Int32)">
            <summary>Creates an f random number generator</summary>
            <param name="v1">Degrees of freedom</param>
            <param name="v2">Degrees of freedom</param> 
            <param name="seed">Seed</param>
        </member>
        <member name="M:ShoNS.Stats.FRandMKL.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.FRandMKL.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.FRandMKL.Next">
            <summary>Return an integer: not implemented for FRandMKL</summary>
        </member>
        <member name="M:ShoNS.Stats.FRandMKL.Next(System.Int32)">
            <summary>Return an integer with the given maximum value: not implemented for FRandMKL</summary>
        </member>
        <member name="M:ShoNS.Stats.FRandMKL.Next(System.Int32,System.Int32)">
            <summary>Return an integer betwen the given minimum and maximum values: not implemented for FRandMKL</summary>
        </member>
        <member name="M:ShoNS.Stats.FRandMKL.NextBytes(System.Byte[])">
            <summary>Return a buffer of bytes: not implemented for FRandMKL</summary>
        </member>
        <member name="M:ShoNS.Stats.FRandMKL.Sample">
            <summary>Return a double</summary>
        </member>
        <member name="M:ShoNS.Stats.FRandMKL.NextDouble">
            <summary>Return a double</summary>
        </member>
        <member name="P:ShoNS.Stats.FRandMKL.Seed">
            <summary>Gets the current seed in use</summary>
        </member>
        <member name="T:ShoNS.Stats.UniRandMKL">
            <summary>Random numbers from a continuous uniform distribution in the interval [a,b] (default interval is between 0 and 1).</summary>
        </member>
        <member name="M:ShoNS.Stats.UniRandMKL.#ctor(System.Int32)">
            <summary>Returns numbers between 0 and 1. Seeds with the user provided seed, uses default generator algorithm (Mersenne Twister), and uses standard accuracy.</summary>
        </member>
        <member name="M:ShoNS.Stats.UniRandMKL.#ctor(ShoNS.Stats.RandAlgo,System.Int32)">
            <summary>Returns numbers between 0 and 1. Seeds with the user provided seed, uses the specified algorithm, and uses standard accuracy.</summary>
        </member>
        <member name="M:ShoNS.Stats.UniRandMKL.#ctor(ShoNS.Stats.RandAlgo,System.Double,System.Double,System.Int32)">
            <summary>Seeds with the user provided seed, uses the specified algorithm, and uses standard accuracy.</summary>
        </member>
        <member name="M:ShoNS.Stats.UniRandMKL.#ctor(System.Double,System.Double,System.Int32)">
            <summary>Seeds with the user provided seed, uses default generator algorithm (Mersenne-Twister), and uses standard accuracy.</summary>
        </member>
        <member name="M:ShoNS.Stats.UniRandMKL.#ctor(System.Int32,System.Int32)">
            <summary>Meant for multithreaded applications.</summary>
        </member>
        <member name="M:ShoNS.Stats.UniRandMKL.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.UniRandMKL.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.UniRandMKL.Sample">
            <summary>Returns a double-precision floating point random number</summary>
        </member>
        <member name="P:ShoNS.Stats.UniRandMKL.Accuracy">
            <summary>Gets/sets the accuracy mode used by MKL, default is FAST</summary>
        </member>
        <member name="T:ShoNS.Stats.UniDRandMKL">
            <summary>Random numbers from a discrete uniform distribution over the interval [a,b).</summary>
        </member>
        <member name="M:ShoNS.Stats.UniDRandMKL.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>Creates a discrete uniform random number generator</summary>
            <param name="a">Left</param>
            <param name="b">Right</param> 
            <param name="seed">Seed</param>
        </member>
        <member name="M:ShoNS.Stats.UniDRandMKL.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.UniDRandMKL.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization</summary>
        </member>
        <member name="M:ShoNS.Stats.UniDRandMKL.Next">
            <summary>Returns the next 32-bit random integer</summary>
        </member>
        <member name="T:ShoNS.Stats.UniRandMKLFactory">
            <summary> Uniform random number generator factory object which produces generators suitable for multi-threaded use.</summary>
        </member>
        <member name="M:ShoNS.Stats.UniRandMKLFactory.#ctor(System.Int32)">
            <summary>Creates a uniform random number generator factory object with the given seed</summary>
        </member>
        <member name="M:ShoNS.Stats.UniRandMKLFactory.CreateRandom">
            <summary>Creates a Random object with the given stream number</summary>
            <returns>Uniform random number generator</returns>
        </member>
        <member name="P:ShoNS.Stats.UniRandMKLFactory.Seed">
            <summary>Seed used by this factory</summary>
        </member>
        <member name="T:ShoNS.Stats.MVNormRand">
            <summary>Random numbers from a multivariate normal distribution</summary> 
        </member>
        <member name="M:ShoNS.Stats.MVNormRand.#ctor(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Create an MVNormRand object with the given mu and sigma</summary>
            <param name="muIn">Vector of means</param>
            <param name="sigmaIn">Covariance matrix</param>
        </member>
        <member name="M:ShoNS.Stats.MVNormRand.NextVector(System.Random)">
            <summary>Returns the next random vector</summary>
            <param name="rn">Random number generator to use</param>
        </member>
        <member name="M:ShoNS.Stats.MVNormRand.FillMatrix(ShoNS.Array.DoubleArray,ShoNS.MathFunc.GaussRand)">
            <summary>Fills the input array with random vectors</summary>
            <param name="x">Array to fill</param>
            <param name="gaussRand">Gaussian random number generator</param>
        </member>
        <member name="T:ShoNS.Stats.Fisher">
            <summary>Fisher's exact test for a 2x2 contingency table</summary>
        </member>
        <member name="M:ShoNS.Stats.Fisher.Test(System.Int32,System.Int32,System.Int32,System.Int32,System.Double@,System.Double@)">
            <summary>Performs the Fisher's test</summary>
            <param name="a">Counts in group 1/class 1</param>
            <param name="b">Counts in group 2/class 1</param>
            <param name="c">Counts in group 1/class 2</param>
            <param name="d">Counts in group 2/class 2</param>
            <param name="oneTailLeft">Left one-tail probability</param>
            <param name="oneTailRight">Right one-tail probability</param>
            <returns>Two-tail probability</returns>
        </member>
        <member name="M:ShoNS.Stats.Fisher.Prob(System.Double,System.Double,System.Double,System.Double)">
            <summary>Compute p = (a+b)!(c+d)!(a+c)!(b+d)!/n!a!b!c!d!</summary>
        </member>
        <member name="T:ShoNS.Stats.MannWhitney">
            <summary>Mann-Whitney test</summary>
            <remarks>This implementation returns p using a normal approximation, which may not be valid for small sample sizes</remarks>
        </member>
        <member name="M:ShoNS.Stats.MannWhitney.Test(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Double@,System.Double@)">
            <summary>Tests to see if the two samples came from the same distribution</summary>
            <param name="x">First sample</param>
            <param name="y">Second sample</param>
            <param name="U">Output - U statistic</param>
            <param name="z">Output - z statistic</param>
            <returns>Two-tail probability</returns>
        </member>
        <member name="T:ShoNS.Stats.Wilcoxon">
            <summary>Wilcoxon signed rank sum test</summary>
            <remarks>This implementation returns p using a normal approximation, which may not be valid for small sample sizes </remarks>
        </member>
        <member name="M:ShoNS.Stats.Wilcoxon.Test(System.Collections.IEnumerable,System.Double@,System.Double@)">
            <summary></summary>
            <param name="x"></param>
            <param name="W">Output - W statistic</param>
            <param name="z">Output - z statistic</param>
            <returns></returns>
        </member>
        <member name="M:ShoNS.Stats.Wilcoxon.Test(System.Collections.IEnumerable,System.Double,System.Double@,System.Double@)">
            <summary></summary>
            <param name="x"></param>
            <param name="M"></param>
            <param name="W">Output - W statistic</param>
            <param name="z">Output - z statistic</param>
            <returns>Two-tail probability</returns>
        </member>
        <member name="M:ShoNS.Stats.Wilcoxon.Test(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Double@,System.Double@)">
            <summary></summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="W">Output - W statistic</param>
            <param name="z">Output - z statistic</param>
            <returns>Two-tail probability</returns>
        </member>
        <member name="T:ShoNS.Stats.Poisson">
            <summary>Poisson distribution</summary>
        </member>
        <member name="M:ShoNS.Stats.Poisson.Cdf(System.Double,System.Double)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Value at which to compute the cdf</param>
            <param name="lambda">lambda parameter: expected number of occurrences in a given interval</param>
        </member>
        <member name="M:ShoNS.Stats.Poisson.Cdf(System.Collections.IEnumerable,System.Double)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Values at which to compute the cdf</param>
            <param name="lambda">lambda parameter: expected number of occurrences in a given interval</param>
        </member>
        <member name="M:ShoNS.Stats.Poisson.Cdf(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Values at which to compute the cdf</param>
            <param name="lambda">lambda parameter: expected number of occurrences in a given interval</param>
        </member>
        <member name="M:ShoNS.Stats.Poisson.Pdf(System.Double,System.Double)">
            <summary>Probability distribution function</summary>
            <param name="x">Value at which to compute the pdf</param>
            <param name="lambda">lambda parameter: expected number of occurrences in a given interval</param>
        </member>
        <member name="M:ShoNS.Stats.Poisson.Pdf(System.Collections.IEnumerable,System.Double)">
            <summary>Probability distribution function</summary>
            <param name="x">Values at which to compute the pdf</param>
            <param name="lambda">lambda parameter: expected number of occurrences in a given interval</param>
        </member>
        <member name="M:ShoNS.Stats.Poisson.Pdf(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Probability distribution function</summary>
            <param name="x">Values at which to compute the pdf</param>
            <param name="lambda">lambda parameter: expected number of occurrences in a given interval</param>
        </member>
        <member name="M:ShoNS.Stats.Poisson.Inv(System.Double,System.Double)">
            <summary>Inverse cumulative distribution function</summary>
            <param name="p">Probability at which to compute the inverse cdf</param>
            <param name="lambda">lambda parameter: expected number of occurrences in a given interval</param>
        </member>
        <member name="M:ShoNS.Stats.Poisson.Inv(System.Collections.IEnumerable,System.Double)">
            <summary>Inverse cumulative distribution function</summary>
            <param name="p">Probabilities at which to compute the inverse cdf</param>
            <param name="lambda">lambda parameter: expected number of occurrences in a given interval</param>
        </member>
        <member name="M:ShoNS.Stats.Poisson.Inv(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Inverse cumulative distribution function</summary>
            <param name="p">Probabilities at which to compute the inverse cdf</param>
            <param name="lambda">lambda parameter: expected number of occurrences in a given interval</param>
        </member>
        <member name="M:ShoNS.Stats.Poisson.Stats(System.Double,System.Double@)">
             <summary>Mean and variance</summary>
             <param name="lambda">lambda parameter: expected number of occurrences in a given interval</param>
            <param name="var">Output: variance</param>
             <returns>Mean</returns>
        </member>
        <member name="M:ShoNS.Stats.Poisson.Stats(System.Collections.IEnumerable,ShoNS.Array.DoubleArray@)">
             <summary>Mean and variance</summary>
             <param name="lambda">lambda parameter: expected number of occurrences in a given interval</param>
            <param name="var">Output: variance</param>
             <returns>Mean</returns>
        </member>
        <member name="M:ShoNS.Stats.Poisson.MLE(System.Collections.IEnumerable)">
            <summary>Maximum likelihood estimate</summary>
            <param name="dataIn">Data to fit</param>
            <returns>Estimate of lambda parameter: expected number of occurrences in a given interval</returns>
        </member>
        <member name="T:ShoNS.Stats.GammaRand">
            <summary>Random numbers from a gamma distribution</summary> 
        </member>
        <member name="M:ShoNS.Stats.GammaRand.#ctor(System.Double,System.Double,System.Int32)">
            <summary>Create a GammaRand object with the given k, theta, and seed</summary>
        </member>
        <member name="M:ShoNS.Stats.GammaRand.#ctor(System.Double,System.Double,System.Random)">
            <summary>Create a GammaRand object with the given k, theta, and uniform random number generator, uniformRandGen</summary>
        </member>
        <member name="M:ShoNS.Stats.GammaRand.Init(System.Double,System.Double)">
            <summary>Create a GammaRand object with the given k, theta, and Gaussian random number generator, gaussRandGen</summary>
        </member>
        <member name="M:ShoNS.Stats.GammaRand.Next">
            <summary>Return an integer: not implemented for GammaRand</summary>
        </member>
        <member name="M:ShoNS.Stats.GammaRand.Next(System.Int32)">
            <summary>Return an integer with the given maximum value: not implemented for GammaRand</summary>
        </member>
        <member name="M:ShoNS.Stats.GammaRand.Next(System.Int32,System.Int32)">
            <summary>Return an integer betwen the given minimum and maximum values: not implemented for GammaRand</summary>
        </member>
        <member name="M:ShoNS.Stats.GammaRand.NextBytes(System.Byte[])">
            <summary>Return a buffer of bytes: not implemented for GammaRand</summary>
        </member>
        <member name="M:ShoNS.Stats.GammaRand.Sample">
            <summary>Return a double</summary>
        </member>
        <member name="M:ShoNS.Stats.GammaRand.NextDouble">
            <summary>Return a double</summary>
        </member>
        <member name="T:ShoNS.Stats.BetaRand">
            <summary>Random numbers from a beta distribution</summary>
        </member>
        <member name="M:ShoNS.Stats.BetaRand.#ctor(System.Double,System.Double,System.Int32)">
            <summary>Create a BetaRand object with the given alpha, beta</summary>
        </member>
        <member name="M:ShoNS.Stats.BetaRand.Next">
            <summary>Return an integer: not implemented for BetaRand</summary>
        </member>
        <member name="M:ShoNS.Stats.BetaRand.Next(System.Int32)">
            <summary>Return an integer with the given maximum value: not implemented for BetaRand</summary>
        </member>
        <member name="M:ShoNS.Stats.BetaRand.Next(System.Int32,System.Int32)">
            <summary>Return an integer betwen the given minimum and maximum values: not implemented for BetaRand</summary>
        </member>
        <member name="M:ShoNS.Stats.BetaRand.NextBytes(System.Byte[])">
            <summary>Return a buffer of bytes: not implemented for BetaRand</summary>
        </member>
        <member name="M:ShoNS.Stats.BetaRand.Sample">
            <summary>Return a double</summary>
        </member>
        <member name="M:ShoNS.Stats.BetaRand.NextDouble">
            <summary>Return a double </summary>
        </member>
        <member name="T:ShoNS.Stats.Chi2Rand">
            <summary>Random numbers from a chi-square distribution</summary>
        </member>
        <member name="M:ShoNS.Stats.Chi2Rand.#ctor(System.Double,System.Int32)">
            <summary>Create a Chi2Rand object with the given v and using the seed</summary>
        </member>
        <member name="M:ShoNS.Stats.Chi2Rand.Next">
            <summary>Return an integer: not implemented for Chi2Rand</summary>
        </member>
        <member name="M:ShoNS.Stats.Chi2Rand.Next(System.Int32)">
            <summary>Return an integer with the given maximum value: not implemented for Chi2Rand</summary>
        </member>
        <member name="M:ShoNS.Stats.Chi2Rand.Next(System.Int32,System.Int32)">
            <summary>Return an integer betwen the given minimum and maximum values: not implemented for Chi2Rand</summary>
        </member>
        <member name="M:ShoNS.Stats.Chi2Rand.NextBytes(System.Byte[])">
            <summary>Return a buffer of bytes: not implemented for Chi2Rand</summary>
        </member>
        <member name="M:ShoNS.Stats.Chi2Rand.Sample">
            <summary>Return a double</summary>
        </member>
        <member name="M:ShoNS.Stats.Chi2Rand.NextDouble">
            <summary>Return a double</summary>
        </member>
        <member name="T:ShoNS.Stats.ExpRand">
            <summary>Random numbers from an exponential distribution</summary>
        </member>
        <member name="M:ShoNS.Stats.ExpRand.#ctor(System.Double,System.Int32)">
            <summary>Create an ExpRand object with the given mu and using the given seed</summary>
        </member>
        <member name="M:ShoNS.Stats.ExpRand.#ctor(System.Double,System.Random)">
            <summary>Create an ExpRand object with the given mu and using the given uniform random number generator, uniformRandGen</summary>
        </member>
        <member name="M:ShoNS.Stats.ExpRand.Next">
            <summary>Return an integer: not implemented for ExpRand</summary>
        </member>
        <member name="M:ShoNS.Stats.ExpRand.Next(System.Int32)">
            <summary>Return an integer with the given maximum value: not implemented for ExpRand</summary>
        </member>
        <member name="M:ShoNS.Stats.ExpRand.Next(System.Int32,System.Int32)">
            <summary>Return an integer betwen the given minimum and maximum values: not implemented for ExpRand</summary>
        </member>
        <member name="M:ShoNS.Stats.ExpRand.NextBytes(System.Byte[])">
            <summary>Return a buffer of bytes: not implemented for ExpRand</summary>
        </member>
        <member name="M:ShoNS.Stats.ExpRand.Sample">
            <summary>Return a double</summary>
        </member>
        <member name="M:ShoNS.Stats.ExpRand.NextDouble">
            <summary>Return a double</summary>
        </member>
        <member name="T:ShoNS.Stats.PoissRand">
            <summary>Random numbers from a Poisson distribution</summary>
        </member>
        <member name="M:ShoNS.Stats.PoissRand.#ctor(System.Double,System.Int32)">
            <summary>Create a PoissRand object with the given lambda and using the given seed</summary>
        </member>
        <member name="M:ShoNS.Stats.PoissRand.#ctor(System.Double,System.Random)">
            <summary>Create a PoissRand object with the given lambda and using the given uniform random number generator, uniformRandGen</summary>
        </member>
        <member name="M:ShoNS.Stats.PoissRand.NextDouble">
            <summary>Return a double: not implemented for PoissRand</summary>
        </member>
        <member name="M:ShoNS.Stats.PoissRand.Sample">
            <summary>Return a double: not implemented for PoissRand</summary>
        </member>
        <member name="M:ShoNS.Stats.PoissRand.Next(System.Int32)">
            <summary>Return an integer with the given maximum value: not implemented for PoissRand</summary>
        </member>
        <member name="M:ShoNS.Stats.PoissRand.Next(System.Int32,System.Int32)">
            <summary>Return an integer betwen the given minimum and maximum values: not implemented for PoissRand</summary>
        </member>
        <member name="M:ShoNS.Stats.PoissRand.NextBytes(System.Byte[])">
            <summary>Return a buffer of bytes: not implemented for PoissRand</summary>
        </member>
        <member name="M:ShoNS.Stats.PoissRand.Next">
            <summary>Return an integer</summary>
        </member>
        <member name="T:ShoNS.Stats.BinoRand">
            <summary>Random numbers from a bionomial distribution</summary>
        </member>
        <member name="M:ShoNS.Stats.BinoRand.#ctor(System.Int32,System.Double,System.Int32)">
            <summary>Create a BinoRand object with the given n, pin and using the given seed</summary>
        </member>
        <member name="M:ShoNS.Stats.BinoRand.#ctor(System.Int32,System.Double,System.Random)">
            <summary>Create a BinoRand object with the given n, pin and using the given uniform random number generator, uniformRandGen</summary>
        </member>
        <member name="M:ShoNS.Stats.BinoRand.NextDouble">
            <summary>Return a double: not implemented for BinoRand</summary>
        </member>
        <member name="M:ShoNS.Stats.BinoRand.Sample">
            <summary>Return a double: not implemented for BinoRand</summary>
        </member>
        <member name="M:ShoNS.Stats.BinoRand.Next(System.Int32)">
            <summary>Return an integer with the given maximum value: not implemented for BinoRand</summary>
        </member>
        <member name="M:ShoNS.Stats.BinoRand.Next(System.Int32,System.Int32)">
            <summary>Return an integer betwen the given minimum and maximum values: not implemented for BinoRand</summary>
        </member>
        <member name="M:ShoNS.Stats.BinoRand.NextBytes(System.Byte[])">
            <summary>Return a buffer of bytes: not implemented for BinoRand</summary>
        </member>
        <member name="M:ShoNS.Stats.BinoRand.Next">
            <summary>Return an integer</summary>
        </member>
        <member name="T:ShoNS.Stats.LogNormRand">
            <summary>Random numbers from a log-normal distribution</summary>
        </member>
        <member name="M:ShoNS.Stats.LogNormRand.#ctor(System.Double,System.Double,System.Int32)">
            <summary>Create a LogNormRand object with the given mu, sigma, and using the given seed</summary>
        </member>
        <member name="M:ShoNS.Stats.LogNormRand.#ctor(System.Double,System.Double,ShoNS.MathFunc.GaussRand)">
            <summary>Create a LogNormRand object with the given mu, sigma, and using the given Gaussian random number generator, gaussianRandGen</summary>
        </member>
        <member name="M:ShoNS.Stats.LogNormRand.Next">
            <summary>Return an integer: not implemented for LogNormRand</summary>
        </member>
        <member name="M:ShoNS.Stats.LogNormRand.Next(System.Int32)">
            <summary>Return an integer with the given maximum value: not implemented for LogNormRand</summary>
        </member>
        <member name="M:ShoNS.Stats.LogNormRand.Next(System.Int32,System.Int32)">
            <summary>Return an integer betwen the given minimum and maximum values: not implemented for LogNormRand</summary>
        </member>
        <member name="M:ShoNS.Stats.LogNormRand.NextBytes(System.Byte[])">
            <summary>Return a buffer of bytes: not implemented for LogNormRand</summary>
        </member>
        <member name="M:ShoNS.Stats.LogNormRand.Sample">
            <summary>Return a double</summary>
        </member>
        <member name="M:ShoNS.Stats.LogNormRand.NextDouble">
            <summary>Return a double</summary>
        </member>
        <member name="T:ShoNS.Stats.TRand">
            <summary>Random numbers from a t distribution</summary>
        </member>
        <member name="M:ShoNS.Stats.TRand.#ctor(System.Double,System.Int32)">
            <summary>Create a TRand object with the given v and using the given seed</summary>
        </member>
        <member name="M:ShoNS.Stats.TRand.Next">
            <summary>Return an integer: not implemented for TRand</summary>
        </member>
        <member name="M:ShoNS.Stats.TRand.Next(System.Int32)">
            <summary>Return an integer with the given maximum value: not implemented for TRand</summary>
        </member>
        <member name="M:ShoNS.Stats.TRand.Next(System.Int32,System.Int32)">
            <summary>Return an integer betwen the given minimum and maximum values: not implemented for TRand</summary>
        </member>
        <member name="M:ShoNS.Stats.TRand.NextBytes(System.Byte[])">
            <summary>Return a buffer of bytes: not implemented for TRand</summary>
        </member>
        <member name="M:ShoNS.Stats.TRand.Sample">
            <summary>Return a double</summary>
        </member>
        <member name="M:ShoNS.Stats.TRand.NextDouble">
            <summary>Return a double</summary>
        </member>
        <member name="T:ShoNS.Stats.FRand">
            <summary>Random numbers from an f-distribution</summary>
        </member>
        <member name="M:ShoNS.Stats.FRand.#ctor(System.Double,System.Double,System.Int32)">
            <summary>Create an FRand object with the given v1, v2, and seed</summary>
        </member>
        <member name="M:ShoNS.Stats.FRand.Next">
            <summary>Return an integer: not implemented for FRand</summary>
        </member>
        <member name="M:ShoNS.Stats.FRand.Next(System.Int32)">
            <summary>Return an integer with the given maximum value: not implemented for FRand</summary>
        </member>
        <member name="M:ShoNS.Stats.FRand.Next(System.Int32,System.Int32)">
            <summary>Return an integer betwen the given minimum and maximum values: not implemented for FRand</summary>
        </member>
        <member name="M:ShoNS.Stats.FRand.NextBytes(System.Byte[])">
            <summary>Return a buffer of bytes: not implemented for FRand</summary>
        </member>
        <member name="M:ShoNS.Stats.FRand.Sample">
            <summary>Return a double</summary>
        </member>
        <member name="M:ShoNS.Stats.FRand.NextDouble">
            <summary>Return a double</summary>
        </member>
        <member name="T:ShoNS.Stats.DirRand">
            <summary>Random vectors from a Dirichlet distribution</summary>
        </member>
        <member name="M:ShoNS.Stats.DirRand.#ctor(System.Collections.IEnumerable,System.Int32)">
            <summary>Create a DirObject with the input alpha and seed</summary>
        </member>
        <member name="M:ShoNS.Stats.DirRand.NextVector">
            <summary>Return the next vector</summary>
        </member>
        <member name="T:ShoNS.Stats.WeibRand">
            <summary>Random numbers from a Weibull distribution</summary>
        </member>
        <member name="M:ShoNS.Stats.WeibRand.#ctor(System.Double,System.Double,System.Int32)">
            <summary>Create a WeibRand object with the given alpha, beta, and seed</summary>
        </member>
        <member name="M:ShoNS.Stats.WeibRand.#ctor(System.Double,System.Double,System.Random)">
            <summary>Create a WeibRand object with the given alpha, beta, and using the given uniform random number generator, uniformRandGen</summary>
        </member>
        <member name="M:ShoNS.Stats.WeibRand.Next">
            <summary>Return an integer: not implemented for WeibRand</summary>
        </member>
        <member name="M:ShoNS.Stats.WeibRand.Next(System.Int32)">
            <summary>Return an integer with the given maximum value: not implemented for WeibRand</summary>
        </member>
        <member name="M:ShoNS.Stats.WeibRand.Next(System.Int32,System.Int32)">
            <summary>Return an integer betwen the given minimum and maximum values: not implemented for WeibRand</summary>
        </member>
        <member name="M:ShoNS.Stats.WeibRand.NextBytes(System.Byte[])">
            <summary>Return a buffer of random bytes: not implemented for WeibRand</summary>
        </member>
        <member name="M:ShoNS.Stats.WeibRand.Sample">
            <summary>Return a double</summary>
        </member>
        <member name="M:ShoNS.Stats.WeibRand.NextDouble">
            <summary>Return a double</summary>
        </member>
        <member name="T:ShoNS.Stats.GeomRand">
            <summary>Random numbers from a geometric distribution</summary>
        </member>
        <member name="M:ShoNS.Stats.GeomRand.#ctor(System.Double,System.Int32)">
            <summary>Create a GeomRand object with the given p and seed</summary>
        </member>
        <member name="M:ShoNS.Stats.GeomRand.#ctor(System.Double,System.Random)">
            <summary>Create a GeomRand object with the p and using the given uniform random number generator, uniformRandGen</summary>
        </member>
        <member name="M:ShoNS.Stats.GeomRand.NextDouble">
            <summary>Return a value - GeomRand produces discrete values, but returns a double to prevent overflow when p is small</summary>
        </member>
        <member name="M:ShoNS.Stats.GeomRand.Next">
            <summary>Return an integer: not implemented for GeomRand</summary>
        </member>
        <member name="M:ShoNS.Stats.GeomRand.Next(System.Int32)">
            <summary>Return an integer with the given maximum value: not implemented for GeomRand</summary>
        </member>
        <member name="M:ShoNS.Stats.GeomRand.Next(System.Int32,System.Int32)">
            <summary>Return an integer betwen the given minimum and maximum values: not implemented for GeomRand</summary>
        </member>
        <member name="M:ShoNS.Stats.GeomRand.NextBytes(System.Byte[])">
            <summary>Return a buffer of bytes: not implemented for GeomRand</summary>
        </member>
        <member name="M:ShoNS.Stats.GeomRand.Sample">
            <summary>Return a random sample: not implemented for GeomRand</summary>
        </member>
        <member name="T:ShoNS.Stats.ParetoRand">
            <summary>Random numbers from an Pareto distribution</summary>
        </member>
        <member name="M:ShoNS.Stats.ParetoRand.#ctor(System.Double,System.Double,System.Int32)">
            <summary>Create an ExpRand object with the given xm and alpha and using the given seed</summary>
        </member>
        <member name="M:ShoNS.Stats.ParetoRand.#ctor(System.Double,System.Double,System.Random)">
            <summary>Create a ParetoRand object with the given xm and alpha and using the given uniform random number generator, uniformRandGen</summary>
        </member>
        <member name="M:ShoNS.Stats.ParetoRand.Next">
            <summary>Return an integer: not implemented for ParetoRand</summary>
        </member>
        <member name="M:ShoNS.Stats.ParetoRand.Next(System.Int32)">
            <summary>Return an integer with the given maximum value: not implemented for ParetoRand</summary>
        </member>
        <member name="M:ShoNS.Stats.ParetoRand.Next(System.Int32,System.Int32)">
            <summary>Return an integer betwen the given minimum and maximum values: not implemented for ParetoRand</summary>
        </member>
        <member name="M:ShoNS.Stats.ParetoRand.NextBytes(System.Byte[])">
            <summary>Return a buffer of bytes: not implemented for ExpRand</summary>
        </member>
        <member name="M:ShoNS.Stats.ParetoRand.Sample">
            <summary>Return a double</summary>
        </member>
        <member name="M:ShoNS.Stats.ParetoRand.NextDouble">
            <summary>Return a double</summary>
        </member>
        <member name="T:ShoNS.Stats.Regress">
            <summary>Multiple linear regression</summary>
        </member>
        <member name="M:ShoNS.Stats.Regress.#ctor(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Compute the regression</summary>
        </member>
        <member name="M:ShoNS.Stats.Regress.#ctor(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Double)">
            <summary>Compute the regression</summary>
        </member>
        <member name="P:ShoNS.Stats.Regress.Beta">
            <summary>Fitted coefficents</summary>
        </member>
        <member name="P:ShoNS.Stats.Regress.BetaInt">
            <summary>Confidence interval for beta</summary>
        </member>
        <member name="P:ShoNS.Stats.Regress.Res">
            <summary>Residuals</summary>
        </member>
        <member name="P:ShoNS.Stats.Regress.Rsq">
            <summary>Pearson's coefficient of regression</summary>
        </member>
        <member name="P:ShoNS.Stats.Regress.FStat">
            <summary>F-statistic</summary>
        </member>
        <member name="P:ShoNS.Stats.Regress.PVal">
            <summary>P-value</summary>
        </member>
        <member name="P:ShoNS.Stats.Regress.YPred">
            <summary>Predicted y values</summary>
        </member>
        <member name="T:ShoNS.Stats.RegFunc">
            <summary>Regression function</summary>
        </member>
        <member name="T:ShoNS.Stats.RegError">
            <summary>Error from regression</summary>
        </member>
        <member name="F:ShoNS.Stats.RegError.NoError">
            <summary>No error</summary>
        </member>
        <member name="F:ShoNS.Stats.RegError.MaxIter">
            <summary>Maximum iterations</summary>
        </member>
        <member name="F:ShoNS.Stats.RegError.NoStepFound">
            <summary>No step</summary>
        </member>
        <member name="F:ShoNS.Stats.RegError.RankDeficiency">
            <summary>System is rank deficient</summary>
        </member>
        <member name="T:ShoNS.Stats.NLRegress">
            <summary>Non-linear least-squares</summary>
        </member>
        <member name="M:ShoNS.Stats.NLRegress.#ctor">
            <summary>Non-linear regression object</summary>
        </member>
        <member name="M:ShoNS.Stats.NLRegress.#ctor(System.Int32,System.Double)">
            <summary>Non-linear regression object, maximum and finite differences step specified</summary>
        </member>
        <member name="M:ShoNS.Stats.NLRegress.Fit(ShoNS.Array.DoubleArray,ShoNS.Array.DoubleArray,ShoNS.Stats.RegFunc,ShoNS.Array.DoubleArray)">
            <summary>Fit the data, using the specified function and initial parameter values</summary>
        </member>
        <member name="P:ShoNS.Stats.NLRegress.MaxIter">
            <summary>Get and set the maximum number of iteration</summary>
        </member>
        <member name="P:ShoNS.Stats.NLRegress.FDStep">
            <summary>Get/set the finite differences step</summary>
        </member>
        <member name="P:ShoNS.Stats.NLRegress.Beta">
            <summary>Fitted coefficients</summary>
        </member>
        <member name="P:ShoNS.Stats.NLRegress.Res">
            <summary>Residuals</summary>
        </member>
        <member name="P:ShoNS.Stats.NLRegress.SSE">
            <summary>Residual sum of squares</summary>
        </member>
        <member name="P:ShoNS.Stats.NLRegress.Jacobian">
            <summary>Jacobian evaluated at beta</summary>
        </member>
        <member name="T:ShoNS.Stats.DataSampling">
            <summary>Data sampling routines</summary>
        </member>
        <member name="M:ShoNS.Stats.DataSampling.Sample``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>Reservoir sampling without replacement, basic algorithm with no optimizations</summary>
            <param name="source">Data source</param>
            <param name="numSamples">Number of samples</param>
            <returns>Sampled data</returns>
            <remarks>This algorithm is well-known and documented - do a web search for "reservoir sampling"</remarks>
        </member>
        <member name="M:ShoNS.Stats.DataSampling.SampleReplace``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>Sampling with replacement, from a reservoir</summary>
            <param name="source">Data source</param>
            <param name="numSamples">Number of samples</param>
            <returns>Sampled data</returns>
            <remarks>Byung-Hoon Park et al: Sampling streaming data with replacement, Computational Statistics and Data Analysis 52 (2007) pp 750-762</remarks>
        </member>
        <member name="M:ShoNS.Stats.DataSampling.SampleReplaceSkip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>Sampling with replacement, from a reservoir, using element skipping as an optimization</summary>
            <param name="source">Data source</param>
            <param name="numSamples">Number of samples</param>
            <returns>Sampled data</returns>
            <remarks>Byung-Hoon Park et al: Sampling streaming data with replacement, Computational Statistics and Data Analysis 52 (2007) pp 750-762</remarks>        
        </member>
        <member name="M:ShoNS.Stats.DataSampling.WeightedSample``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},System.Int32)">
            <summary>Weighted sampling from a reservoir</summary>
            <param name="source">Data source</param>
            <param name="weightcomputer">Weighting function</param>
            <param name="numSamples">Number of samples</param>
            <returns>Sampled data</returns>
            <remarks>Kolonko and Wasch: Sequential Reservoir Sampling with a Nonuniform Distribution, ACM Transacations on Mathematical Software", Vol 32, No. 2, June 2006, pp 257-273</remarks>
        </member>
        <member name="M:ShoNS.Stats.DataSampling.WeightedSampleReplace``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},System.Int32)">
            <summary>Weighted sampling with replacement, from a reservoir.</summary>
            <param name="source">Data source</param>
            <param name="weightcomputer">Weighting function</param>
            <param name="numSamples">Number of samples</param>
            <returns>Sampled data</returns>
            <remarks>Kolonko and Wasch: Sequential Reservoir Sampling with a Nonuniform Distribution, ACM Transacations on Mathematical Software", Vol 32, No. 2, June 2006, pp 257-273</remarks>
        </member>
        <member name="T:ShoNS.Stats.Spline">
            <summary>Thin-plate spline</summary>
        </member>
        <member name="M:ShoNS.Stats.Spline.Fit(ShoNS.Array.DoubleArray,ShoNS.Array.DoubleArray,System.Double)">
            <summary>Fit the data with a thin-plate spline</summary>
            <param name="xin">x values</param>
            <param name="yin">y values</param>
            <param name="lambdaIn">Smoothing parameter</param>
            <returns>The fit</returns>
        </member>
        <member name="M:ShoNS.Stats.Spline.Interp(ShoNS.Array.DoubleArray)">
            <summary> Using the fit, interpolate the values for x</summary>
        </member>
        <member name="P:ShoNS.Stats.Spline.Res">
            <summary>Residuals from the fit</summary>
        </member>
        <member name="T:ShoNS.Stats.CubicSpline">
            <summary>Cubic spline interpolation</summary>
        </member>
        <member name="M:ShoNS.Stats.CubicSpline.Fit(ShoNS.Array.DoubleArray,ShoNS.Array.DoubleArray)">
            <summary>Fit the data with a thin-plate spline</summary>
            <param name="xin">x values</param>
            <param name="yin">y values</param>
        </member>
        <member name="M:ShoNS.Stats.CubicSpline.Interp(ShoNS.Array.DoubleArray)">
            <summary> Using the fit, interpolate the values for x</summary>
        </member>
        <member name="T:ShoNS.Stats.NamespaceDoc">
            <summary>The ShoNS.Stats namespace contains the statistical utilities and distributions from the Stats package.
            </summary>
            <remarks>The ShoNS.Stats namespace contains a number of classes for:
    <list type="bullet">
     <item><description>Probability distributions</description></item>
     <item><description>Random number generators</description></item>
     <item><description>Data sampling</description></item>
     <item><description>Fitting and plotting</description></item>
     <item><description>Statistical tests</description></item>
     <item><description>Utility functions</description></item>
    </list>    
</remarks>
        </member>
        <member name="T:ShoNS.Stats.T">
            <summary>Student's t-distribution</summary>
        </member>
        <member name="M:ShoNS.Stats.T.Cdf(System.Double,System.Double)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Value at which to compute the cdf</param>
            <param name="v">Degrees of freedom parameter</param>
        </member>
        <member name="M:ShoNS.Stats.T.Cdf(System.Collections.IEnumerable,System.Double)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Values at which to compute the cdf</param>
            <param name="v">Degrees of freedom parameter</param>
        </member>
        <member name="M:ShoNS.Stats.T.Cdf(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Values at which to compute the cdf</param>
            <param name="v">Degrees of freedom parameter</param>
        </member>
        <member name="M:ShoNS.Stats.T.Pdf(System.Double,System.Double)">
            <summary>Probability distribution function</summary>
            <param name="x">Values at which to compute the pdf</param>
            <param name="v">Degrees of freedom parameter</param>
        </member>
        <member name="M:ShoNS.Stats.T.Pdf(System.Collections.IEnumerable,System.Double)">
            <summary>Probability distribution function</summary>
            <param name="x">Values at which to compute the pdf</param>
            <param name="v">Degrees of freedom parameter</param>
        </member>
        <member name="M:ShoNS.Stats.T.Pdf(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Probability distribution function</summary>
            <param name="x">Values at which to compute the pdf</param>
            <param name="v">Degrees of freedom parameter</param>
        </member>
        <member name="M:ShoNS.Stats.T.Inv(System.Double,System.Double)">
            <summary>Inverse cumulative distribution function</summary>
            <param name="p">Probability at which to compute the inverse cdf</param>
            <param name="v">Degrees of freedom parameter</param>
        </member>
        <member name="M:ShoNS.Stats.T.Stats(System.Double,System.Double@)">
             <summary>Mean and variance</summary>
             <param name="v">Degrees of freedom parameter</param>
            <param name="var">Output: variance</param>
             <returns>Mean</returns>
        </member>
        <member name="M:ShoNS.Stats.T.Stats(System.Collections.IEnumerable,ShoNS.Array.DoubleArray@)">
            <summary>Mean and variance</summary>
            <param name="v">Degrees of freedom parameter</param>
            <param name="var">Output: variance</param>
            <returns>Mean</returns>
        </member>
        <member name="T:ShoNS.Stats.TTestInd">
            <summary>T-test for the significance between means of two independent samples.</summary>
            <remarks>The data are assumed to come from normal distributions with unknown but equal variances.</remarks>
        </member>
        <member name="M:ShoNS.Stats.TTestInd.Test(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Tests to see if the data in x and y have the same means</summary>
            <param name="x">Sample data</param>
            <param name="y">Sample data</param>
            <returns>Probability; small values indicate that the two samples have significantly different means.</returns>
        </member>
        <member name="T:ShoNS.Stats.TTestCorr">
            <summary>T-test for one sample or two correlated samples</summary>
        </member>
        <member name="M:ShoNS.Stats.TTestCorr.Test(System.Collections.IEnumerable)">
            <summary>Tests if the data in x come from a distribution with a mean of 0</summary>
            <param name="x">Sample data</param>
            <returns>p-value</returns>
        </member>
        <member name="M:ShoNS.Stats.TTestCorr.Test(System.Collections.IEnumerable,System.Double)">
            <summary>Tests if the data in x come from a distribution with the given mean</summary>
            <param name="x">Sample data</param>
            <param name="M">Distribution's mean</param>
            <returns>p-value</returns>
        </member>
        <member name="M:ShoNS.Stats.TTestCorr.Test(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Tests if the data in x and y come from distributions with equal mean.</summary>
            <param name="x">Sample data</param>
            <param name="y">Sample data</param>
            <returns>p-value</returns>
        </member>
        <member name="T:ShoNS.Stats.ZTest">
            <summary>z-test: determines if the sample mean is different from the population mean</summary>
        </member>
        <member name="M:ShoNS.Stats.ZTest.Test(System.Collections.IEnumerable,System.Double,System.Double,System.Double@)">
            <summary>Returns the 2-tailed p value for the z-test</summary>
            <param name="x">Sample data</param>
            <param name="mu">Population mean</param>
            <param name="sigma">Population standard deviation</param>
            <param name="zval">Output - the z value</param>
            <returns>The 2-tailed p-value</returns>
        </member>
        <member name="T:ShoNS.Stats.UniD">
            <summary>Discrete uniform distribution</summary>
        </member>
        <member name="M:ShoNS.Stats.UniD.Cdf(System.Double,System.Double)">
            <summary>Cumulative distribution function</summary>
        </member>
        <member name="M:ShoNS.Stats.UniD.Cdf(System.Collections.IEnumerable,System.Double)">
            <summary>Cumulative distribution function</summary>
        </member>
        <member name="M:ShoNS.Stats.UniD.Cdf(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Cumulative distribution function</summary>
        </member>
        <member name="M:ShoNS.Stats.UniD.Pdf(System.Double,System.Double)">
            <summary>Probability distribution function</summary>
        </member>
        <member name="M:ShoNS.Stats.UniD.Pdf(System.Collections.IEnumerable,System.Double)">
            <summary>Probability distribution function</summary>
        </member>
        <member name="M:ShoNS.Stats.UniD.Pdf(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Probability distribution function</summary>
        </member>
        <member name="M:ShoNS.Stats.UniD.Inv(System.Double,System.Double)">
            <summary>Inverse cumulative distribution function</summary>
        </member>
        <member name="M:ShoNS.Stats.UniD.Inv(System.Collections.IEnumerable,System.Double)">
            <summary>Inverse cumulative distribution function</summary>
        </member>
        <member name="M:ShoNS.Stats.UniD.Inv(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Inverse cumulative distribution function</summary>
        </member>
        <member name="M:ShoNS.Stats.UniD.Stats(System.Double,System.Double@)">
            <summary>Mean and variance</summary>
        </member>
        <member name="M:ShoNS.Stats.UniD.Stats(System.Collections.IEnumerable,ShoNS.Array.DoubleArray@)">
            <summary>Mean and variance</summary>
        </member>
        <member name="T:ShoNS.Stats.UniC">
            <summary>Continuous uniform distribution</summary>
        </member>
        <member name="M:ShoNS.Stats.UniC.Cdf(System.Double,System.Double,System.Double)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Value at which to compute the cdf</param>
            <param name="a">Left boundary</param>
            <param name="b">Right boundary</param>
        </member>
        <member name="M:ShoNS.Stats.UniC.Cdf(System.Collections.IEnumerable,System.Double,System.Double)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Values at which to compute the cdf</param>
            <param name="a">Left boundary</param>
            <param name="b">Right boundary</param>
        </member>
        <member name="M:ShoNS.Stats.UniC.Cdf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Value at which to compute the cdf</param>
            <param name="a">Left boundary, one per input value</param>
            <param name="b">Right boundary, one per input value</param>
        </member>
        <member name="M:ShoNS.Stats.UniC.Pdf(System.Double,System.Double,System.Double)">
            <summary>Probability distribution function</summary>
            <param name="x">Value at which to compute the cdf</param>
            <param name="a">Left boundary</param>
            <param name="b">Right boundary</param>
        </member>
        <member name="M:ShoNS.Stats.UniC.Pdf(System.Collections.IEnumerable,System.Double,System.Double)">
            <summary>Probability distribution function</summary>
            <param name="x">Values at which to compute the pdf</param>
            <param name="a">Left boundary</param>
            <param name="b">Right boundary</param>
        </member>
        <member name="M:ShoNS.Stats.UniC.Pdf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Probability distribution function</summary>
            <param name="x">Value at which to compute the pdf</param>
            <param name="a">Left boundary, one per input value</param>
            <param name="b">Right boundary, one per input value</param>
        </member>
        <member name="M:ShoNS.Stats.UniC.Inv(System.Double,System.Double,System.Double)">
            <summary>Inverse cumulative distribution function</summary>
            <param name="p">Probability at which to compute the inverse cdf</param>
            <param name="a">Left boundary</param>
            <param name="b">Right boundary</param>
        </member>
        <member name="M:ShoNS.Stats.UniC.Inv(System.Collections.IEnumerable,System.Double,System.Double)">
            <summary>Inverse cumulative distribution function</summary>
            <param name="p">Probability at which to compute the inverse cdf</param>
            <param name="a">Left boundary</param>
            <param name="b">Right boundary</param>
        </member>
        <member name="M:ShoNS.Stats.UniC.Inv(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Inverse cumulative distribution function</summary>
            <param name="p">Probability at which to compute the inverse cdf</param>
            <param name="a">Left boundary</param>
            <param name="b">Right boundary</param>
        </member>
        <member name="M:ShoNS.Stats.UniC.Stats(System.Double,System.Double,System.Double@)">
            <summary>Mean and variance</summary>
            <param name="a">Left boundary</param>
            <param name="b">Right boundary</param>
            <param name="var">Output: variance</param>
            <returns>Mean</returns>
        </member>
        <member name="M:ShoNS.Stats.UniC.Stats(System.Collections.IEnumerable,System.Collections.IEnumerable,ShoNS.Array.DoubleArray@)">
            <summary>Mean and variance</summary>
            <param name="a">Left boundary</param>
            <param name="b">Right boundary</param>
            <param name="var">Output: variance</param>
            <returns>Mean</returns>
        </member>
        <member name="M:ShoNS.Stats.UniC.MLE(System.Collections.IEnumerable,System.Double@)">
            <summary>Maximum likelihood estimate</summary>
            <param name="dataIn">Data to fit</param>
            <param name="bhat">Estimate for b</param>
            <returns>Estimate for a</returns>
        </member>
        <member name="T:ShoNS.Stats.Utils">
            <summary>Utility functions for statistics</summary>
        </member>
        <member name="M:ShoNS.Stats.Utils.LogGamma(System.Double)">
            <summary>Returns the log of the gamma function</summary>
            <param name="x">Argument of function</param>
            <returns>Log Gamma(x)</returns>
            <remarks>Accurate to eight digits for all x.</remarks>
        </member>
        <member name="M:ShoNS.Stats.Utils.LogGamma(System.Collections.IEnumerable)">
            <summary>Computes the log gamma function</summary>
        </member>
        <member name="M:ShoNS.Stats.Utils.GammaFunc(System.Double)">
            <summary>Computes the gamma function</summary>
        </member>
        <member name="M:ShoNS.Stats.Utils.GammaFunc(System.Collections.IEnumerable)">
            <summary>Computes the gamma function</summary>
        </member>
        <member name="M:ShoNS.Stats.Utils.LogBeta(System.Double,System.Double)">
            <summary>Computes the log beta function</summary>
        </member>
        <member name="M:ShoNS.Stats.Utils.LogBeta(System.Double,System.Collections.IEnumerable)">
            <summary>Computes the log beta function</summary>
        </member>
        <member name="M:ShoNS.Stats.Utils.LogBeta(System.Collections.IEnumerable,System.Double)">
            <summary>Computes the log beta function</summary>
        </member>
        <member name="M:ShoNS.Stats.Utils.LogBeta(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Computes the log beta function</summary>
        </member>
        <member name="M:ShoNS.Stats.Utils.BetaFunc(System.Double,System.Double)">
            <summary>Computes the beta function</summary>
        </member>
        <member name="M:ShoNS.Stats.Utils.BetaFunc(System.Collections.IEnumerable,System.Double)">
            <summary>Computes the beta function</summary>
        </member>
        <member name="M:ShoNS.Stats.Utils.BetaFunc(System.Double,System.Collections.IEnumerable)">
            <summary>Computes the beta function</summary>
        </member>
        <member name="M:ShoNS.Stats.Utils.BetaFunc(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Computes the beta function</summary>
        </member>
        <member name="M:ShoNS.Stats.Utils.Factorial(System.Int32)">
            <summary>Computes the factorial for a value</summary>
        </member>
        <member name="M:ShoNS.Stats.Utils.Factorial(System.Collections.IEnumerable)">
            <summary>Computes the factorial for a collection of values</summary>
        </member>
        <member name="M:ShoNS.Stats.Utils.LogFactorial(System.Int32)">
            <summary>Computes the log(factorial)</summary>
        </member>
        <member name="M:ShoNS.Stats.Utils.LogFactorial(System.Collections.IEnumerable)">
            <summary>Computes the log(factorial)</summary>
        </member>
        <member name="M:ShoNS.Stats.Utils.Cov(System.Collections.IEnumerable)">
            <summary>Covariance, normalized by N-1</summary>
        </member>
        <member name="M:ShoNS.Stats.Utils.CovN(System.Collections.IEnumerable)">
            <summary>Covariance, normalized by N</summary>
        </member>
        <member name="M:ShoNS.Stats.Utils.MeanAbsDev(System.Collections.IEnumerable)">
            <summary>Compute mean absolute deviation</summary>
            <param name="x">Input data; computes per column if the input is a matrix.</param>
        </member>
        <member name="M:ShoNS.Stats.Utils.MedianAbsDev(System.Collections.IEnumerable)">
            <summary>Compute median absolute deviation</summary>
            <param name="x">Input data; computes per column if the input is a matrix.</param>
        </member>
        <member name="M:ShoNS.Stats.Utils.Moment(System.Collections.IEnumerable,System.Int32)">
            <summary>Compute the n-th moment</summary>
            <param name="x">Input data; computes per column if the input is a matrix.</param>
            <param name="n">Momemnt to compute</param>
        </member>
        <member name="M:ShoNS.Stats.Utils.Kurt(System.Collections.IEnumerable,System.Boolean)">
            <summary>Kurtosis</summary>
            <param name="x">Input data; computes per column if the input is a matrix.</param>
            <param name="biasCorrect">If true, do bias correction</param>
        </member>
        <member name="M:ShoNS.Stats.Utils.Skew(System.Collections.IEnumerable,System.Boolean)">
            <summary>Skewness</summary>
            <param name="x">Input data; computes per column if the input is a matrix.</param>
            <param name="biasCorrect">If true, do bias correction</param>
        </member>
        <member name="M:ShoNS.Stats.Utils.FisherTrans(System.Double)">
            <summary>Fisher transformation</summary>
        </member>
        <member name="M:ShoNS.Stats.Utils.FisherInv(System.Double)">
            <summary>Inverse Fisher transformation</summary>
        </member>
        <member name="M:ShoNS.Stats.Utils.HarmMean(System.Collections.IEnumerable)">
            <summary>Harmonic mean</summary>
            <param name="x">Input data; computes the mean per column if the input is a matrix.</param>
        </member>
        <member name="M:ShoNS.Stats.Utils.GeoMean(System.Collections.IEnumerable)">
            <summary>Geometric mean</summary>
            <param name="x">Input data; computes per column if the input is a matrix.</param>
        </member>
        <member name="M:ShoNS.Stats.Utils.TrimMean(System.Collections.IEnumerable,System.Double)">
            <summary>Trimmed mean - exclude the highest and lowest percent/2 of the observations</summary>
            <param name="x">Input data; computes per column if the input is a matrix.</param>
            <param name="perCent">A scalar between 0 and 100</param>
        </member>
        <member name="M:ShoNS.Stats.Utils.Percentile(ShoNS.Array.DoubleArray,ShoNS.Array.DoubleArray)">
            <summary>Percentile</summary>
        </member>
        <member name="M:ShoNS.Stats.Utils.Percentile(System.Collections.IEnumerable,System.Double)">
            <summary>Percentile</summary>
        </member>
        <member name="M:ShoNS.Stats.Utils.Range(System.Collections.IEnumerable)">
            <summary>Sample range</summary>
            <param name="x">Input data; computes per column if the input is a matrix.</param>
        </member>
        <member name="M:ShoNS.Stats.Utils.IQR(System.Collections.IEnumerable)">
            <summary>Interquartile range</summary>
            <param name="x">Input data; computes per column if the input is a matrix.</param>
        </member>
        <member name="M:ShoNS.Stats.Utils.Permute(ShoNS.Array.DoubleArray)">
            <summary>Compute the permutations of the vector, only for vectors of length less than or equal to 10</summary>
        </member>
        <member name="M:ShoNS.Stats.Utils.RandPermute(ShoNS.Array.DoubleArray,System.Random)">
            <summary>Create a random permuation of the input vector, using the given random number generator</summary>
            <param name="a">The input vector to permute</param>
            <param name="rn">Random number generator to use</param>
            <returns>A random permutation</returns>
        </member>
        <member name="M:ShoNS.Stats.Utils.RandPermute(ShoNS.Array.DoubleArray)">
            <summary>Create a random permuation of the input vector, using System.Random</summary>
            <param name="a">The input vector to permute</param>
            <returns>A random permutation</returns>
        </member>
        <member name="M:ShoNS.Stats.Utils.Resample(ShoNS.Array.DoubleArray)">
            <summary>Resample with replacement, using System.Random</summary>
            <param name="a">The input vector</param>
            <returns>Resampled array</returns>
        </member>
        <member name="M:ShoNS.Stats.Utils.Resample(ShoNS.Array.DoubleArray,System.Random)">
            <summary>Resample with replacement, using the given random number generator</summary>
            <param name="a">The input matrix</param>
            <param name="rn">Random number generator to use</param>
            <returns>Resampled matrix</returns>
        </member>
        <member name="M:ShoNS.Stats.Utils.SampleCdf(System.Collections.IEnumerable,ShoNS.Array.DoubleArray@)">
            <summary>Computes the empirical (sample) cdf for the input data</summary>
            <param name="x"></param>
            <param name="xsortNoDups"></param>
            <returns></returns>
        </member>
        <member name="M:ShoNS.Stats.Utils.ZScore(System.Collections.IEnumerable)">
            <summary>z-score</summary>
        </member>
        <member name="T:ShoNS.Stats.Bartlett">
            <summary>Performs Bartlett's test for equal variance</summary>
        </member>
        <member name="M:ShoNS.Stats.Bartlett.Test(System.Collections.IList,System.Double@)">
            <summary>Computes the p-value and test statistic for the input samples</summary>
            <param name="sampleVectors">The samples to test for equal variance</param>
            <param name="teststat">Output - test statistic</param>
            <returns>p-value</returns>
        </member>
        <member name="T:ShoNS.Stats.Levene">
            <summary>Performs Levene's test for equal variance</summary>
        </member>
        <member name="M:ShoNS.Stats.Levene.Test(System.Collections.IList,System.Double@)">
            <summary>Computes the p-value and test statistic for the input samples</summary>
            <param name="sampleVectors">The samples to test for equal variance</param>
            <param name="teststat">Output - test statistic</param>
            <returns>p-value</returns>
        </member>
        <member name="T:ShoNS.Stats.Weibull">
            <summary>Weibull distribution</summary>
        </member>
        <member name="M:ShoNS.Stats.Weibull.Cdf(System.Double,System.Double,System.Double)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Value at which to compute the cdf</param>
            <param name="shape">Shape parameter</param>
            <param name="scale">Scale parameter</param>
        </member>
        <member name="M:ShoNS.Stats.Weibull.Cdf(System.Collections.IEnumerable,System.Double,System.Double)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Values at which to compute the cdf</param>
            <param name="shape">Shape parameter</param>
            <param name="scale">Scale parameter</param>
        </member>
        <member name="M:ShoNS.Stats.Weibull.Cdf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Cumulative distribution function</summary>
            <param name="x">Values at which to compute the cdf</param>
            <param name="shape">Shape parameters, one per input value</param>
            <param name="scale">Scale parameters, one per input value</param>
        </member>
        <member name="M:ShoNS.Stats.Weibull.Pdf(System.Double,System.Double,System.Double)">
            <summary>Probability distribution function</summary>
            <param name="x">Value at which to compute the pdf</param>
            <param name="shape">Shape parameter</param>
            <param name="scale">Scale parameter</param>
        </member>
        <member name="M:ShoNS.Stats.Weibull.Pdf(System.Collections.IEnumerable,System.Double,System.Double)">
            <summary>Probability distribution function</summary>
            <param name="x">Values at which to compute the pdf</param>
            <param name="shape">Shape parameter</param>
            <param name="scale">Scale parameter</param>
        </member>
        <member name="M:ShoNS.Stats.Weibull.Pdf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Probability distribution function</summary>
            <param name="x">Values at which to compute the pdf</param>
            <param name="shape">Shape parameters, one per input value</param>
            <param name="scale">Scale parameters, one per input value</param>
        </member>
        <member name="M:ShoNS.Stats.Weibull.Inv(System.Double,System.Double,System.Double)">
            <summary>Inverse cumulative distribution function</summary>
            <param name="p">Probability at which to compute the inverse cdf</param>
            <param name="shape">Shape parameter</param>
            <param name="scale">Scale parameter</param>
        </member>
        <member name="M:ShoNS.Stats.Weibull.Inv(System.Collections.IEnumerable,System.Double,System.Double)">
            <summary>Inverse cumulative distribution function</summary>
            <param name="x">Values at which to compute the inverse cdf</param>
            <param name="shape">Shape parameter</param>
            <param name="scale">Scale parameters</param>
        </member>
        <member name="M:ShoNS.Stats.Weibull.Inv(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Inverse cumulative distribution function</summary>
            <param name="x">Values at which to compute the inverse cdf</param>
            <param name="shape">Shape parameters, one per input value</param>
            <param name="scale">Scale parameters, one per input value</param>
        </member>
        <member name="M:ShoNS.Stats.Weibull.Stats(System.Double,System.Double,System.Double@)">
            <summary>Mean and variance</summary>
            <param name="shape">Shape parameter</param>
            <param name="scale">Scale parameter</param>
            <param name="var">Output: variance</param>
            <returns>Mean</returns>
        </member>
        <member name="M:ShoNS.Stats.Weibull.Stats(System.Collections.IEnumerable,System.Collections.IEnumerable,ShoNS.Array.DoubleArray@)">
            <summary>Mean and variance</summary>
            <param name="shape">Shape parameters</param>
            <param name="scale">Scale parameters</param>
            <param name="var">Output: variances</param>
            <returns>Mean</returns>
        </member>
        <member name="M:ShoNS.Stats.Weibull.MLE(System.Collections.IEnumerable,System.Double@)">
            <summary>Maximum likelihood estimate</summary>
            <param name="uncensored">Uncensored data to fit</param>
            <param name="scalehat">Output: estimate of the scale</param>
            <returns>Estimate of the shape</returns>
        </member>
        <member name="M:ShoNS.Stats.Weibull.MLE(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable,System.Double@)">
            <summary>Maximum likelihood estimate</summary>
            <param name="uncensored">Uncensored data to fit</param>
            <param name="leftcensored">Left censored data to fit</param>
            <param name="rightcensored">Right censored data to fit</param>
            <param name="scalehat">Output: estimate of the scale</param>
            <returns>Estimate of the shape</returns>
        </member>
        <member name="T:ShoNS.Stats.ExtremeValue">
            <summary>Extreme value (type 1, Gumbel) distribution</summary>
        </member>
        <member name="M:ShoNS.Stats.ExtremeValue.Cdf(System.Double,System.Double,System.Double)">
            <summary>Cumulative distribution function</summary>
        </member>
        <member name="M:ShoNS.Stats.ExtremeValue.Cdf(System.Collections.IEnumerable,System.Double,System.Double)">
            <summary>Cumulative distribution function</summary>
        </member>
        <member name="M:ShoNS.Stats.ExtremeValue.Cdf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Cumulative distribution function</summary>
        </member>
        <member name="M:ShoNS.Stats.ExtremeValue.Pdf(System.Double,System.Double,System.Double)">
            <summary>Probability distribution function</summary>
        </member>
        <member name="M:ShoNS.Stats.ExtremeValue.Pdf(System.Collections.IEnumerable,System.Double,System.Double)">
            <summary>Probability distribution function</summary>
        </member>
        <member name="M:ShoNS.Stats.ExtremeValue.Pdf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Probability distribution function</summary>
        </member>
        <member name="M:ShoNS.Stats.ExtremeValue.Inv(System.Double,System.Double,System.Double)">
            <summary>Inverse cumulative distribution function</summary>
        </member>
        <member name="M:ShoNS.Stats.ExtremeValue.Inv(System.Collections.IEnumerable,System.Double,System.Double)">
            <summary>Inverse cumulative distribution function</summary>
        </member>
        <member name="M:ShoNS.Stats.ExtremeValue.Inv(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Inverse cumulative distribution function</summary>
        </member>
        <member name="M:ShoNS.Stats.ExtremeValue.Stats(System.Double,System.Double,System.Double@)">
            <summary>Mean and variance</summary>
        </member>
        <member name="M:ShoNS.Stats.ExtremeValue.Stats(System.Collections.IEnumerable,System.Collections.IEnumerable,ShoNS.Array.DoubleArray@)">
            <summary>Mean and variance</summary>
        </member>
    </members>
</doc>
