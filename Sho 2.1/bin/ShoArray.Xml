<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ShoArray</name>
    </assembly>
    <members>
        <member name="T:ShoNS.Array.ArrayUtils">
            <summary>Static class for replicating, reshaping, and extracting/creating diagonal arrays.</summary>
        </member>
        <member name="M:ShoNS.Array.ArrayUtils.Repmat(ShoNS.Array.DoubleArray,System.Int32,System.Int32)">
            <summary>Replicates the array.</summary>
            <param name="arr">Array to replicate</param>
            <param name="numRows">Number of rows</param>
            <param name="numCols">Number columns</param>
        </member>
        <member name="M:ShoNS.Array.ArrayUtils.Repmat(ShoNS.Array.FloatArray,System.Int32,System.Int32)">
            <summary>Replicates the array.</summary>
            <param name="arr">Array to replicate</param>
            <param name="numRows">Number of rows</param>
            <param name="numCols">Number columns</param>
        </member>
        <member name="M:ShoNS.Array.ArrayUtils.Repmat(ShoNS.Array.IntArray,System.Int32,System.Int32)">
            <summary>Replicates the array.</summary>
            <param name="arr">Array to replicate</param>
            <param name="numRows">Number of rows</param>
            <param name="numCols">Number columns</param>        
        </member>
        <member name="M:ShoNS.Array.ArrayUtils.Repmat(ShoNS.Array.ComplexArray,System.Int32,System.Int32)">
            <summary>Replicates the array.</summary>
            <param name="arr">Array to replicate</param>
            <param name="numRows">Number of rows</param>
            <param name="numCols">Number columns</param>        
        </member>
        <member name="M:ShoNS.Array.ArrayUtils.Repmat(ShoNS.Array.BoolArray,System.Int32,System.Int32)">
            <summary>Replicates the array.</summary>
            <param name="arr">Array to replicate</param>
            <param name="numRows">Number of rows</param>
            <param name="numCols">Number columns</param>        
        </member>
        <member name="M:ShoNS.Array.ArrayUtils.Repmat(ShoNS.Array.ObjArray,System.Int32,System.Int32)">
            <summary>Replicates the array.</summary>
            <param name="arr">Array to replicate</param>
            <param name="numRows">Number of rows</param>
            <param name="numCols">Number columns</param>        
        </member>
        <member name="M:ShoNS.Array.ArrayUtils.Reshape(ShoNS.Array.DoubleArray,System.Int32,System.Int32,ShoNS.Array.OrderOp)">
            <summary>Reshapes the array to size numRows x numCols, either rowwise or columnwise, depending on the last argument.</summary>
            <param name="arr">Array to reshape</param>
            <param name="numRows">Number of rows</param>
            <param name="numCols">Number of columns</param>
            <param name="op">Specifies whethere the reshape is done columnwise or rowwise</param>
        </member>
        <member name="M:ShoNS.Array.ArrayUtils.Reshape(ShoNS.Array.FloatArray,System.Int32,System.Int32,ShoNS.Array.OrderOp)">
            <summary>Reshapes the array to size numRows x numCols, either rowwise or columnwise, depending on the last argument.</summary>
            <param name="arr">Array to reshape</param>
            <param name="numRows">Number of rows</param>
            <param name="numCols">Number of columns</param>
            <param name="op">Specifies whethere the reshape is done columnwise or rowwise</param>
        </member>
        <member name="M:ShoNS.Array.ArrayUtils.Reshape(ShoNS.Array.IntArray,System.Int32,System.Int32,ShoNS.Array.OrderOp)">
            <summary>Reshapes the array to size numRows x numCols, either rowwise or columnwise, depending on the last argument.</summary>
            <param name="arr">Array to reshape</param>
            <param name="numRows">Number of rows</param>
            <param name="numCols">Number of columns</param>
            <param name="op">Specifies whethere the reshape is done columnwise or rowwise</param>        
        </member>
        <member name="M:ShoNS.Array.ArrayUtils.Reshape(ShoNS.Array.ComplexArray,System.Int32,System.Int32,ShoNS.Array.OrderOp)">
            <summary>Reshapes the array to size numRows x numCols, either rowwise or columnwise, depending on the last argument.</summary>
            <param name="arr">Array to reshape</param>
            <param name="numRows">Number of rows</param>
            <param name="numCols">Number of columns</param>
            <param name="op">Specifies whethere the reshape is done columnwise or rowwise</param>        
        </member>
        <member name="M:ShoNS.Array.ArrayUtils.Reshape(ShoNS.Array.BoolArray,System.Int32,System.Int32,ShoNS.Array.OrderOp)">
            <summary>Reshapes the array to size numRows x numCols, either rowwise or columnwise, depending on the last argument.</summary>
            <param name="arr">Array to reshape</param>
            <param name="numRows">Number of rows</param>
            <param name="numCols">Number of columns</param>
            <param name="op">Specifies whethere the reshape is done columnwise or rowwise</param>        
        </member>
        <member name="M:ShoNS.Array.ArrayUtils.Reshape(ShoNS.Array.ObjArray,System.Int32,System.Int32,ShoNS.Array.OrderOp)">
            <summary>Reshapes the array to size numRows x numCols, either rowwise or columnwise, depending on the last argument.</summary>
            <param name="arr">Array to reshape</param>
            <param name="numRows">Number of rows</param>
            <param name="numCols">Number of columns</param>
            <param name="op">Specifies whethere the reshape is done columnwise or rowwise</param>        
        </member>
        <member name="M:ShoNS.Array.ArrayUtils.Diag(ShoNS.Array.DoubleArray,System.Int32)">
            <summary>If the input is a vector, returns an array with the given diagonal set to the vector contents; else returns the elements on the given diagonal as a vector.</summary>
            <param name="inputArray">Input array</param>
            <param name="diagonal">Diagonal to set or get</param>
        </member>
        <member name="M:ShoNS.Array.ArrayUtils.Diag(ShoNS.Array.DoubleArray)">
            <summary>If the input is a vector, returns an array with the main diagonal set to the vector contents; else returns the elements on the main diagonal as a vector.</summary>
            <param name="inputArray">Input array</param>        
        </member>
        <member name="M:ShoNS.Array.ArrayUtils.Diag(ShoNS.Array.FloatArray,System.Int32)">
            <summary>If the input is a vector, returns an array with the given diagonal set to the vector contents; else returns the elements on the given diagonal as a vector.</summary>
            <param name="inputArray">Input array</param>
            <param name="diagonal">Diagonal to set or get</param>        
        </member>
        <member name="M:ShoNS.Array.ArrayUtils.Diag(ShoNS.Array.FloatArray)">
            <summary>If the input is a vector, returns an array with the main diagonal set to the vector contents; else returns the elements on the main diagonal as a vector.</summary>
            <param name="inputArray">Input array</param>        
        </member>
        <member name="M:ShoNS.Array.ArrayUtils.Diag(ShoNS.Array.IntArray,System.Int32)">
            <summary>If the input is a vector, returns an array with the given diagonal set to the vector contents; else returns the elements on the given diagonal as a vector.</summary>
            <param name="inputArray">Input array</param>
            <param name="diagonal">Diagonal to set or get</param>        
        </member>
        <member name="M:ShoNS.Array.ArrayUtils.Diag(ShoNS.Array.IntArray)">
            <summary>If the input is a vector, returns an array with the main diagonal set to the vector contents; else returns the elements on the main diagonal as a vector.</summary>
            <param name="inputArray">Input array</param>
        </member>
        <member name="M:ShoNS.Array.ArrayUtils.Diag(ShoNS.Array.BoolArray,System.Int32)">
            <summary>If the input is a vector, returns an array with the given diagonal set to the vector contents; else returns the elements on the given diagonal as a vector.</summary>
            <param name="inputArray">Input array</param>
            <param name="diagonal">Diagonal to set or get</param>        
        </member>
        <member name="M:ShoNS.Array.ArrayUtils.Diag(ShoNS.Array.BoolArray)">
            <summary>If the input is a vector, returns an array with the main diagonal set to the vector contents; else returns the elements on the main diagonal as a vector.</summary>
            <param name="inputArray">Input array</param>                
        </member>
        <member name="M:ShoNS.Array.ArrayUtils.Diag(ShoNS.Array.ObjArray,System.Int32)">
            <summary>If the input is a vector, returns an array with the given diagonal set to the vector contents; else returns the elements on the given diagonal as a vector.</summary>
            <param name="inputArray">Input array</param>
            <param name="diagonal">Diagonal to set or get</param>         
        </member>
        <member name="M:ShoNS.Array.ArrayUtils.Diag(ShoNS.Array.ObjArray)">
            <summary>If the input is a vector, returns an array with the main diagonal set to the vector contents; else returns the elements on the main diagonal as a vector.</summary>
            <param name="inputArray">Input array</param>        
        </member>
        <member name="M:ShoNS.Array.ArrayUtils.Diag(ShoNS.Array.ComplexArray,System.Int32)">
            <summary>If the input is a vector, returns an array with the given diagonal set to the vector contents; else returns the elements on the given diagonal as a vector.</summary>
            <param name="inputArray">Input array</param>
            <param name="diagonal">Diagonal to set or get</param>  
        </member>
        <member name="M:ShoNS.Array.ArrayUtils.Diag(ShoNS.Array.ComplexArray)">
            <summary>If the input is a vector, returns an array with the main diagonal set to the vector contents; else returns the elements on the main diagonal as a vector.</summary>
            <param name="inputArray">Input array</param>        
        </member>
        <member name="M:ShoNS.Array.ArrayUtils.Diag(ShoNS.Array.SparseDoubleArray,System.Int32)">
            <summary>If the input is a vector, returns an array with the given diagonal set to the vector contents; else returns the elements on the given diagonal as a vector.</summary>
            <param name="inputArray">Input array</param>
            <param name="diagonal">Diagonal to set or get</param>         
        </member>
        <member name="M:ShoNS.Array.ArrayUtils.Diag(ShoNS.Array.SparseDoubleArray)">
            <summary>If the input is a vector, returns an array with the main diagonal set to the vector contents; else returns the elements on the main diagonal as a vector.</summary>
            <param name="inputArray">Input array</param>        
        </member>
        <member name="M:ShoNS.Array.ArrayUtils.Diag(ShoNS.Array.SparseFloatArray,System.Int32)">
            <summary>If the input is a vector, returns an array with the given diagonal set to the vector contents; else returns the elements on the given diagonal as a vector.</summary>
            <param name="inputArray">Input array</param>
            <param name="diagonal">Diagonal to set or get</param>         
        </member>
        <member name="M:ShoNS.Array.ArrayUtils.Diag(ShoNS.Array.SparseFloatArray)">
            <summary>If the input is a vector, returns an array with the main diagonal set to the vector contents; else returns the elements on the main diagonal as a vector.</summary>
            <param name="inputArray">Input array</param>        
        </member>
        <member name="M:ShoNS.Array.ArrayUtils.Diag(ShoNS.Array.SparseIntArray,System.Int32)">
            <summary>If the input is a vector, returns an array with the given diagonal set to the vector contents; else returns the elements on the given diagonal as a vector.</summary>
            <param name="inputArray">Input array</param>
            <param name="diagonal">Diagonal to set or get</param>         
        </member>
        <member name="M:ShoNS.Array.ArrayUtils.Diag(ShoNS.Array.SparseIntArray)">
            <summary>If the input is a vector, returns an array with the main diagonal set to the vector contents; else returns the elements on the main diagonal as a vector.</summary>
            <param name="inputArray">Input array</param>        
        </member>
        <member name="M:ShoNS.Array.ArrayUtils.Diag(ShoNS.Array.SparseBoolArray,System.Int32)">
            <summary>If the input is a vector, returns an array with the given diagonal set to the vector contents; else returns the elements on the given diagonal as a vector.</summary>
            <param name="inputArray">Input array</param>
            <param name="diagonal">Diagonal to set or get</param>         
        </member>
        <member name="M:ShoNS.Array.ArrayUtils.Diag(ShoNS.Array.SparseBoolArray)">
            <summary>If the input is a vector, returns an array with the main diagonal set to the vector contents; else returns the elements on the main diagonal as a vector.</summary>
            <param name="inputArray">Input array</param>        
        </member>
        <member name="M:ShoNS.Array.ArrayUtils.Diag(ShoNS.Array.SparseObjArray,System.Int32)">
            <summary>If the input is a vector, returns an array with the given diagonal set to the vector contents; else returns the elements on the given diagonal as a vector.</summary>
            <param name="inputArray">Input array</param>
            <param name="diagonal">Diagonal to set or get</param>         
        </member>
        <member name="M:ShoNS.Array.ArrayUtils.Diag(ShoNS.Array.SparseObjArray)">
            <summary>If the input is a vector, returns an array with the main diagonal set to the vector contents; else returns the elements on the main diagonal as a vector.</summary>
            <param name="inputArray">Input array</param>        
        </member>
        <member name="T:ShoNS.Array.ArrayCreator`1">
            <summary>Generic array creator</summary>
            <typeparam name="T">Type of array you want (e.g. DoubleArray, FloatArray, IntArray)</typeparam>
        </member>
        <member name="M:ShoNS.Array.ArrayCreator`1.Create(System.Int32)">
             <summary>Creates a vector of the given length</summary>
            <param name="length">Length of vector</param>
        </member>
        <member name="M:ShoNS.Array.ArrayCreator`1.Create(System.Int32,System.Int32)">
            <summary>Creates a size0 x size1 2d array.</summary>
            <param name="size0">Number of rows</param>
            <param name="size1">Number of columns</param>
        </member>
        <member name="M:ShoNS.Array.ArrayCreator`1.Create(System.Int32[])">
            <summary>Creates an n-dimensional array</summary>
            <param name="sizes">Sizes of the dimensions</param>
        </member>
        <member name="M:ShoNS.Array.ArrayCreator`1.CreateFrom(System.Collections.IEnumerable)">
            <summary>Creates an array from the input enumerable</summary>
            <param name="obj">Input enumerable to copy</param>
        </member>
        <member name="T:ShoNS.Array.ProcessorArchitecture">
            Maps to the native processor architecture values.
        </member>
        <member name="F:ShoNS.Array.ProcessorArchitecture.None">
            PROCESSOR_ARCHITECTURE_UNKNOWN
        </member>
        <member name="F:ShoNS.Array.ProcessorArchitecture.x86">
            PROCESSOR_ARCHITECTURE_INTEL
        </member>
        <member name="F:ShoNS.Array.ProcessorArchitecture.IA64">
            PROCESSOR_ARCHITECTURE_IA64
        </member>
        <member name="F:ShoNS.Array.ProcessorArchitecture.AMD64">
            PROCESSOR_ARCHITECTURE_AMD64
        </member>
        <member name="T:ShoNS.Array.ArraySettings">
            <summary>This class is used for setting and getting array settings, such as console printing behavior and whether fast math is enabled.</summary>
        </member>
        <member name="M:ShoNS.Array.ArraySettings.SetTruncateMatrixOutput(System.Boolean)">
            <summary>Sets the truncation behavior for printing array contents.</summary>
            <param name="truncate">true to truncate the array contents</param>
        </member>
        <member name="M:ShoNS.Array.ArraySettings.SetMaxOutputLength(System.Int32)">
            <summary>Sets the maximum output length for printing array contents.</summary>
            <param name="length">Maximum length to output</param>
        </member>
        <member name="M:ShoNS.Array.ArraySettings.DisableFastMath">
            <summary>Disables fast math.</summary>
            <returns>Returns true if fast math was successfully disabled.</returns>
        </member>
        <member name="M:ShoNS.Array.ArraySettings.EnableFastMath">
            <summary>Enables fast math.</summary>
            <returns>Returns true if fast math was successfully enabled.</returns>
        </member>
        <member name="M:ShoNS.Array.ArraySettings.SetDynamicThreading(System.Boolean)">
            <summary>Enables or disables MKL dynamic threading.</summary>
        </member>
        <member name="M:ShoNS.Array.ArraySettings.GetDynamicThreading">
            <summary>
            Returns true if MKL dynamic threading is enabled.
            </summary>
        </member>
        <member name="M:ShoNS.Array.ArraySettings.SetNumThreads(System.Int32)">
            <summary>
            Sets the number of threads for MKL to use. This is just a suggestion -- it is not guaranteed that MKL will use this many threads, due to other constraints on the system (e.g., number of CPU cores).
            </summary>
            <param name="numThreads">Suggested number of threads for MKL to use.</param>
        </member>
        <member name="M:ShoNS.Array.ArraySettings.GetMaxThreads">
            <summary>
            Returns the maximum number of threads MKL will use for computation.
            </summary>
        </member>
        <member name="M:ShoNS.Array.ArraySettings.GetMklVersion">
            <summary>
            returns the version number (in Major.Minor.Micro format) of MKL.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ShoNS.Array.ArraySettings.TruncateMatrixOutput">
            <summary>Returns true if the matrix output will be truncated.</summary>
        </member>
        <member name="P:ShoNS.Array.ArraySettings.MaxOutputLength">
            <summary>Gets the maximum output length for printing array contents.</summary>
        </member>
        <member name="P:ShoNS.Array.ArraySettings.FastMathEnabled">
            <summary>Returns true if fast math is enabled.</summary>
        </member>
        <member name="T:ShoNS.Array.BoolArray">
            <summary>This class implements functionality for an array with boolean elements.</summary>
        </member>
        <member name="T:ShoNS.Array.ArrayBase`1">
            <summary>This class implements the base functionality for all arrays.</summary>
            <typeparam name="TYPE">Array element type</typeparam>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.#ctor">
            <summary>Required for inheritance.</summary>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.#ctor(ShoNS.Array.IArray{`0})">
            <summary>Wrapper around interface pointer (shallow).</summary>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.#ctor(ShoNS.Array.ArrayBase{`0})">
            <summary>Creates a deep copy of the input array.</summary>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.#ctor(System.Int32)">
            <summary>Creates a vector of the given length, filled with zeros.</summary>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.#ctor(System.Int32,System.Int32)">
            <summary>Creates a 2d array/matrix of size0 x size1, filled with zeros.</summary>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.#ctor(System.Int32[])">
            <summary>Creates an n-rank array of the given sizes, filled with zeros.</summary>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.#ctor(System.Collections.IEnumerable)">
            <summary>Creates an array from the contents of an enumerable.</summary>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.#ctor(System.String,System.Boolean)">
            <summary>Creates an array from the contents of a binary file.</summary>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>Creates an array from the contents of an enumerable.</summary>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.#ctor(System.Collections.IList,System.Collections.IList)">
            <summary>Creates a sparse vector from the index and value lists.</summary>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.#ctor(System.Int32,System.Collections.IList,System.Collections.IList)">
            <summary>Creates a sparse vector of a given size from the index and value lists.</summary>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.#ctor(System.Collections.IList,System.Collections.IList,System.Boolean)">
            <summary>Creates a sparse vector from the index and value lists, doing a fast insert if useFastInsert = true.</summary>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.#ctor(System.Int32,System.Collections.IList,System.Collections.IList,System.Boolean)">
            <summary>Creates a sparse vector of a given size from the index and value lists, doing a fast insert if useFastInsert = true.</summary>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.#ctor(System.Collections.IList,System.Collections.IList,System.Collections.IList)">
            <summary>Creates a sparse 2d array from the index and value lists.</summary>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.#ctor(System.Int32,System.Int32,System.Collections.IList,System.Collections.IList,System.Collections.IList)">
            <summary>Creates a sparse 2d array of a given size from the index and value lists.</summary>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.#ctor(System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Boolean)">
            <summary>Creates a sparse 2d array from the index and value lists, doing a fast insert if useFastInsert = true.</summary>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.#ctor(System.Int32,System.Int32,System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Boolean)">
            <summary>Creates a sparse 2d array of a given size from the index and value lists, doing a fast insert if useFastInsert = true.</summary>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.#ctor(System.Int32,ShoNS.Array.SparseStorageFormat)">
            <summary>Creates a sparse vector of the given storage format.</summary>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.#ctor(System.Int32,System.Int32,ShoNS.Array.SparseStorageFormat)">
            <summary>Creates a sparse two-dimensional array of the given storage format.</summary>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.#ctor(System.Int32,System.Int32,System.Single,ShoNS.Array.SparseStorageFormat)">
            <summary>Creates a sparse two-dimensional array of the given storage format.</summary>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.#ctor(ShoNS.Array.ArrayBase{`0},ShoNS.Array.SparseStorageFormat)">
            <summary>Creates a sparse array from the contents of another array.</summary>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.#ctor(System.Object,ShoNS.Array.SparseStorageFormat)">
            <summary>Creates a sparse array from the contents of an object.</summary>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.#ctor(System.String,ShoNS.Array.SparseFileFormat,System.Boolean,ShoNS.Array.SparseStorageFormat)">
            <summary>Creates a sparse array from a file.</summary>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.#ctor(System.String)">
            <summary>Creates an array from a file, using binary serialization.</summary>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.#ctor(System.IO.Stream)">
            <summary>Creates an array from a stream, using binary serialization.</summary>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.SaveToFile(System.String)">
             <summary>Saves the contents of the array to a file, using binary serialization.</summary>
            <param name="fileName">Name of file to save to</param>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.SaveToStream(System.IO.Stream)">
             <summary>Saves the contents of the array to a stream, using binary serialization.</summary>
            <param name="stream">Stream to save to</param>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.ToString">
            <summary>Returns a string representation of the array.</summary>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.IsVector">
            <summary>Returns true if this is a vector (either size0 or size1 is 1.)</summary>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.SetSlice(ShoNS.Array.ArrayBase{`0},System.Int32,System.Int32)">
            <summary>Sets the slice with the contents of another array.</summary>
            <param name="arrayToCopy">The array to copy.</param>
            <param name="firstIndex" type="int">First index in the slice.</param>
            <param name="lastIndex" type="int">Maximum index (inclusive) in the slice.</param>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.SetSlice(ShoNS.Array.IArray{`0},System.Int32,System.Int32)">
            <summary>Sets the slice with the contents of another array.</summary>
            <param name="arrayToCopy">The array to copy.</param>
            <param name="firstIndex" type="int">First index in the slice.</param>
            <param name="lastIndex" type="int">Maximum index (inclusive) in the slice.</param>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.SetSlice(`0,System.Int32,System.Int32)">
            <summary>Sets all elements of the slice to the value.</summary>
            <param name="value">The value to use</param>
            <param name="firstIndex" type="int">First index in the slice.</param>
            <param name="lastIndex" type="int">Maximum index (inclusive) in the slice.</param>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.SetSlice(ShoNS.Array.ArrayBase{`0},System.Int32,System.Int32,System.Int32)">
            <summary>Sets the slice with the contents of another array.</summary>
            <param name="arrayToCopy">The array to copy.</param>
            <param name="firstIndex" type="int">First index in the slice.</param>
            <param name="lastIndex" type="int">Maximum index (inclusive) in the slice.</param>
            <param name="step">Step</param>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.SetSlice(ShoNS.Array.IArray{`0},System.Int32,System.Int32,System.Int32)">
            <summary>Sets the slice with the contents of another array.</summary>
            <param name="arrayToCopy">The array to copy.</param>
            <param name="firstIndex" type="int">First index in the slice.</param>
            <param name="lastIndex" type="int">Last index in the slice.</param>
            <param name="step">Step</param>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.SetSlice(`0,System.Int32,System.Int32,System.Int32)">
            <summary>Sets all elements of the slice to the value.</summary>
            <param name="value">The value to use</param>
            <param name="firstIndex" type="int">First index in the slice.</param>
            <param name="lastIndex" type="int">Last index in the slice.</param>
            <param name="step">Step</param>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.SetSlice(ShoNS.Array.ArrayBase{`0},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Sets the slice with the contents of another array.</summary>
            <param name="arrayToCopy">The array to copy.</param>
            <param name="firstRow" type="int">First row number in the slice.</param>
            <param name="lastRow" type="int">Maximum row number (inclusive) in the slice.</param>
            <param name="firstCol" type="int">First column number in the slice.</param>
            <param name="lastCol" type="int">Maximum column number (inclusive) in the slice.</param>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.SetSlice(ShoNS.Array.IArray{`0},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Sets the slice with the contents of another array.</summary>
            <param name="arrayToCopy">The array to copy.</param>
            <param name="firstRow" type="int">First row number in the slice.</param>
            <param name="lastRow" type="int">Last row number (inclusive) in the slice.</param>
            <param name="firstCol" type="int">First column number in the slice.</param>
            <param name="lastCol" type="int">Last column number (inclusive) in the slice.</param>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.SetSlice(`0,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Sets all elements of the slice to the value.</summary>
            <param name="value">The value to use</param>
            <param name="firstRow" type="int">First row number in the slice.</param>
            <param name="lastRow" type="int">Last row number (inclusive) in the slice.</param>
            <param name="firstCol" type="int">First column number in the slice.</param>
            <param name="lastCol" type="int">Last column number (inclusive) in the slice.</param>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.SetSlice(ShoNS.Array.ArrayBase{`0},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Sets the slice with the contents of another array.</summary>
            <param name="arrayToCopy">The array to copy.</param>
            <param name="firstRow" type="int">First row number in the slice.</param>
            <param name="lastRow" type="int">Maximum row number (inclusive) in the slice.</param>
            <param name="stepRow" type="int">Row step size.</param>
            <param name="firstCol" type="int">First column number in the slice.</param>
            <param name="lastCol" type="int">Maximum column number (inclusive) in the slice.</param>
            <param name="stepCol" type="int">Column step size.</param>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.SetSlice(ShoNS.Array.IArray{`0},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Sets the slice with the contents of another array.</summary>
            <param name="arrayToCopy">The array to copy.</param>
            <param name="firstRow" type="int">First row number in the slice.</param>
            <param name="lastRow" type="int">Maximum row number (inclusive) in the slice.</param>
            <param name="stepRow" type="int">Row step size.</param>
            <param name="firstCol" type="int">First column number in the slice.</param>
            <param name="lastCol" type="int">Maximum column number (inclusive) in the slice.</param>
            <param name="stepCol" type="int">Column step size.</param>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.SetSlice(`0,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Sets all elements of the slice to the input value.</summary>
            <param name="value">The value to use</param>
            <param name="firstRow" type="int">First row number in the slice.</param>
            <param name="lastRow" type="int">Maximum row number (inclusive) in the slice.</param>
            <param name="stepRow" type="int">Row step size.</param>
            <param name="firstCol" type="int">First column number in the slice.</param>
            <param name="lastCol" type="int">Maximum column number (inclusive) in the slice.</param>
            <param name="stepCol" type="int">Column step size.</param>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.SetSlice(ShoNS.Array.ArrayBase{`0},ShoNS.Array.Slice[])">
            <summary>Sets the slice with the contents of another array.</summary>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.SetSlice(ShoNS.Array.IArray{`0},ShoNS.Array.Slice[])">
            <summary>Sets the slice with the contents of another array.</summary>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.SetSlice(`0,ShoNS.Array.Slice[])">
            <summary>Sets all elements of the slice to the input value.</summary>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.SetArrayEntries(`0,System.Collections.Generic.IEnumerable{ShoNS.Array.IArrayEntry})">
            <summary>Sets all the array entries to the input value.</summary>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.ShoNS#Array#IArrayEnumerable{TYPE}#AlongDim(System.Int32)">
            <summary>Returns an IEnumerable object that can be used to iterate over the given dimension</summary>
            <param name="dim">Along which dimension</param>        
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.Deepen">
            <summary>Deepens the backing storage of the array.</summary>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.ToSystemArray">
            <summary>Creates a copy of the array as a two-dimensional System.Array.</summary>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.ToFlatSystemArray">
            <summary>Creates a copy of the array as a one-dimensional System.Array.</summary>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.SameSize(ShoNS.Array.IArrayBase)">
            <summary>Returns true if the arrays are of the same size.</summary>
            <param name="arrToCompare" type="IArrayBase">The array to compare.</param>
        </member>
        <member name="M:ShoNS.Array.ArrayBase`1.GetLength(System.Int32)">
            <summary> Returns the size of the given dimension.</summary>
        </member>
        <member name="P:ShoNS.Array.ArrayBase`1.Item(System.Int32)">
            <summary>Gets and sets the value of the array at the given index.</summary>
            <param name="index" type="int">The index of the element to set or get.</param>
            <remarks>This property is only implemented for vectors.</remarks>
        </member>
        <member name="P:ShoNS.Array.ArrayBase`1.Item(System.Int32,System.Int32)">
            <summary>Gets and sets the value of the array at the given row and column indices.</summary>
            <param name="index0" type="int">The index of the row to set or get.</param>
            <param name="index1" type="int">The index of the column to set or get.</param>
        </member>
        <member name="P:ShoNS.Array.ArrayBase`1.Item(System.Int32[])">
            <summary>Gets and sets the value of the array at the given indices.</summary>
        </member>
        <member name="P:ShoNS.Array.ArrayBase`1.Item(ShoNS.Array.IArrayEntry)">
            <summary>Gets and sets the value of the array at the given entry.</summary>
        </member>
        <member name="P:ShoNS.Array.ArrayBase`1.Elements">
            <summary>Returns an IEnumerable object that can be used to iterate over the elements of the array.</summary>
        </member>
        <member name="P:ShoNS.Array.ArrayBase`1.Length">
            <summary>Returns the number of elements in the array, if vector, otherwise throws exception.</summary>
        </member>
        <member name="P:ShoNS.Array.ArrayBase`1.NumElements">
            <summary>Returns the number of elements in the array.</summary>
        </member>
        <member name="P:ShoNS.Array.ArrayBase`1.NumDim">
            <summary>Returns the number of dimensions in the array.</summary>
        </member>
        <member name="P:ShoNS.Array.ArrayBase`1.Size">
            <summary>Returns the sizes of the array dimensions in an array.</summary>
        </member>
        <member name="P:ShoNS.Array.ArrayBase`1.size0">
            <summary>Returns the size of the first dimension.</summary>
        </member>
        <member name="P:ShoNS.Array.ArrayBase`1.size1">
            <summary>Returns the size of the second dimension.</summary>
        </member>
        <member name="P:ShoNS.Array.ArrayBase`1.Count">
            <summary>Returns the number of elements in the array.</summary>
        </member>
        <member name="M:ShoNS.Array.BoolArray.Zeros(System.Int32)">
            <summary>Creates a BoolArray of the given length, filled with the value false.</summary>
            <param name="length">Vector length</param>        
        </member>
        <member name="M:ShoNS.Array.BoolArray.Zeros(System.Int32,System.Int32)">
            <summary>Creates a BoolArray of size0 x size1, filled with the value false.</summary>
            <param name="size0">Number of rows</param>
            <param name="size1">Number of columns</param>           
        </member>
        <member name="M:ShoNS.Array.BoolArray.Zeros(System.Int32[])">
             <summary>Creates a multidimensional BoolArray of the given size, filled with false.</summary>
            <param name="sizes">Sizes</param>        
        </member>
        <member name="M:ShoNS.Array.BoolArray.FromFile(System.String)">
            <summary>Creates an array from a file, using binary serialization.</summary>
            <param name="fileName" type="String">Name of file from which to create the array.</param>    
        </member>
        <member name="M:ShoNS.Array.BoolArray.FromStream(System.IO.Stream)">
            <summary>Creates an array from a stream, using binary serialization.</summary>
            <param name="stream" type="System.IO.Stream">Stream from which to create the array.</param>  
        </member>
        <member name="M:ShoNS.Array.BoolArray.From(ShoNS.Array.ArrayBase{System.Boolean})">
            <summary>Creates an array (deep copy) from another array.</summary>
        </member>
        <member name="M:ShoNS.Array.BoolArray.FromShallow(ShoNS.Array.ArrayBase{System.Boolean})">
            <summary>Creates an array (shallow copy) from another array.</summary>
        </member>
        <member name="M:ShoNS.Array.BoolArray.From(System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>Creates a deep copy from an IEnumerable object.</summary>
            <param name="input">Enumerable to copy</param>         
        </member>
        <member name="M:ShoNS.Array.BoolArray.From(System.Collections.IEnumerable)">
            <summary>Creates a deep copy from an IEnumerable object.</summary>
            <param name="input">Enumerable to copy</param>         
        </member>
        <member name="M:ShoNS.Array.BoolArray.#ctor(System.Int32)">
            <summary>Creates a BoolArray of the given length, filled with the value false.</summary>
            <param name="length">Length of vector</param>        
        </member>
        <member name="M:ShoNS.Array.BoolArray.#ctor(System.Int32,System.Int32)">
            <summary>Creates a BoolArray of size0 x size1, filled with the value false.</summary>
            <param name="size0">Number of rows</param>
            <param name="size1">Number columns</param>          
        </member>
        <member name="M:ShoNS.Array.BoolArray.#ctor(System.Int32[])">
            <summary>Creates a multidimensional BoolArray of the given size, filled with false.</summary>
        </member>
        <member name="M:ShoNS.Array.BoolArray.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization.</summary>
        </member>
        <member name="M:ShoNS.Array.BoolArray.Squeeze">
            <summary>Squeezes out the size 1 dimensions (shallowly).</summary>
        </member>
        <member name="M:ShoNS.Array.BoolArray.AlongDim(System.Int32)">
            <summary>Returns an IEnumerable object that can be used to iterate along a dimension of an array.</summary>
            <param name="dim">Along which dimension</param>        
        </member>
        <member name="M:ShoNS.Array.BoolArray.RowElements(System.Int32)">
            <summary>Returns an IEnumerable object that can be used to iterate over the elements of a given row.</summary>
            <param name="rowIndex" type="int">The index of the row to return.</param>
        </member>
        <member name="M:ShoNS.Array.BoolArray.ColumnElements(System.Int32)">
            <summary>Returns an IEnumerable object that can be used to iterate over the elements of a given column.</summary>
            <param name="colIndex" type="int">The index of the row to return.</param>
        </member>
        <member name="M:ShoNS.Array.BoolArray.TransposeDeep">
            <summary>Transposes the 1st and 2nd dimensions of the array, making a deep copy.</summary>
            <returns>Returns a deep copy of transposed array.</returns>
        </member>
        <member name="M:ShoNS.Array.BoolArray.Transpose">
            <summary>Transposes the 1st and 2nd dimensions of the array, making a shallow copy.</summary>
            <returns>Returns a shallow copy of transposed array.</returns>
        </member>
        <member name="M:ShoNS.Array.BoolArray.CopyDeep">
            <summary>Makes a deep copy of the array; the new array has its own storage.</summary>
            <returns>Returns a deep copy the array.</returns>
        </member>
        <member name="M:ShoNS.Array.BoolArray.CopyShallow">
            <summary>Makes a shallow copy of the array; the new array shares its storage with the original array.</summary>
            <returns>Returns a shallow copy the array.</returns>
        </member>
        <member name="M:ShoNS.Array.BoolArray.CopyTo(ShoNS.Array.BoolArray)">
            <summary>Copies the contents of this array to the specified array.</summary>
            <param name="destArray">Destination array</param>
        </member>
        <member name="M:ShoNS.Array.BoolArray.ToVector">
            <summary>Makes a vector, copying the elements in row-column order.</summary>
        </member>
        <member name="M:ShoNS.Array.BoolArray.GetSliceDeep(System.Int32,System.Int32)">
            <summary>Creates a subarray (deep copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndex" type="int">Maximum index (inclusive) in the slice.</param>  
        </member>
        <member name="M:ShoNS.Array.BoolArray.GetSliceDeep(System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (deep copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndex" type="int">Maximum index (inclusive) in the slice.</param>  
            <param name="step">Step</param>
        </member>
        <member name="M:ShoNS.Array.BoolArray.GetSlice(System.Int32,System.Int32)">
            <summary>Creates a subarray (shallow copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndex" type="int">Maximum index (inclusive) in the slice.</param>  
        </member>
        <member name="M:ShoNS.Array.BoolArray.GetSlice(System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (shallow copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndex" type="int">Maximum index (inclusive) in the slice.</param>  
            <param name="step">Step</param>
        </member>
        <member name="M:ShoNS.Array.BoolArray.GetSliceDeep(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (deep copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRow" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastCol" type="int">Maximum column number (inclusive) in the slice.</param>          
        </member>
        <member name="M:ShoNS.Array.BoolArray.GetSlice(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (shallow copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRow" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastCol" type="int">Maximum column number (inclusive) in the slice.</param>          
        </member>
        <member name="M:ShoNS.Array.BoolArray.GetSliceDeep(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (deep copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRow" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="stepRow" type="int">Row step size.</param> 
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastCol" type="int">Maximum column number (inclusive) in the slice.</param>          
            <param name="stepCol" type="int">Column step size.</param> 
        </member>
        <member name="M:ShoNS.Array.BoolArray.GetSlice(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (shallow copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRow" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="stepRow" type="int">Row step size.</param> 
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastCol" type="int">Maximum column number (inclusive) in the slice.</param>          
            <param name="stepCol" type="int">Column step size.</param> 
        </member>
        <member name="M:ShoNS.Array.BoolArray.GetSliceDeep(ShoNS.Array.Slice[])">
            <summary>Creates a subarray (deep copy). If your slice contains a list of indices, you must call this method.</summary>
            <param name="slices">Slices to get</param>
        </member>
        <member name="M:ShoNS.Array.BoolArray.GetSlice(ShoNS.Array.Slice[])">
            <summary>Creates a subarray (shallow copy). If your slice contains a list of indices, call GetSliceDeep instead.</summary>
            <param name="slices">Slices to get</param>
        </member>
        <member name="M:ShoNS.Array.BoolArray.GetArrayEntries(System.Collections.Generic.IEnumerable{ShoNS.Array.IArrayEntry})">
            <summary>Creates an array (deep copy) from the array entries.</summary>
            <param name="arrayEntries">Enumerable of array entries to get</param>        
        </member>
        <member name="M:ShoNS.Array.BoolArray.VertStack(System.Collections.IEnumerable[])">
            <summary>Stacks the inputs vertically.</summary>
            <param name="items">Items to stack</param>           
        </member>
        <member name="M:ShoNS.Array.BoolArray.HorizStack(System.Collections.IEnumerable[])">
            <summary>Stacks the inputs horizontally.</summary>
            <param name="items">Items to stack</param>           
        </member>
        <member name="M:ShoNS.Array.BoolArray.SameValues(ShoNS.Array.BoolArray)">
            <summary>Determines if two arrays are the same.</summary>
            <param name="arrayToCompare">Array to compare</param>
            <returns>true if the arrays are the same; false if different.</returns>
        </member>
        <member name="M:ShoNS.Array.BoolArray.SameValues(ShoNS.Array.SparseBoolArray)">
            <summary>Determines if two arrays are the same.</summary>
            <returns>true if the arrays are the same; false if different.</returns>
        </member>
        <member name="P:ShoNS.Array.BoolArray.Rows">
            <summary>Returns an IEnumerable object that can be used to iterate over the rows of the matrix.</summary>
        </member>
        <member name="P:ShoNS.Array.BoolArray.Cols">
            <summary>Returns an IEnumerable object that can be used to iterate over the columns of the matrix.</summary>
        </member>
        <member name="P:ShoNS.Array.BoolArray.T">
            <summary>Transposes the 1st and 2nd dimensions of the array, making a shallow copy.</summary>
            <returns>Returns a shallow copy of transposed array.</returns>
        </member>
        <member name="P:ShoNS.Array.BoolArray.Diagonal">
            <summary>Returns the main diagonal of the array as a vectory or sets the main diagonal to the inputObject vector.</summary>
        </member>
        <member name="T:ShoNS.Array.CholeskyBase`1">
            <summary>The Cholesky base class.</summary>
        </member>
        <member name="T:ShoNS.Array.Cholesky">
            <summary>This class performs a Cholesky decomposition for a double-precision floating point matrix.</summary>
        </member>
        <member name="M:ShoNS.Array.Cholesky.TryCreate(ShoNS.Array.DoubleArray)">
            <summary>Create a Cholesky object without throwing an exception. If this fails, null is returned.</summary>
            <param name="inputMatrix">Input matrix to decompose</param>        
        </member>
        <member name="M:ShoNS.Array.Cholesky.#ctor(ShoNS.Array.DoubleArray)">
            <summary>Compute the Cholesky decomposition for the input matrix.</summary>
            <param name="inputMatrix">Input matrix to decompose</param>
        </member>
        <member name="M:ShoNS.Array.Cholesky.Solve(ShoNS.Array.DoubleArray)">
            <summary>Solves the system: A*x = B</summary>
            <param name="matrixRight">Array on the right side</param>
            <returns>The solution, as a DoubleArray.</returns>
        </member>
        <member name="P:ShoNS.Array.Cholesky.U">
            <summary>The upper triangular array</summary>
        </member>
        <member name="T:ShoNS.Array.CholeskyFloat">
            <summary>This class performs a Cholesky decomposition for a single-precsion floating point matrix.</summary>
        </member>
        <member name="M:ShoNS.Array.CholeskyFloat.TryCreate(ShoNS.Array.FloatArray)">
            <summary>Create a Cholesky object without throwing an exception. If this fails, null is returned.</summary>
            <param name="inputMatrix">Input matrix to decompose</param>        
        </member>
        <member name="M:ShoNS.Array.CholeskyFloat.#ctor(ShoNS.Array.FloatArray)">
            <summary>Compute the Cholesky decomposition for the input matrix.</summary>
            <param name="inputMatrix">Input matrix to decompose</param>        
        </member>
        <member name="M:ShoNS.Array.CholeskyFloat.Solve(ShoNS.Array.FloatArray)">
            <summary>Solves the system: A*x = B</summary>
            <param name="matrixRight">Array on the right side</param>
            <returns>The solution, as a FloatArray.</returns>
        </member>
        <member name="P:ShoNS.Array.CholeskyFloat.U">
            <summary>The upper triangular array</summary>
        </member>
        <member name="T:ShoNS.Array.IOperator`3">
            <summary>An interface that defines how a type does an operation</summary>
            <typeparam name="R">Return type</typeparam>
            <typeparam name="T1">Type of the left argument</typeparam>
            <typeparam name="T2">Type of the right argument</typeparam>
        </member>
        <member name="T:ShoNS.Array.DoubleAdd">
            <summary>Defines how double adds</summary>
        </member>
        <member name="M:ShoNS.Array.DoubleAdd.Op(System.Double,System.Double)">
            <summary>double + double returns a double</summary>
        </member>
        <member name="M:ShoNS.Array.DoubleAdd.Op(System.Double,System.Single)">
            <summary>double + float returns a double</summary>
        </member>
        <member name="M:ShoNS.Array.DoubleAdd.Op(System.Single,System.Double)">
            <summary>float + double returns a double</summary>
        </member>
        <member name="M:ShoNS.Array.DoubleAdd.Op(System.Double,System.Int32)">
            <summary>double + int returns a double</summary>
        </member>
        <member name="M:ShoNS.Array.DoubleAdd.Op(System.Int32,System.Double)">
            <summary>int + double returns a double</summary>
        </member>
        <member name="T:ShoNS.Array.FloatAdd">
            <summary>Defines how float adds</summary>
        </member>
        <member name="M:ShoNS.Array.FloatAdd.Op(System.Single,System.Single)">
            <summary>float + float returns a float</summary>
        </member>
        <member name="M:ShoNS.Array.FloatAdd.Op(System.Single,System.Int32)">
            <summary>float + int returns a float</summary>
        </member>
        <member name="M:ShoNS.Array.FloatAdd.Op(System.Int32,System.Single)">
            <summary>int + float returns a float</summary>
        </member>
        <member name="T:ShoNS.Array.IntAdd">
            <summary>Defines how int adds</summary>
        </member>
        <member name="M:ShoNS.Array.IntAdd.Op(System.Int32,System.Int32)">
            <summary>int + int returns an int</summary>
        </member>
        <member name="T:ShoNS.Array.ComplexAdd">
            <summary>Defines how Complex64 adds</summary>
        </member>
        <member name="M:ShoNS.Array.ComplexAdd.Op(System.Numerics.Complex,System.Numerics.Complex)">
            <summary>Complex64 + Complex64 returns a Complex64</summary>
        </member>
        <member name="M:ShoNS.Array.ComplexAdd.Op(System.Numerics.Complex,System.Double)">
            <summary>Complex64 + double returns a Complex64</summary>
        </member>
        <member name="M:ShoNS.Array.ComplexAdd.Op(System.Double,System.Numerics.Complex)">
            <summary>double + Complex64 returns a Complex64</summary>
        </member>
        <member name="M:ShoNS.Array.ComplexAdd.Op(System.Numerics.Complex,System.Single)">
            <summary>Complex64 + float returns a Complex64</summary>
        </member>
        <member name="M:ShoNS.Array.ComplexAdd.Op(System.Single,System.Numerics.Complex)">
            <summary>float + Complex64 returns a Complex64</summary>
        </member>
        <member name="M:ShoNS.Array.ComplexAdd.Op(System.Numerics.Complex,System.Int32)">
            <summary>Complex64 + int returns a Complex64</summary>
        </member>
        <member name="M:ShoNS.Array.ComplexAdd.Op(System.Int32,System.Numerics.Complex)">
            <summary>int + Complex64 returns a Complex64</summary>
        </member>
        <member name="T:ShoNS.Array.DoubleSubtract">
            <summary>Defines how double subtracts</summary>
        </member>
        <member name="M:ShoNS.Array.DoubleSubtract.Op(System.Double,System.Double)">
            <summary>double - double returns a double</summary>
        </member>
        <member name="M:ShoNS.Array.DoubleSubtract.Op(System.Double,System.Single)">
            <summary>double - float returns a double</summary>
        </member>
        <member name="M:ShoNS.Array.DoubleSubtract.Op(System.Single,System.Double)">
            <summary>float - double returns a double</summary>
        </member>
        <member name="M:ShoNS.Array.DoubleSubtract.Op(System.Double,System.Int32)">
            <summary>double - int returns a double</summary>
        </member>
        <member name="M:ShoNS.Array.DoubleSubtract.Op(System.Int32,System.Double)">
            <summary>int - double returns a double</summary>
        </member>
        <member name="T:ShoNS.Array.FloatSubtract">
            <summary>Defines how float subtracts</summary>
        </member>
        <member name="M:ShoNS.Array.FloatSubtract.Op(System.Single,System.Single)">
            <summary>float - float returns a float</summary>
        </member>
        <member name="M:ShoNS.Array.FloatSubtract.Op(System.Single,System.Int32)">
            <summary>float - int returns a float</summary>
        </member>
        <member name="M:ShoNS.Array.FloatSubtract.Op(System.Int32,System.Single)">
            <summary>int - float returns a float</summary>
        </member>
        <member name="T:ShoNS.Array.IntSubtract">
            <summary>Defines how int subtracts</summary>
        </member>
        <member name="M:ShoNS.Array.IntSubtract.Op(System.Int32,System.Int32)">
            <summary>int - int returns an int</summary>
        </member>
        <member name="T:ShoNS.Array.ComplexSubtract">
            <summary>Defines how Complex64 subtracts</summary>
        </member>
        <member name="M:ShoNS.Array.ComplexSubtract.Op(System.Numerics.Complex,System.Numerics.Complex)">
            <summary>Complex64 - Complex64 returns a Complex64</summary>
        </member>
        <member name="M:ShoNS.Array.ComplexSubtract.Op(System.Numerics.Complex,System.Double)">
            <summary>Complex64 - double returns a Complex64</summary>
        </member>
        <member name="M:ShoNS.Array.ComplexSubtract.Op(System.Double,System.Numerics.Complex)">
            <summary>double - Complex64 returns a Complex64</summary>
        </member>
        <member name="M:ShoNS.Array.ComplexSubtract.Op(System.Numerics.Complex,System.Single)">
            <summary>Complex64 - float returns a Complex64</summary>
        </member>
        <member name="M:ShoNS.Array.ComplexSubtract.Op(System.Single,System.Numerics.Complex)">
            <summary>float - Complex64 returns a Complex64</summary>
        </member>
        <member name="M:ShoNS.Array.ComplexSubtract.Op(System.Numerics.Complex,System.Int32)">
            <summary>Complex64 - int returns a Complex64</summary>
        </member>
        <member name="M:ShoNS.Array.ComplexSubtract.Op(System.Int32,System.Numerics.Complex)">
            <summary>int - Complex64 returns a Complex64</summary>
        </member>
        <member name="T:ShoNS.Array.DoubleMultiply">
            <summary>Defines how double multiplies</summary>
        </member>
        <member name="M:ShoNS.Array.DoubleMultiply.Op(System.Double,System.Double)">
            <summary>double * double returns a double</summary>
        </member>
        <member name="M:ShoNS.Array.DoubleMultiply.Op(System.Double,System.Single)">
            <summary>double * float returns a double</summary>
        </member>
        <member name="M:ShoNS.Array.DoubleMultiply.Op(System.Single,System.Double)">
            <summary>float * double returns a double</summary>
        </member>
        <member name="M:ShoNS.Array.DoubleMultiply.Op(System.Double,System.Int32)">
            <summary>double * int returns a double</summary>
        </member>
        <member name="M:ShoNS.Array.DoubleMultiply.Op(System.Int32,System.Double)">
            <summary>int * double returns a double</summary>
        </member>
        <member name="T:ShoNS.Array.FloatMultiply">
            <summary>Defines how float multiplies</summary>
        </member>
        <member name="M:ShoNS.Array.FloatMultiply.Op(System.Single,System.Single)">
            <summary>float * float returns a float</summary>
        </member>
        <member name="M:ShoNS.Array.FloatMultiply.Op(System.Single,System.Int32)">
            <summary>float * int returns a float</summary>
        </member>
        <member name="M:ShoNS.Array.FloatMultiply.Op(System.Int32,System.Single)">
            <summary>int * float returns a float</summary>
        </member>
        <member name="T:ShoNS.Array.IntMultiply">
            <summary>Defines how int multiplies</summary>
        </member>
        <member name="M:ShoNS.Array.IntMultiply.Op(System.Int32,System.Int32)">
            <summary>int * int returns an int</summary>
        </member>
        <member name="T:ShoNS.Array.ComplexMultiply">
            <summary>Defines how Complex64 multiplies</summary>
        </member>
        <member name="M:ShoNS.Array.ComplexMultiply.Op(System.Numerics.Complex,System.Numerics.Complex)">
            <summary>Complex64 * Complex64 returns a Complex64</summary>
        </member>
        <member name="M:ShoNS.Array.ComplexMultiply.Op(System.Numerics.Complex,System.Double)">
            <summary>Complex64 * double returns a Complex64</summary>
        </member>
        <member name="M:ShoNS.Array.ComplexMultiply.Op(System.Double,System.Numerics.Complex)">
            <summary>double * Complex64 returns a Complex64</summary>
        </member>
        <member name="M:ShoNS.Array.ComplexMultiply.Op(System.Numerics.Complex,System.Single)">
            <summary>Complex64 * float returns a Complex64</summary>
        </member>
        <member name="M:ShoNS.Array.ComplexMultiply.Op(System.Single,System.Numerics.Complex)">
            <summary>float * Complex64 returns a Complex64</summary>
        </member>
        <member name="M:ShoNS.Array.ComplexMultiply.Op(System.Numerics.Complex,System.Int32)">
            <summary>Complex64 * int returns a Complex64</summary>
        </member>
        <member name="M:ShoNS.Array.ComplexMultiply.Op(System.Int32,System.Numerics.Complex)">
            <summary>int * Complex64 returns a Complex64</summary>
        </member>
        <member name="T:ShoNS.Array.DoubleDivide">
            <summary>Defines how double divides</summary>
        </member>
        <member name="M:ShoNS.Array.DoubleDivide.Op(System.Double,System.Double)">
            <summary>double / double returns a double</summary>
        </member>
        <member name="M:ShoNS.Array.DoubleDivide.Op(System.Double,System.Single)">
            <summary>double / float returns a double</summary>
        </member>
        <member name="M:ShoNS.Array.DoubleDivide.Op(System.Single,System.Double)">
            <summary>float / double returns a double</summary>
        </member>
        <member name="M:ShoNS.Array.DoubleDivide.Op(System.Double,System.Int32)">
            <summary>double / int returns a double</summary>
        </member>
        <member name="M:ShoNS.Array.DoubleDivide.Op(System.Int32,System.Double)">
            <summary>int / double returns a double</summary>
        </member>
        <member name="T:ShoNS.Array.FloatDivide">
            <summary>Defines how float divides</summary>
        </member>
        <member name="M:ShoNS.Array.FloatDivide.Op(System.Single,System.Single)">
            <summary>float / float returns a float</summary>
        </member>
        <member name="M:ShoNS.Array.FloatDivide.Op(System.Single,System.Int32)">
            <summary>float / int returns a float</summary>
        </member>
        <member name="M:ShoNS.Array.FloatDivide.Op(System.Int32,System.Single)">
            <summary>int / float returns a float</summary>
        </member>
        <member name="T:ShoNS.Array.IntDivide">
            <summary>Defines how int divides</summary>
        </member>
        <member name="M:ShoNS.Array.IntDivide.Op(System.Int32,System.Int32)">
            <summary>int / int returns an int</summary>
        </member>
        <member name="T:ShoNS.Array.ComplexDivide">
            <summary>Defines how Complex64 divides</summary>
        </member>
        <member name="M:ShoNS.Array.ComplexDivide.Op(System.Numerics.Complex,System.Numerics.Complex)">
            <summary>Complex64 / Complex64 returns a Complex64</summary>
        </member>
        <member name="M:ShoNS.Array.ComplexDivide.Op(System.Numerics.Complex,System.Double)">
            <summary>Complex64 / double returns a Complex64</summary>
        </member>
        <member name="M:ShoNS.Array.ComplexDivide.Op(System.Double,System.Numerics.Complex)">
            <summary>double / Complex64 returns a Complex64</summary>
        </member>
        <member name="M:ShoNS.Array.ComplexDivide.Op(System.Numerics.Complex,System.Single)">
            <summary>Complex64 / float returns a Complex64</summary>
        </member>
        <member name="M:ShoNS.Array.ComplexDivide.Op(System.Single,System.Numerics.Complex)">
            <summary>float / Complex64 returns a Complex64</summary>
        </member>
        <member name="M:ShoNS.Array.ComplexDivide.Op(System.Numerics.Complex,System.Int32)">
            <summary>Complex64 / int returns a Complex64</summary>
        </member>
        <member name="M:ShoNS.Array.ComplexDivide.Op(System.Int32,System.Numerics.Complex)">
            <summary>int / Complex64 returns a Complex64</summary>
        </member>
        <member name="T:ShoNS.Array.SparseDoubleArray">
            <summary>This class implements functionality for a sparse matrix with double-precision floating point elements.</summary>
        </member>
        <member name="T:ShoNS.Array.NumArrayBase`1">
            <summary>This class implements the base functionality for all numerical arrays.</summary>
            <typeparam name="TYPE">Array element type</typeparam>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.#ctor">
            <summary>Required for inheritance.</summary>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.#ctor(ShoNS.Array.IArray{`0})">
            <summary></summary>
            <param name="inputInterfacePtr"></param>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.#ctor(System.Int32)">
            <summary>Creates a vector of the given length, filled with zeros.</summary>
            <param name="length">Length of vector</param>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.#ctor(System.Int32,System.Int32)">
            <summary>Creates a 2d array/matrix of size0 x size1, filled with zeros.</summary>
            <param name="size0">Size of the 1st dimension</param>
            <param name="size1">Size of the 2nd dimension</param>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.#ctor(System.Int32[])">
            <summary>Creates an n-rank array of the given sizes, filled with zeros.</summary>
            <param name="sizes">Sizes of the dimensions</param>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.#ctor(ShoNS.Array.NumArrayBase{`0})">
            <summary>Creates a deep copy of the input array.</summary>
            <param name="inputArray">Array to copy</param>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.#ctor(System.Collections.IEnumerable)">
            <summary>Creates an array from the input enumerable.</summary>
            <param name="input">Input enumerable to copy</param>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>Creates an array from the input enumerable.</summary>
            <param name="input">Input enumerable</param>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.#ctor(System.String)">
            <summary>Creates an array from a file, using binary serialization.</summary>
            <param name="fileName">File to read</param>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.#ctor(System.IO.Stream)">
            <summary>Creates an array from a stream, using binary serialization.</summary>
            <param name="stream">Stream to read</param>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.#ctor(System.String,System.Boolean)">
            <summary>Creates an array from the contents of a binary file.</summary>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.#ctor(System.Collections.IList,System.Collections.IList)">
            <summary>Creates a sparse vector from the index and value lists.</summary>
            <param name="index0List">Indices</param>
            <param name="valueList">Values</param>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.#ctor(System.Int32,System.Collections.IList,System.Collections.IList)">
            <summary>Creates a sparse vector of a given size from the index and value lists.</summary>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.#ctor(System.Collections.IList,System.Collections.IList,System.Boolean)">
            <summary>Creates a sparse vector from the index and value lists, doing a fast insert if useFastInsert = true.</summary>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.#ctor(System.Int32,System.Collections.IList,System.Collections.IList,System.Boolean)">
            <summary>Creates a sparse vector of a given size from the index and value lists, doing a fast insert if useFastInsert = true.</summary>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.#ctor(System.Collections.IList,System.Collections.IList,System.Collections.IList)">
            <summary>Creates a 2d array from the index and value lists.</summary>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.#ctor(System.Int32,System.Int32,System.Collections.IList,System.Collections.IList,System.Collections.IList)">
            <summary>Creates a 2d array from the index and value lists.</summary>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.#ctor(System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Boolean)">
            <summary>Creates a 2d array from the index and value lists, doing a fast insert if useFastInsert = true.</summary>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.#ctor(System.Int32,System.Int32,System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Boolean)">
            <summary>Creates a 2d array from the index and value lists, doing a fast insert if useFastInsert = true.</summary>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.#ctor(System.Int32,ShoNS.Array.SparseStorageFormat)">
            <summary>Creates a vector of the given storage format.</summary>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.#ctor(System.Int32,System.Int32,ShoNS.Array.SparseStorageFormat)">
            <summary>Creates a two-dimensional array of the given storage format.</summary>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.#ctor(System.Int32,System.Int32,System.Single,ShoNS.Array.SparseStorageFormat)">
            <summary>Creates a two-dimensional array of the given storage format.</summary>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.#ctor(ShoNS.Array.NumArrayBase{`0},ShoNS.Array.SparseStorageFormat)">
            <summary>Creates an array from the contents of another array.</summary>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.#ctor(System.Object,ShoNS.Array.SparseStorageFormat)">
            <summary>Creates an array from the contents of an object.</summary>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.#ctor(System.String,ShoNS.Array.SparseFileFormat,System.Boolean,ShoNS.Array.SparseStorageFormat)">
            <summary>Creates a sparse array from a file.</summary>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.Max">
            <summary>Returns the maximum value of the array.</summary>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.Min">
            <summary>Returns the minimum value of the array.</summary>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.MaxIndex">
            <summary>Returns the maximum value of the array.</summary>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.MinIndex">
            <summary>Returns the minimum value of the array.</summary>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.Sum">
            <summary>Returns the sum of all elements of the array.</summary>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.Trace">
            <summary>Computes the trace of the array.</summary>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.Dot(ShoNS.Array.INumArray{`0})">
            <summary>Computes the dot product.</summary>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.FillIdentity">
            <summary>Makes the array into the identity array.</summary>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.FillRandom(System.Random,System.Single)">
            <summary>Fills the array with random values.</summary>
            <param name="rn" type="Random">Random number generator object to use.</param>
            <param name="density" type="float">Ratio of non-zero elements to total number of elements.</param>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.FillRandom(System.Random)">
            <summary>Fills the array with random values.</summary>
            <param name="rn" type="Random">Random number object to use.</param>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.FillRandomInt(System.Random,System.Int32,System.Single)">
            <summary>Fills the array with random integers.</summary>
            <param name="rn" type="Random">Random number generator object to use.</param>
            <param name="maxIntValue" type="int">Maximum integer to use.</param>
            <param name="density" type="float">Ratio of non-zero elements to total number of elements.</param>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.FillRandomInt(System.Random,System.Int32)">
            <summary>Fills the array with random integers.</summary>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.FillValue(`0)">
            <summary>Fills the array with the given value.</summary>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.ElementGT(`0)">
            <summary>Finds all of the entries in this array that are greater than the input value.</summary>
            <returns>An IntArray with elements = 1 or 0. If the element = 1, the array met the condition.</returns>
            <remarks>This method is not implemented for ComplexArray.</remarks>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.ElementGT(ShoNS.Array.NumArrayBase{`0})">
            <summary>Finds all of the entries in this array that are greater than the input array.</summary>
            <returns>An IntArray with elements = 1 or 0. If the element = 1, the array met the condition.</returns>
            <remarks>This method is not implemented for ComplexArray.</remarks>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.ElementGT(ShoNS.Array.IArrayBase)">
            <summary>Finds all of the entries in this array that are greater than the input array.</summary>
            <returns>An IntArray with elements = 1 or 0. If the element = 1, the array met the condition.</returns>
            <remarks>This method is not implemented for ComplexArray.</remarks>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.ElementGE(`0)">
            <summary>Finds all of the entries in this array that are greater or equal to the inputObject value or array.</summary>
            <returns>An IntArray with elements = 1 or 0. If the element = 1, the array met the condition.</returns>
            <remarks>This method is not implemented for ComplexArray.</remarks>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.ElementGE(ShoNS.Array.NumArrayBase{`0})">
            <summary>Finds all of the entries in this array that are greater or equal to the inputObject value or array.</summary>
            <returns>An IntArray with elements = 1 or 0. If the element = 1, the array met the condition.</returns>
            <remarks>This method is not implemented for ComplexArray.</remarks>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.ElementGE(ShoNS.Array.IArrayBase)">
            <summary>Finds all of the entries in this array that are greater or equal to the inputObject value or array.</summary>
            <returns>An IntArray with elements = 1 or 0. If the element = 1, the array met the condition.</returns>
            <remarks>This method is not implemented for ComplexArray.</remarks>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.ElementLT(`0)">
            <summary>Finds all of the entries in this array that are less than the input value.</summary>
            <returns>An IntArray with elements = 1 or 0. If the element = 1, the array on the left side met the condition.</returns>
            <remarks>This method is not implemented for ComplexArray.</remarks>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.ElementLT(ShoNS.Array.NumArrayBase{`0})">
            <summary>Finds all of the entries in this array that are less than the input array.</summary>
            <returns>An IntArray with elements = 1 or 0. If the element = 1, the array on the left side met the condition.</returns>
            <remarks>This method is not implemented for ComplexArray.</remarks>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.ElementLT(ShoNS.Array.IArrayBase)">
            <summary>Finds all of the entries in this array that are less than the input array.</summary>
            <returns>An IntArray with elements = 1 or 0. If the element = 1, the array on the left side met the condition.</returns>
            <remarks>This method is not implemented for ComplexArray.</remarks>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.ElementLE(`0)">
            <summary>Finds all of the entries in this array that are less than or equal to the input value.</summary>
            <returns>An IntArray with elements = 1 or 0. If the element = 1, the array met the condition.</returns>
            <remarks>This method is not implemented for ComplexArray.</remarks>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.ElementLE(ShoNS.Array.NumArrayBase{`0})">
            <summary>Finds all of the entries in this array that are less than or equal to the input array.</summary>
            <returns>An IntArray with elements = 1 or 0. If the element = 1, the array met the condition.</returns>
            <remarks>This method is not implemented for ComplexArray.</remarks>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.ElementLE(ShoNS.Array.IArrayBase)">
            <summary>Finds all of the entries in this array that are less than or equal to the input array.</summary>
            <returns>An IntArray with elements = 1 or 0. If the element = 1, the array met the condition.</returns>
            <remarks>This method is not implemented for ComplexArray.</remarks>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.ElementEQ(`0)">
            <summary>Finds all of the entries in this array that are equal to the input value.</summary>
            <returns>An IntArray with elements = 1 or 0. If the element = 1, the array met the condition.</returns>
            <remarks>This method is not implemented for ComplexArray.</remarks>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.ElementEQ(ShoNS.Array.NumArrayBase{`0})">
            <summary>Finds all of the entries in this array that are equal to the input array.</summary>
            <returns>An IntArray with elements = 1 or 0. If the element = 1, the array met the condition.</returns>
            <remarks>This method is not implemented for ComplexArray.</remarks>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.ElementEQ(ShoNS.Array.IArrayBase)">
            <summary>Finds all of the entries in this array that are equal to the input array.</summary>
            <returns>An IntArray with elements = 1 or 0. If the element = 1, the array met the condition.</returns>
            <remarks>This method is not implemented for ComplexArray.</remarks>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.ElementNE(`0)">
            <summary>Finds all of the entries in this array that are not equal to the input value.</summary>
            <returns>An IntArray with elements = 1 or 0. If the element = 1, the array met the condition.</returns>
            <remarks>This method is not implemented for ComplexArray.</remarks>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.ElementNE(ShoNS.Array.NumArrayBase{`0})">
            <summary>Finds all of the entries in this array that are not equal to the input array.</summary>
            <returns>An IntArray with elements = 1 or 0. If the element = 1, the array met the condition.</returns>
            <remarks>This method is not implemented for ComplexArray.</remarks>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.ElementNE(ShoNS.Array.IArrayBase)">
            <summary>Finds all of the entries in this array that are not equal to the input array.</summary>
            <returns>An IntArray with elements = 1 or 0. If the element = 1, the array met the condition.</returns>
            <remarks>This method is not implemented for ComplexArray.</remarks>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.ElementBetween(`0,`0)">
            <summary>Finds all of the entries in the array that between the inputObject values, inclusive.</summary>
            <returns>An IntArray with elements = 1 or 0. If the element = 1, the array met the condition.</returns>
            <remarks>This method is not implemented for ComplexArray.</remarks>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.op_LessThan(ShoNS.Array.NumArrayBase{`0},`0)">
            <summary>Finds all of the entries in the lefthand array that are less than the righthand value or array.</summary>
            <returns>An IntArray with elements = 1 or 0. If the element = 1, the array on the left side met the condition.</returns>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.op_LessThan(ShoNS.Array.NumArrayBase{`0},ShoNS.Array.NumArrayBase{`0})">
            <summary>Finds all of the entries in the lefthand array that are less than the righthand value or array.</summary>
            <returns>An IntArray with elements = 1 or 0. If the element = 1, the array on the left side met the condition.</returns>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.op_LessThan(ShoNS.Array.NumArrayBase{`0},ShoNS.Array.IArrayBase)">
            <summary>Finds all of the entries in the lefthand array that are less than the righthand value or array.</summary>
            <returns>An IntArray with elements = 1 or 0. If the element = 1, the array on the left side met the condition.</returns>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.op_GreaterThan(ShoNS.Array.NumArrayBase{`0},`0)">
            <summary>Finds all of the entries in the lefthand array that are greater than the righthand value or array.</summary>
            <returns>An IntArray with elements = 1 or 0. If the element = 1, the array on the left side met the condition.</returns>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.op_GreaterThan(ShoNS.Array.NumArrayBase{`0},ShoNS.Array.NumArrayBase{`0})">
            <summary>Finds all of the entries in the lefthand array that are greater than the righthand value or array.</summary>
            <returns>An IntArray with elements = 1 or 0. If the element = 1, the array on the left side met the condition.</returns>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.op_GreaterThan(ShoNS.Array.NumArrayBase{`0},ShoNS.Array.IArrayBase)">
            <summary>Finds all of the entries in the lefthand array that are greater than the righthand value or array.</summary>
            <returns>An IntArray with elements = 1 or 0. If the element = 1, the array on the left side met the condition.</returns>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.op_LessThanOrEqual(ShoNS.Array.NumArrayBase{`0},`0)">
            <summary>Finds all of the entries in the lefthand array that are less or equal to the righthand value or array.</summary>
            <returns>An IntArray with elements = 1 or 0. If the element = 1, the array on the left side met the condition.</returns>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.op_LessThanOrEqual(ShoNS.Array.NumArrayBase{`0},ShoNS.Array.NumArrayBase{`0})">
            <summary>Finds all of the entries in the lefthand array that are less or equal to the righthand value or array.</summary>
            <returns>An IntArray with elements = 1 or 0. If the element = 1, the array on the left side met the condition.</returns>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.op_LessThanOrEqual(ShoNS.Array.NumArrayBase{`0},ShoNS.Array.IArrayBase)">
            <summary>Finds all of the entries in the lefthand array that are less or equal to the righthand value or array.</summary>
            <returns>An IntArray with elements = 1 or 0. If the element = 1, the array on the left side met the condition.</returns>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.op_GreaterThanOrEqual(ShoNS.Array.NumArrayBase{`0},`0)">
            <summary>Finds all of the entries in the lefthand array that are greater or equal to the righthand value or array.</summary>
            <returns>An IntArray with elements = 1 or 0. If the element = 1, the array on the left side met the condition.</returns>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.op_GreaterThanOrEqual(ShoNS.Array.NumArrayBase{`0},ShoNS.Array.NumArrayBase{`0})">
            <summary>Finds all of the entries in the lefthand array that are greater or equal to the righthand value or array.</summary>
            <returns>An IntArray with elements = 1 or 0. If the element = 1, the array on the left side met the condition.</returns>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.op_GreaterThanOrEqual(ShoNS.Array.NumArrayBase{`0},ShoNS.Array.IArrayBase)">
            <summary>Finds all of the entries in the lefthand array that are greater or equal to the righthand value or array.</summary>
            <returns>An IntArray with elements = 1 or 0. If the element = 1, the array on the left side met the condition.</returns>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.PlusEquals(`0)">
            <summary>In-place addition of a value to an array: array += value.</summary>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.MinusEquals(`0)">
            <summary>In-place subtraction of a value from an array: array -= value.</summary>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.TimesEquals(`0)">
            <summary>In-place multiplication of a value and an array: array *= value.</summary>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.DivEquals(`0)">
            <summary>In-place division of an array and value: array /= value.</summary>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.PlusEquals(ShoNS.Array.NumArrayBase{`0})">
            <summary>In-place addition of an array to another array: array += otherArray.</summary>
        </member>
        <member name="M:ShoNS.Array.NumArrayBase`1.MinusEquals(ShoNS.Array.NumArrayBase{`0})">
            <summary>In-place subtraction of an array from another array: array -= otherArray.</summary>
        </member>
        <member name="P:ShoNS.Array.NumArrayBase`1.Finite">
            <summary>Returns true if the array does not contain NaN, or infinity values.</summary>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.Zeros(System.Int32)">
            <summary>Creates a SparseDoubleArray of the given length, filled with zeros.</summary>
            <param name="length">Vector length</param>        
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.Zeros(System.Int32,System.Int32)">
            <summary>Creates a SparseDoubleArray of size0 x size1, filled with zeros.</summary>
            <param name="size0">Number of rows</param>
            <param name="size1">Number of columns</param>           
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.FromFile(System.String)">
            <summary>Creates an array from a file, using binary serialization.</summary>
            <param name="fileName" type="String">Name of file from which to create the array.</param>    
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.FromStream(System.IO.Stream)">
            <summary>Creates an array from a stream, using binary serialization.</summary>
            <param name="stream" type="System.IO.Stream">Stream from which to create the array.</param>  
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.From(ShoNS.Array.NumArrayBase{System.Double})">
             <summary>Creates a matrix (deep copy) from another array or matrix.</summary>
            <param name="input">Array to copy</param>        
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.From(System.Collections.IEnumerable)">
            <summary>Creates a deep copy from an IEnumerable object</summary>
            <param name="input">Enumerable to copy</param>        
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.#ctor(System.Int32)">
            <summary>Creates a SparseDoubleArray of the given length, filled with zeros.</summary>
            <param name="length">Vector length</param>        
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.#ctor(System.Int32,System.Int32)">
            <summary>Creates a SparseDoubleArray of size0 x size1, filled with zeros.</summary>
            <param name="size0">Number of rows</param>
            <param name="size1">Number of columns</param>           
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.#ctor(ShoNS.Array.SparseDoubleArray,ShoNS.Array.SparseStorageFormat)">
            <summary>Creates a matrix from the input matrix.</summary>
            <param name="inputMatrix" type="DoubleArray">Input matrix from which to create the output matrix.</param>  
            <param name="storageFormat" type="SparseStorageFormat">Storage format of the output sparse matrix.</param>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.#ctor(ShoNS.Array.DoubleArray,ShoNS.Array.SparseStorageFormat)">
            <summary>Creates a matrix from the input matrix.</summary>
            <param name="inputMatrix" type="DoubleArray">Input matrix from which to create the output matrix.</param>  
            <param name="storageFormat" type="SparseStorageFormat">Storage format of the output sparse matrix.</param>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.#ctor(System.Int32,ShoNS.Array.SparseStorageFormat)">
            <summary>Creates a one-dimensional matrix.</summary>
            <param name="size" type="int">Number of elements in the matrix.</param> 
            <param name="storageFormat" type="SparseStorageFormat">Storage format of the sparse matrix.</param>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.#ctor(System.Int32,System.Int32,ShoNS.Array.SparseStorageFormat)">
            <summary>Creates a two-dimensional matrix.</summary>
            <param name="size0" type="int">Number of rows in the matrix.</param> 
            <param name="size1" type="int">Number of columns in the matrix.</param> 
            <param name="storageFormat" type="SparseStorageFormat">Storage format of the sparse matrix.</param>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.#ctor(System.Int32,System.Int32,System.Single,ShoNS.Array.SparseStorageFormat)">
            <summary>Creates a two-dimensional matrix.</summary>
            <param name="size0" type="int">Number of rows in the matrix.</param> 
            <param name="size1" type="int">Number of columns in the matrix.</param> 
            <param name="density" type="float">Expected approximate ratio of non-zeros to zeros.</param>
            <param name="storageFormat" type="SparseStorageFormat">Storage format of the sparse matrix.</param>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.#ctor(System.Object,ShoNS.Array.SparseStorageFormat)">
            <summary>Creates a matrix from the contents of an object.</summary>
            <param name="inputObject" type="Object">Object from which to create the matrix.</param>  
            <param name="storageFormat" type="SparseStorageFormat">Storage format of the sparse matrix.</param>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.#ctor(System.Collections.IList,System.Collections.IList)">
            <summary>Creates a matrix from the index and value lists.</summary>
            <param name="index0List">The indices to set.</param>
            <param name="valueList">The corresponding values.</param>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.#ctor(System.Int32,System.Collections.IList,System.Collections.IList)">
            <summary>Creates a matrix from the index and value lists.</summary>
            <param name="size0">The size of the result.</param>
            <param name="index0List">The indices to set.</param>
            <param name="valueList">The corresponding values.</param>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.#ctor(System.Collections.IList,System.Collections.IList,System.Boolean)">
            <summary>Creates a vector from index and value lists</summary>
            <param name="index0List">Indices</param>
            <param name="valueList">Values</param>
            <param name="useFastInsert">If true, the list of indices is already sorted</param>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.#ctor(System.Int32,System.Collections.IList,System.Collections.IList,System.Boolean)">
            <summary>Creates a vector from index and value lists</summary>
            <param name="size0"></param>
            <param name="index0List">Indices</param>
            <param name="valueList">Values</param>
            <param name="useFastInsert">If true, the list of indices is already sorted</param>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.#ctor(System.Collections.IList,System.Collections.IList,System.Collections.IList)">
            <summary>Creates a matrix from index and value lists</summary>
            <param name="index0List">Row indices</param>
            <param name="index1List">Column indices</param>
            <param name="valueList">Values</param>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.#ctor(System.Int32,System.Int32,System.Collections.IList,System.Collections.IList,System.Collections.IList)">
            <summary>Creates a matrix from index and value lists</summary>
            <param name="size0">Number of rows</param>
            <param name="size1">Number of columns</param>
            <param name="index0List">Row indices</param>
            <param name="index1List">Column indices</param>
            <param name="valueList">Values</param>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.#ctor(System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Boolean)">
            <summary>Creates a matrix from index and value lists</summary>
            <param name="index0List">Row indices</param>
            <param name="index1List">Column indices</param>
            <param name="valueList">Values</param>
            <param name="useFastInsert">If true, the list of indices is already sorted</param>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.#ctor(System.Int32,System.Int32,System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Boolean)">
            <summary>Creates a matrix from index and value lists</summary>
            <param name="size0">Number of rows</param>
            <param name="size1">Number of columns</param>
            <param name="index0List">Row indices</param>
            <param name="index1List">Column indices</param>
            <param name="valueList">Values</param>
            <param name="useFastInsert">If true, the list of indices is already sorted</param>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.#ctor(System.String,ShoNS.Array.SparseFileFormat,System.Boolean,ShoNS.Array.SparseStorageFormat)">
            <summary>Creates a matrix from index and value lists</summary>
            <param name="fileName">Name of file</param>
            <param name="fileFormat">File format</param>
            <param name="zeroIndexing">If true, uses zero-based indexing</param>
            <param name="storageFormat">Storage format</param>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.SameValues(ShoNS.Array.SparseDoubleArray,System.Double,System.Double)">
            <summary>Determines if two matrices are the same within the given tolerance.</summary>
            <param name="matrixToCompare" type="SparseDoubleArray">Matrix to compare.</param>
            <param name="relToler" type="double">Relative tolerance.</param>
            <param name="absToler" type="double">Absolute tolerance.</param>
            <returns>true if the matrices are the same; false if different.</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.SameValues(ShoNS.Array.SparseDoubleArray)">
            <summary>Determines if two matrices are exactly the same.</summary>
            <param name="matrixToCompare" type="DoubleArray">Matrix to compare.</param>
            <returns>true if the matrices are the same; false if different.</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.SameValues(ShoNS.Array.DoubleArray,System.Double,System.Double)">
            <summary>Determines if two matrices are the same within the given tolerance.</summary>
            <param name="matrixToCompare" type="SparseDoubleArray">Matrix to compare.</param>
            <param name="relToler" type="double">Relative tolerance.</param>
            <param name="absToler" type="double">Absolute tolerance.</param>
            <returns>true if the matrices are the same; false if different.</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.SameValues(ShoNS.Array.DoubleArray)">
            <summary>Determines if two matrices are exactly the same.</summary>
            <param name="matrixToCompare" type="DoubleArray">Matrix to compare.</param>
            <returns>true if the matrices are the same; false if different.</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.AlongDim(System.Int32)">
            <summary>Returns an IEnumerable object that can be used to iterate along a dimension of a matrix.</summary>
            <param name="dim">Along which dimension</param>        
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.RowElements(System.Int32)">
            <summary>Returns an IEnumerable object that can be used to iterate over the elements of a given row.</summary>
            <param name="rowIndex" type="int">The index of the row to return.</param>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.ColumnElements(System.Int32)">
            <summary>Returns an IEnumerable object that can be used to iterate over the elements of a given column.</summary>
            <param name="colIndex" type="int">The index of the row to return.</param>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.TransposeDeep">
            <summary>Transposes the 1st and 2nd dimensions of the matrix, making a deep copy.</summary>
            <returns>Returns a deep copy of transposed matrix.</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.Transpose">
            <summary>Transposes the 1st and 2nd dimensions of the matrix, making a shallow copy.</summary>
            <returns>Returns a shallow copy of transposed matrix.</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.CopyDeep">
            <summary>Makes a deep copy of the matrix; the new matrix has its own storage.</summary>
            <returns>Returns a deep copy the matrix.</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.CopyShallow">
            <summary>Makes a shallow copy of the matrix; the new matrix shares its storage with the original matrix.</summary>
            <returns>Returns a shallow copy the matrix.</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.ToVector">
            <summary>Makes a vector, copying the elements in row-column order.</summary>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.GetSlice(System.Int32,System.Int32)">
            <summary>Creates a submatrix (shallow copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndexInclusive" type="int">Maximum index (inclusive) in the slice.</param>  
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.GetSliceDeep(System.Int32,System.Int32)">
            <summary>Creates a submatrix (deep copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndexInclusive" type="int">Maximum index (inclusive) in the slice.</param>  
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.GetSlice(System.Int32,System.Int32,System.Int32)">
            <summary>Creates a submatrix (shallow copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndexInclusive" type="int">Maximum index (inclusive) in the slice.</param>  
            <param name="step">Step</param>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.GetSliceDeep(System.Int32,System.Int32,System.Int32)">
            <summary>Creates a submatrix (deep copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndexInclusive" type="int">Maximum index (inclusive) in the slice.</param>  
            <param name="step">Step</param>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.GetSlice(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a submatrix (shallow copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRowInclusive" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastColInclusive" type="int">Maximum column number (inclusive) in the slice.</param>          
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.GetSliceDeep(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a submatrix (deep copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRowInclusive" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastColInclusive" type="int">Maximum column number (inclusive) in the slice.</param>          
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.GetSliceDeep(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a submatrix (deep copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRowInclusive" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="stepRow" type="int">Row step size.</param> 
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastColInclusive" type="int">Maximum column number (inclusive) in the slice.</param>          
            <param name="stepCol" type="int">Column step size.</param> 
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.GetSlice(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a submatrix (shallow copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRowInclusive" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="stepRow" type="int">Row step size.</param> 
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastColInclusive" type="int">Maximum column number (inclusive) in the slice.</param>          
            <param name="stepCol" type="int">Column step size.</param> 
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.GetSliceDeep(ShoNS.Array.Slice[])">
            <summary>Creates a submatrix (deep copy).</summary>
            <param name="slices">Slices to get</param>        
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.GetSlice(ShoNS.Array.Slice[])">
            <summary>Creates a submatrix (shallow copy).</summary>
            <param name="slices">Slices to get</param>       
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.GetArrayEntries(System.Collections.Generic.IEnumerable{ShoNS.Array.IArrayEntry})">
            <summary>Creates an array (deep copy) from the array entries.</summary>
            <param name="arrayEntries">Enumerable of array entries to get</param>   
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.GetColSparse(System.Int32)">
            <summary>Returns a column in a sparse vector.</summary>
            <param name="colIndex" type="int">The index of the column to retrieve.</param>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.GetColsSparse(System.Collections.Generic.IList{System.Int32})">
            <summary>Returns one or more columns in a new sparse matrix.</summary>
            <param name="colsToGet">List of column indices to retrieve.</param>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.GetRowSparse(System.Int32)">
            <summary>Returns a row in a sparse vector.</summary>
            <param name="rowIndex" type="int">The index of the row to retrieve.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.GetRowsSparse(System.Collections.Generic.IList{System.Int32})">
            <summary>Returns one or more rows in a new sparse matrix.</summary>
            <param name="rowsToGet">List of row indices to retrieve</param>     
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.AccumulateValue(System.Int32,System.Int32,System.Double)">
            <summary>Used to add or change an element in a sparse matrix.</summary>
            <param name="rowIndex" type="int">The row index of the element.</param>         
            <param name="colIndex" type="int">The column index of the element.</param>         
            <param name="value" type="Object">The value to set.</param>         
            <remarks>The value is not saved to the matrix until CommitValues is called.</remarks>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.AccumulateValue(System.Int32,System.Double)">
            <summary>Used to add or change an element in a 1D sparse matrix.</summary>
            <param name="index" type="int">The index of the element.</param>         
            <param name="value" type="Object">The value to set.</param>         
            <remarks>The value is not saved to the matrix until CommitValues is called.</remarks>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.ColumnLength(System.Int32)">
            <summary>Returns the number of set items in the given column.</summary>
            <param name="colIndex" type="int">The index of the column to retrieve.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.CommitValues">
            <summary>Commits the values added by AccumulateValue.</summary>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.GetCellIndex(System.Int32,System.Int32)">
            <summary>Returns the cell index corresponding to the given matrix indices, returns -1 for unset elements.</summary>
            <param name="rowIndex">Row index</param>
            <param name="colIndex">Column index</param>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.GetCellValue(System.Int32)">
            <summary>Returns the value of the matrix at the given cell index.</summary>
            <param name="cellIndex" type="int">The index of the cell to retrieve.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.RowLength(System.Int32)">
            <summary>Returns the number of set items in the given row.</summary>
            <param name="rowIndex" type="int">The index of the row to retrieve.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.RowElementColumns(System.Int32)">
            <summary>Returns a list of the column indices of the set items in the given row.</summary>
            <param name="rowIndex">Row index</param>            
            <exception cref="T:System.NotImplementedException">Thrown when array not in CSR format</exception>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.RowElementValues(System.Int32)">
            <summary>Returns a list of the values of the set items in the given row.</summary>
            <param name="rowIndex">Row index</param>            
            <exception cref="T:System.NotImplementedException">Thrown when array not in CSR format</exception>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.ColumnElementRows(System.Int32)">
            <summary>Returns a list of the row indices of the set items in the given column.</summary>
            <param name="colIndex">Column index</param>            
            <exception cref="T:System.NotImplementedException">Thrown when array not in CSC format</exception>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.ColumnElementValues(System.Int32)">
            <summary>Returns a list of the values of the set items in the given column.</summary>
            <param name="colIndex">Column index</param>            
            <exception cref="T:System.NotImplementedException">Thrown when array not in CSC format</exception>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.SwapRows(System.Int32,System.Int32)">
            <summary>Swaps the two rows.</summary>
            <param name="rowIndex1" type="int">The index of the first row to swap.</param>         
            <param name="rowIndex2" type="int">The index of the second row to swap.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.RemoveZeros">
            <summary>Removes zero entries.</summary>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.ImportFromList(System.Collections.IList,System.Collections.IList)">
            <summary>Loads the 1D sparse matrix from a pair of lists.</summary>
            <param name="index0List" type="IList">The list of indices in Coordinate format.</param>         
            <param name="inputValueList" type="IList">The list of corresponding values.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.ImportFromList(System.Collections.IList,System.Collections.IList,System.Boolean)">
            <summary>Loads the 1D sparse matrix from a pair of lists in specific sort-order.</summary>
            <param name="index0List" type="IList">The list of indices.</param>         
            <param name="inputValueList" type="IList">The list of corresponding values.</param>         
            <param name="sortedInput" type="bool">The input list is sorted.</param>     
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.ImportFromList(System.Collections.IList,System.Collections.IList,System.Collections.IList)">
            <summary>Loads the 2D sparse matrix from a triplet of lists.</summary>
            <param name="index0List" type="IList">The list of row indices in Coordinate format.</param> 
            <param name="index1List" type="IList">The list of corresponding column indices in Coordinate format.</param> 
            <param name="inputValueList" type="IList">The list of corresponding values.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.ImportFromList(System.Collections.IList,System.Collections.IList,System.Collections.IList,ShoNS.Array.SortOrder)">
            <summary>Loads the 2D sparse matrix from a triplet of lists in specific sort-order.</summary>
            <param name="index0List" type="IList">The first list of indices.</param>         
            <param name="index1List" type="IList">The second list of indices.</param>         
            <param name="inputValueList" type="IList">The list of corresponding values.</param>         
            <param name="inputOrder" type="SortOrder">The linear sort order of input lists.</param> 
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.ExportToList(System.Collections.IList@,System.Collections.IList@)">
            <summary>Constructs pair of lists from the 1D sparse matrix.</summary>
            <param name="index0List" type="IList">The list of indices in Coordinate format.</param>         
            <param name="outputValueList" type="IList">The list of corresponding values.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.ExportToList(System.Collections.IList@,System.Collections.IList@,System.Collections.IList@)">
            <summary>Constructs triplet of lists from the 2D sparse matrix.</summary>
            <param name="index0List" type="IList">The list of row indices in Coordinate format.</param> 
            <param name="index1List" type="IList">The list of corresponding column indices in Coordinate format.</param> 
            <param name="outputValueList" type="IList">The list of corresponding values.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.ExportToList(System.Collections.IList@,System.Collections.IList@,System.Collections.IList@,ShoNS.Array.SortOrder)">
            <summary>Constructs triplet of lists in specific sort-order from the 2D sparse matrix.</summary>
            <param name="index0List">The first list of indices.</param>         
            <param name="index1List">The second list of indices.</param>         
            <param name="outputValueList">The list of corresponding values.</param>         
            <param name="outputOrder">The linear sort order of output lists.</param> 
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.ExportToLists(System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Double}@)">
            <summary>Constructs pair of lists from the 1D sparse matrix.</summary>
            <param name="index0List">The list of indices in Coordinate format.</param>         
            <param name="outputValueList">The list of corresponding values.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.ExportToLists(System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Double}@)">
            <summary>Constructs triplet of lists from the 2D sparse matrix.</summary>
            <param name="index0List">The list of row indices in Coordinate format.</param> 
            <param name="index1List">The list of corresponding column indices in Coordinate format.</param> 
            <param name="outputValueList">The list of corresponding values.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.ExportToLists(System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Double}@,ShoNS.Array.SortOrder)">
            <summary>Constructs triplet of lists in specific sort-order from the 2D sparse matrix.</summary>
            <param name="index0List">The first list of indices.</param>         
            <param name="index1List">The second list of indices.</param>         
            <param name="outputValueList">The list of corresponding values.</param>         
            <param name="outputOrder">The linear sort order of output lists.</param> 
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.ImportFromFile(System.String,ShoNS.Array.SparseFileFormat,System.Boolean)">
            <summary>Initialize sparse matrix from file stored in COO format with default delimiter (space or comma) and specific indexing (0 or 1).</summary>
            <param name="fileName" type="string">The name of input file.</param>
            <param name="fileFormat" type="SparseFileFormat">Input file format: {MM, COOH, MTL, HB}.</param> 
            <param name="zeroIndexing" type="bool">File data indexing is 0 based.</param> 
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.ExportToFile(System.String,ShoNS.Array.SparseFileFormat,System.Boolean)">
            <summary>Create a file in COO format with specific data indexing (0 or 1) from sparse object.</summary>
            <param name="fileName" type="string">The name of input file.</param>
            <param name="fileFormat" type="SparseFileFormat">Input file format: {MM, COOH, MTL, HB}.</param> 
            <param name="zeroIndexing" type="bool">File data indexing is 0 based.</param> 
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.Norm">
            <summary>Computes the matrix two-norm.</summary>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.Norm(ShoNS.Array.NormType)">
            <summary>Computes the matrix norm.</summary>
            <param name="normToCompute" type="NormType">Type of norm to compute.</param>
            <remarks>SparseDoubleArray objects implement the two-norm via SVD if the inputObject is a 2D matrix.</remarks>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.Sum(ShoNS.Array.DimOp)">
            <summary>Computes the sum along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the sum.</param>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.Min(ShoNS.Array.DimOp)">
            <summary>Finds the minimum element value along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to find the minimum.</param>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.Max(ShoNS.Array.DimOp)">
            <summary>Finds the maximum element value along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to find the maximum.</param>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.Mean">
            <summary>Computes the mean over the array or matrix</summary>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.Median">
            <summary>Computes the median over the array or matrix</summary>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.Var">
            <summary>Computes the variance (normalized by N-1) over the array or matrix</summary>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.VarN">
            <summary>Computes the variance (normalized by N) over the array or matrix</summary>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.Std">
            <summary>Computes the standard deviation over the array or matrix</summary>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.Mean(ShoNS.Array.DimOp)">
            <summary>Computes the mean along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the mean.</param>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.Median(ShoNS.Array.DimOp)">
            <summary>Computes the median along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the median.</param>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.Var(ShoNS.Array.DimOp)">
            <summary>Computes the variance, normalized by N-1, along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the variance.</param>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.VarN(ShoNS.Array.DimOp)">
            <summary>Computes the variance, normalized by N, along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the variance.</param>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.Std(ShoNS.Array.DimOp)">
            <summary>Computes the standard deviation long the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the standard deviation.</param>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.Det">
            <summary>Computes the matrix determinant, for square arrays only.</summary>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.Add(ShoNS.Array.SparseDoubleArray)">
            <summary>Adds two matrices.</summary>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.Subtract(ShoNS.Array.SparseDoubleArray)">
            <summary>Subtracts two matrices.</summary>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.Add(System.Double)">
             <summary>Adds a value to each element of the matrix.</summary>
            <param name="value">The value to add</param>        
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.Subtract(System.Double)">
            <summary>Subtracts a value from each element of the matrix.</summary>
            <param name="value">The value to subtract</param>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.RSubtract(System.Double)">
            <summary>From a value, subtracts each value of the matrix.</summary>
            <param name="value">The value from which to subtract</param>          
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.Subtract(ShoNS.Array.DoubleArray)">
            <summary>Subtracts two matrices.</summary>
            <param name="otherMatrix">The other matrix</param>        
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.Multiply(ShoNS.Array.SparseDoubleArray)">
            <summary>Multiplies two matrices.</summary>
            <param name="otherMatrix">The other matrix</param>        
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.Multiply(System.Double)">
            <summary>Multiplies each element of the matrix by a value.</summary>
            <param name="value">The value to multiply</param>         
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.Divide(System.Double)">
            <summary>Divides each element of the matrix by a value.</summary>
            <param name="value">The value to divide</param>         
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.RDivide(System.Double)">
            <summary>From a value, divides each element of the matrix.</summary>
            <param name="value">The value from which to divide</param>          
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.op_Addition(ShoNS.Array.SparseDoubleArray,ShoNS.Array.SparseDoubleArray)">
            <summary>Adds two sparse matrices.</summary>
            <param name="matrixLeft" type="SparseDoubleArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="SparseDoubleArray">Sparse matrix on the right side.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.op_Addition(ShoNS.Array.SparseDoubleArray,ShoNS.Array.SparseFloatArray)">
            <summary>Adds two sparse matrices.</summary>
            <param name="matrixLeft" type="SparseDoubleArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="SparseFloatArray">Sparse matrix on the right side.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.op_Addition(ShoNS.Array.SparseDoubleArray,ShoNS.Array.SparseIntArray)">
            <summary>Adds two sparse matrices.</summary>
            <param name="matrixLeft" type="SparseDoubleArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="SparseIntArray">Sparse matrix on the right side.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.op_Addition(ShoNS.Array.SparseDoubleArray,ShoNS.Array.DoubleArray)">
            <summary>Adds two matrices.</summary>
            <param name="matrixLeft" type="SparseDoubleArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="DoubleArray">Matrix on the right side.</param>
            <returns>A dense DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.op_Addition(ShoNS.Array.SparseDoubleArray,ShoNS.Array.FloatArray)">
            <summary>Adds two matrices.</summary>
            <param name="matrixLeft" type="SparseDoubleArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="FloatArray">Matrix on the right side.</param>
            <returns>A dense DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.op_Addition(ShoNS.Array.SparseDoubleArray,ShoNS.Array.IntArray)">
            <summary>Adds two matrices.</summary>
            <param name="matrixLeft" type="SparseDoubleArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="IntArray">Matrix on the right side.</param>
            <returns>A dense DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.op_Addition(ShoNS.Array.SparseDoubleArray,System.Double)">
            <summary>Adds a value to each element of a sparse matrix.</summary>
            <param name="matrix" type="SparseDoubleArray">The matrix to which to add the value.</param>
            <param name="value" type="double">The value to add.</param>
            <returns>A dense DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.op_Addition(ShoNS.Array.SparseDoubleArray,System.Single)">
            <summary>Adds a value to each element of a sparse matrix.</summary>
            <param name="matrix" type="SparseDoubleArray">The matrix to which to add the value.</param>
            <param name="value" type="float">The value to add.</param>
            <returns>A dense DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.op_Addition(ShoNS.Array.SparseDoubleArray,System.Int32)">
            <summary>Adds a value to each element of a sparse matrix.</summary>
            <param name="matrix" type="SparseDoubleArray">The matrix to which to add the value.</param>
            <param name="value" type="int">The value to add.</param>
            <returns>A dense DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.op_Addition(System.Double,ShoNS.Array.SparseDoubleArray)">
            <summary>Adds a value to each element of a sparse matrix.</summary>
            <param name="value" type="double">The value to add.</param>
            <param name="matrix" type="SparseDoubleArray">Sparse matrix to which to add the value.</param>
            <returns>A dense DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.op_Addition(System.Single,ShoNS.Array.SparseDoubleArray)">
            <summary>Adds a value to each element of a sparse matrix.</summary>
            <param name="value" type="float">The value to add.</param>
            <param name="matrix" type="SparseDoubleArray">Sparse matrix to which to add the value.</param>
            <returns>A dense DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.op_Addition(System.Int32,ShoNS.Array.SparseDoubleArray)">
            <summary>Adds a value to each element of a sparse matrix.</summary>
            <param name="value" type="int">The value to add.</param>
            <param name="matrix" type="SparseDoubleArray">Sparse matrix to which to add the value.</param>
            <returns>A dense DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.op_Subtraction(ShoNS.Array.SparseDoubleArray,ShoNS.Array.SparseDoubleArray)">
            <summary>Subtracts a sparse matrix from a sparse matrix.</summary>
            <param name="matrixLeft" type="SparseDoubleArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="SparseDoubleArray">Sparse matrix on the right side.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.op_Subtraction(ShoNS.Array.SparseDoubleArray,ShoNS.Array.SparseFloatArray)">
            <summary>Subtracts a sparse matrix from a sparse matrix.</summary>
            <param name="matrixLeft" type="SparseDoubleArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="SparseFloatArray">Sparse matrix on the right side.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.op_Subtraction(ShoNS.Array.SparseDoubleArray,ShoNS.Array.SparseIntArray)">
            <summary>Subtracts a sparse matrix from a sparse matrix.</summary>
            <param name="matrixLeft" type="SparseDoubleArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="SparseIntArray">Sparse matrix on the right side.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.op_Subtraction(ShoNS.Array.SparseDoubleArray,ShoNS.Array.DoubleArray)">
            <summary>Subtracts a matrix from a sparse matrix.</summary>
            <param name="matrixLeft" type="SparseDoubleArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="DoubleArray">Matrix on the right side.</param>
            <returns>A dense DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.op_Subtraction(ShoNS.Array.SparseDoubleArray,ShoNS.Array.FloatArray)">
            <summary>Subtracts a matrix from a sparse matrix.</summary>
            <param name="matrixLeft" type="SparseDoubleArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="FloatArray">Matrix on the right side.</param>
            <returns>A dense DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.op_Subtraction(ShoNS.Array.SparseDoubleArray,ShoNS.Array.IntArray)">
            <summary>Subtracts a matrix from a sparse matrix.</summary>
            <param name="matrixLeft" type="SparseDoubleArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="IntArray">Matrix on the right side.</param>
            <returns>A dense DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.op_Subtraction(ShoNS.Array.SparseDoubleArray,System.Double)">
            <summary>Subtracts a value from each element of a sparse matrix.</summary>
            <param name="matrix" type="SparseDoubleArray">Sparse matrix on the left side.</param>
            <param name="value" type="double">The value to subtract.</param>
            <returns>A dense DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.op_Subtraction(ShoNS.Array.SparseDoubleArray,System.Single)">
            <summary>Subtracts a value from each element of a matrix.</summary>
            <param name="matrix" type="SparseDoubleArray">Sparse matrix on the left side.</param>
            <param name="value" type="float">The value to subtract.</param>
            <returns>A dense DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.op_Subtraction(ShoNS.Array.SparseDoubleArray,System.Int32)">
            <summary>Subtracts a value from each element of a matrix.</summary>
            <param name="matrix" type="SparseDoubleArray">Sparse matrix on the left side.</param>
            <param name="value" type="int">The value to subtract.</param>
            <returns>A dense DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.op_Subtraction(System.Double,ShoNS.Array.SparseDoubleArray)">
            <summary>From a value, subtracts each element of a sparse matrix.</summary>
            <param name="value" type="double">The value to subtract.</param>
            <param name="matrix" type="SparseDoubleArray">Sparse matrix on the right side.</param>
            <returns>A dense DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.op_Subtraction(System.Single,ShoNS.Array.SparseDoubleArray)">
            <summary>From a value, subtracts each element of a sparse matrix.</summary>
            <param name="value" type="float">The value to subtract.</param>
            <param name="matrix" type="SparseDoubleArray">Sparse matrix on the right side.</param>
            <returns>A dense DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.op_Subtraction(System.Int32,ShoNS.Array.SparseDoubleArray)">
            <summary>From a value, subtracts each element of a sparse matrix.</summary>
            <param name="value" type="int">The value to subtract.</param>
            <param name="matrix" type="SparseDoubleArray">Sparse matrix on the right side.</param>
            <returns>A dense DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.op_Multiply(ShoNS.Array.SparseDoubleArray,ShoNS.Array.SparseDoubleArray)">
            <summary>Multiplies two sparse matrices.</summary>
            <param name="matrixLeft" type="SparseDoubleArray">Matrix on the left side.</param>
            <param name="matrixRight" type="SparseDoubleArray">Matrix on the right side.</param>
            <returns>Returns an object which is either a dense matrix (DoubleArray) or sparse matrix (SparseDoubleArray).</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.op_Multiply(ShoNS.Array.SparseDoubleArray,ShoNS.Array.SparseFloatArray)">
            <summary>Multiplies two sparse matrices.</summary>
            <param name="matrixLeft" type="SparseDoubleArray">Matrix on the left side.</param>
            <param name="matrixRight" type="SparseFloatArray">Matrix on the right side.</param>
            <returns>Returns an object which is either a dense matrix (DoubleArray) or sparse matrix (SparseDoubleArray).</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.op_Multiply(ShoNS.Array.SparseDoubleArray,ShoNS.Array.SparseIntArray)">
            <summary>Multiplies two sparse matrices.</summary>
            <param name="matrixLeft" type="SparseDoubleArray">Matrix on the left side.</param>
            <param name="matrixRight" type="SparseIntArray">Matrix on the right side.</param>
            <returns>Returns an object which is either a dense matrix (DoubleArray) or sparse matrix (SparseDoubleArray).</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.op_Multiply(ShoNS.Array.SparseDoubleArray,ShoNS.Array.DoubleArray)">
            <summary>Multiplies two matrices.</summary>
            <param name="matrixLeft" type="SparseDoubleArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="DoubleArray">Matrix on the right side.</param>
            <returns>A dense DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.op_Multiply(ShoNS.Array.SparseDoubleArray,ShoNS.Array.FloatArray)">
            <summary>Multiplies two matrices.</summary>
            <param name="matrixLeft" type="SparseDoubleArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="FloatArray">Matrix on the right side.</param>
            <returns>A dense DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.op_Multiply(ShoNS.Array.SparseDoubleArray,ShoNS.Array.IntArray)">
            <summary>Multiplies two matrices.</summary>
            <param name="matrixLeft" type="SparseDoubleArray">Matrix on the left side.</param>
            <param name="matrixRight" type="IntArray">Matrix on the right side.</param>
            <returns>A dense DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.op_Multiply(ShoNS.Array.SparseDoubleArray,System.Double)">
            <summary>Multiplies each element of a matrix by a value.</summary>
            <param name="matrix" type="SparseDoubleArray">Matrix on the left side.</param>
            <param name="value" type="double">The value to multiply.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.op_Multiply(ShoNS.Array.SparseDoubleArray,System.Single)">
            <summary>Multiplies each element of a matrix by a value.</summary>
            <param name="matrix" type="SparseDoubleArray">Matrix on the left side.</param>
            <param name="value" type="float">The value to multiply.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.op_Multiply(ShoNS.Array.SparseDoubleArray,System.Int32)">
            <summary>Multiplies each element of a matrix by a value.</summary>
            <param name="matrix" type="SparseDoubleArray">Matrix on the left side.</param>
            <param name="value" type="int">The value to multiply.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.op_Multiply(System.Double,ShoNS.Array.SparseDoubleArray)">
            <summary>Multiplies each element of a matrix by a value.</summary>
            <param name="value" type="double">The value to multiply.</param>
            <param name="matrix" type="SparseDoubleArray">Matrix on the right side.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.op_Multiply(System.Single,ShoNS.Array.SparseDoubleArray)">
            <summary>Multiplies each element of a matrix by a value.</summary>
            <param name="value" type="float">The value to multiply.</param>
            <param name="matrix" type="SparseDoubleArray">Matrix on the right side.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.op_Multiply(System.Int32,ShoNS.Array.SparseDoubleArray)">
            <summary>Multiplies each element of a matrix by a value.</summary>
            <param name="value" type="int">The value to multiply.</param>
            <param name="matrix" type="SparseDoubleArray">Matrix on the right side.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.MultiplyAccum(System.Double,ShoNS.Array.SparseDoubleArray)">
            <summary>matrix += alpha*b</summary>
            <param name="alpha" type="double">The value to multiply.</param>
            <param name="matrixRight" type="SparseDoubleArray">Matrix to the right.</param>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.MultiplyInto(ShoNS.Array.SparseDoubleArray,ShoNS.Array.SparseDoubleArray)">
            <summary>Multiplies matrixLeft and matrixRight and stores the results in this DoubleArray: this = matrixLeft*matrixRight.</summary>
            <param name="matrixLeft" type="SparseDoubleArray">Matrix on the left side.</param>
            <param name="matrixRight" type="SparseDoubleArray">Matrix to the right.</param>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.MultiplyInto(System.Double,ShoNS.Array.SparseDoubleArray,System.Boolean,ShoNS.Array.SparseDoubleArray,System.Boolean,System.Double)">
            <summary>Performs this = alpha*op(matrixLeft)*op(matrixRight) + beta*this, storing the results in this DoubleArray.</summary>
            <param name="alpha" type="double">Scalar</param>
            <param name="matrixLeft" type="SparseDoubleArray">Matrix to the left.</param>
            <param name="transLeft" type="bool">If true, op(matrixLeft) = matrixLeft.T. If false, op(matrixLeft) = matrixLeft</param>
            <param name="matrixRight" type="SparseDoubleArray">Matrix to the right.</param>
            <param name="transRight" type="bool">If true, op(matrixRight) = matrixRight.T. If false, op(matrixRight) = matrixRight</param>
            <param name="beta" type="double">Scalar used to multiply this matrix</param>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.MultiplyTranspose(System.Boolean)">
            <summary>Multiplies the matrix by its transpose or vice versa: A'*A or A*A'.</summary>
            <param name="transFirst" type="bool">If true, the transpose is on the left side; else it's on the right.</param>
            <returns>Returns an object which is either a dense matrix (DoubleArray) or sparse matrix (SparseDoubleArray).</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.ElementMultiply(ShoNS.Array.SparseDoubleArray)">
            <summary>Multiplies the elements of two matrices.</summary>
            <param name="otherMatrix" type="SparseDoubleArray">Sparse matrix on the right side.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.ElementMultiply(ShoNS.Array.SparseFloatArray)">
            <summary>Multiplies the elements of two matrices.</summary>
            <param name="otherMatrix" type="SparseIntArray">Sparse matrix on the right side.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.ElementMultiply(ShoNS.Array.SparseIntArray)">
            <summary>Multiplies the elements of two matrices.</summary>
            <param name="otherMatrix" type="SparseIntArray">Sparse matrix on the right side.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.ElementMultiply(ShoNS.Array.DoubleArray)">
            <summary>Multiplies the elements of two matrices.</summary>
            <param name="otherMatrix" type="DoubleArray">Matrix on the right side.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.ElementMultiply(ShoNS.Array.FloatArray)">
            <summary>Multiplies the elements of two matrices.</summary>
            <param name="otherMatrix" type="FloatArray">Matrix on the right side.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.ElementMultiply(ShoNS.Array.IntArray)">
            <summary>Multiplies the elements of two matrices.</summary>
            <param name="otherMatrix" type="IntArray">Matrix on the right side.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.op_Division(ShoNS.Array.SparseDoubleArray,System.Double)">
            <summary>Divides the elements of a matrix by a value.</summary>
            <param name="matrix" type="SparseDoubleArray">Matrix on the left side.</param>
            <param name="value" type="double">Value to divide.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.op_Division(ShoNS.Array.SparseDoubleArray,System.Single)">
            <summary>Divides the elements of a matrix by a value.</summary>
            <param name="matrix" type="SparseDoubleArray">Matrix on the left side.</param>
            <param name="value" type="float">Value to divide.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.op_Division(ShoNS.Array.SparseDoubleArray,System.Int32)">
            <summary>Divides the elements of a matrix by a value.</summary>
            <param name="matrix" type="SparseDoubleArray">Matrix on the left side.</param>
            <param name="value" type="int">Value to divide.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.op_Division(System.Double,ShoNS.Array.SparseDoubleArray)">
            <summary>Divides a value by the elements of a matrix.</summary>
            <param name="value" type="double">Value to divide.</param>
            <param name="matrix" type="SparseDoubleArray">Matrix on the right side.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.op_Division(System.Single,ShoNS.Array.SparseDoubleArray)">
            <summary>Divides a value by the elements of a matrix.</summary>
            <param name="value" type="float">Value to divide.</param>
            <param name="matrix" type="SparseDoubleArray">Matrix on the right side.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.op_Division(System.Int32,ShoNS.Array.SparseDoubleArray)">
            <summary>Divides a value by the elements of a matrix.</summary>
            <param name="value" type="int">Value to divide.</param>
            <param name="matrix" type="SparseDoubleArray">Matrix on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.ElementDivide(ShoNS.Array.DoubleArray)">
            <summary>Divides the elements of two matrix.</summary>
            <param name="otherMatrix" type="DoubleArray">Matrix on the right side.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.ElementDivide(ShoNS.Array.FloatArray)">
            <summary>Divides the elements of two matrix.</summary>
            <param name="otherMatrix" type="FloatArray">Matrix on the right side.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.ElementDivide(ShoNS.Array.IntArray)">
            <summary>Divides the elements of two matrix.</summary>
            <param name="otherMatrix" type="IntArray">Matrix on the right side.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.op_UnaryNegation(ShoNS.Array.SparseDoubleArray)">
            <summary>Negates each element of the matrix.</summary>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.Negate">
            <summary>Negates each element of the matrix.</summary>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.Dot(ShoNS.Array.SparseDoubleArray)">
            <summary>Computes the vector dot product.</summary>
            <param name="otherVector" type="SparseDoubleArray">Sparse vector to dot.</param>
            <returns>Returns the vector dot product (double).</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.Dot(ShoNS.Array.SparseFloatArray)">
            <summary>Computes the vector dot product.</summary>
            <param name="otherVector" type="SparseFloatArray">Sparse vector to dot.</param>
            <returns>Returns the vector dot product (double).</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.Dot(ShoNS.Array.SparseIntArray)">
            <summary>Computes the vector dot product.</summary>
            <param name="otherVector" type="SparseIntArray">Sparse vector to dot.</param>
            <returns>Returns the vector dot product (double).</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.Dot(ShoNS.Array.DoubleArray)">
            <summary>Computes the vector dot product.</summary>
            <param name="otherVector" type="DoubleArray">Dense vector to dot.</param>
            <returns>Returns the vector dot product (double).</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.Dot(ShoNS.Array.FloatArray)">
            <summary>Computes the vector dot product.</summary>
            <param name="otherVector" type="FloatArray">Vector to dot.</param>
            <returns>Returns the vector dot product (double).</returns>
        </member>
        <member name="M:ShoNS.Array.SparseDoubleArray.Dot(ShoNS.Array.IntArray)">
            <summary>Computes the vector dot product.</summary>
            <param name="otherVector" type="IntArray">Vector to dot.</param>
            <returns>Returns the vector dot product (double).</returns>
        </member>
        <member name="P:ShoNS.Array.SparseDoubleArray.Rows">
            <summary>Returns an IEnumerable object that can be used to iterate over the rows of the matrix.</summary>
        </member>
        <member name="P:ShoNS.Array.SparseDoubleArray.Cols">
            <summary>Returns an IEnumerable object that can be used to iterate over the columns of the matrix.</summary>
        </member>
        <member name="P:ShoNS.Array.SparseDoubleArray.T">
            <summary>Transposes the 1st and 2nd dimensions of the matrix, making a deep copy.</summary>
            <returns>Returns a deep copy of transposed matrix.</returns>
        </member>
        <member name="P:ShoNS.Array.SparseDoubleArray.Diagonal">
            <summary>Returns the main diagonal of the matrix as a vectory or sets the main diagonal to the inputObject vector.</summary>
        </member>
        <member name="P:ShoNS.Array.SparseDoubleArray.CountCells">
            <summary>Returns the number of set items in the matrix.</summary>
        </member>
        <member name="P:ShoNS.Array.SparseDoubleArray.StorageFormat">
            <summary>Returns the storage format of the sparse matrix.</summary>
        </member>
        <member name="P:ShoNS.Array.SparseDoubleArray.NullValue">
            <summary>Returns the null (unset) value for the matrix.</summary>
        </member>
        <member name="T:ShoNS.Array.SparseFloatArray">
            <summary>This class implements functionality for a sparse matrix with single-precision floating point elements.</summary>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.Zeros(System.Int32)">
            <summary>Creates a SparseFloatArray of the given length, filled with zeros.</summary>
            <param name="length">Vector length</param>        
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.Zeros(System.Int32,System.Int32)">
            <summary>Creates a SparseFloatArray of size0 x size1, filled with zeros.</summary>
            <param name="size0">Number of rows</param>
            <param name="size1">Number of columns</param>           
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.FromFile(System.String)">
            <summary>Creates an array from a file, using binary serialization.</summary>
            <param name="fileName" type="String">Name of file from which to create the array.</param>    
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.FromStream(System.IO.Stream)">
            <summary>Creates an array from a stream, using binary serialization.</summary>
            <param name="stream" type="System.IO.Stream">Stream from which to create the array.</param>  
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.From(ShoNS.Array.NumArrayBase{System.Single})">
             <summary>Creates a matrix (deep copy) from another matrix or array.</summary>
            <param name="input">Array to copy</param>        
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.From(System.Collections.IEnumerable)">
            <summary>Creates a deep copy from an IEnumerable object</summary>
            <param name="input">Enumerable to copy</param>        
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.#ctor(System.Int32)">
            <summary>Creates a SparseFloatArray of the given length, filled with zeros.</summary>
            <param name="length">Vector length</param>        
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.#ctor(System.Int32,System.Int32)">
            <summary>Creates a SparseFloatArray of size0 x size1, filled with zeros.</summary>
            <param name="size0">Number of rows</param>
            <param name="size1">Number of columns</param>    
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.#ctor(ShoNS.Array.FloatArray,ShoNS.Array.SparseStorageFormat)">
            <summary>Creates a matrix from the input matrix.</summary>
            <param name="inputMatrix" type="FloatArray">Input matrix from which to create the output matrix.</param>  
            <param name="storageFormat" type="SparseStorageFormat">Storage format of the output sparse matrix.</param>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.#ctor(ShoNS.Array.SparseFloatArray,ShoNS.Array.SparseStorageFormat)">
            <summary>Creates a matrix from the input matrix.</summary>
            <param name="inputMatrix" type="SparseFloatArray">Input matrix from which to create the output matrix.</param>  
            <param name="storageFormat" type="SparseStorageFormat">Storage format of the output sparse matrix.</param>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.#ctor(System.Int32,ShoNS.Array.SparseStorageFormat)">
            <summary>Creates a one-dimensional matrix.</summary>
            <param name="size" type="int">Number of elements in the matrix.</param> 
            <param name="storageFormat" type="SparseStorageFormat">Storage format of the sparse matrix.</param>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.#ctor(System.Int32,System.Int32,ShoNS.Array.SparseStorageFormat)">
            <summary>Creates a two-dimensional matrix.</summary>
            <param name="size0" type="int">Number of rows in the matrix.</param> 
            <param name="size1" type="int">Number of columns in the matrix.</param> 
            <param name="storageFormat" type="SparseStorageFormat">Storage format of the sparse matrix.</param>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.#ctor(System.Int32,System.Int32,System.Single,ShoNS.Array.SparseStorageFormat)">
            <summary>Creates a two-dimensional matrix.</summary>
            <param name="size0" type="int">Number of rows in the matrix.</param> 
            <param name="size1" type="int">Number of columns in the matrix.</param> 
            <param name="density" type="float">Expected approximate ratio of non-zeros to zeros.</param>
            <param name="storageFormat" type="SparseStorageFormat">Storage format of the sparse matrix.</param>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.#ctor(System.Object,ShoNS.Array.SparseStorageFormat)">
            <summary>Creates a matrix from the contents of an object.</summary>
            <param name="inputObject" type="Object">Object from which to create the matrix.</param>  
            <param name="storageFormat" type="SparseStorageFormat">Storage format of the sparse matrix.</param>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.SameValues(ShoNS.Array.SparseFloatArray,System.Single,System.Single)">
            <summary>Determines if two matrices are the same within the given tolerance.</summary>
            <param name="relToler" type="float">Relative tolerance.</param>
            <param name="absToler" type="float">Absolute tolerance.</param>
            <param name="matrixToCompare" type="SparseFloatArray">Matrix to compare.</param>
            <returns>true if the matrices are the same; false if different.</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.SameValues(ShoNS.Array.SparseFloatArray)">
            <summary>Determines if two matrices are exactly the same.</summary>
            <param name="matrixToCompare" type="SparseFloatArray">Matrix to compare.</param>
            <returns>true if the matrices are the same; false if different.</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.SameValues(ShoNS.Array.FloatArray,System.Single,System.Single)">
            <summary>Determines if two matrices are the same within the given tolerance.</summary>
            <param name="relToler" type="float">Relative tolerance.</param>
            <param name="absToler" type="float">Absolute tolerance.</param>
            <param name="matrixToCompare" type="FloatArray">Matrix to compare.</param>
            <returns>true if the matrices are the same; false if different.</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.SameValues(ShoNS.Array.FloatArray)">
            <summary>Determines if two matrices are exactly the same.</summary>
            <param name="matrixToCompare" type="FloatArray">Matrix to compare.</param>
            <returns>true if the matrices are the same; false if different.</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.AlongDim(System.Int32)">
            <summary>Returns an IEnumerable object that can be used to iterate along a dimension of a matrix.</summary>
            <param name="dim">Along which dimension</param>        
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.RowElements(System.Int32)">
            <summary>Returns an IEnumerable object that can be used to iterate over the elements of a given row.</summary>
            <param name="rowIndex" type="int">The index of the row to return.</param>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.ColumnElements(System.Int32)">
            <summary>Returns an IEnumerable object that can be used to iterate over the elements of a given column.</summary>
            <param name="colIndex" type="int">The index of the row to return.</param>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.TransposeDeep">
            <summary>Transposes the 1st and 2nd dimensions of the matrix, making a deep copy.</summary>
            <returns>Returns a deep copy of transposed matrix.</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.Transpose">
            <summary>Transposes the 1st and 2nd dimensions of the matrix, making a shallow copy.</summary>
            <returns>Returns a shallow copy of transposed matrix.</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.CopyDeep">
            <summary>Makes a deep copy of the matrix; the new matrix has its own storage.</summary>
            <returns>Returns a deep copy the matrix.</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.CopyShallow">
            <summary>Makes a shallow copy of the matrix; the new matrix shares its storage with the original matrix.</summary>
            <returns>Returns a shallow copy the matrix.</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.ToVector">
            <summary>Makes a vector, copying the elements in row-column order.</summary>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.GetSlice(System.Int32,System.Int32)">
            <summary>Creates a submatrix (shallow copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndexInclusive" type="int">Maximum index (inclusive) in the slice.</param>  
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.GetSliceDeep(System.Int32,System.Int32)">
            <summary>Creates a submatrix (deep copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndexInclusive" type="int">Maximum index (inclusive) in the slice.</param>  
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.GetSlice(System.Int32,System.Int32,System.Int32)">
            <summary>Creates a submatrix (shallow copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndexInclusive" type="int">Maximum index (inclusive) in the slice.</param>  
            <param name="step">Step</param>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.GetSliceDeep(System.Int32,System.Int32,System.Int32)">
            <summary>Creates a submatrix (deep copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndexInclusive" type="int">Maximum index (inclusive) in the slice.</param>  
            <param name="step">Step</param>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.GetSlice(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a submatrix (shallow copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRowInclusive" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastColInclusive" type="int">Maximum column number (inclusive) in the slice.</param>          
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.GetSliceDeep(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a submatrix (deep copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRowInclusive" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastColInclusive" type="int">Maximum column number (inclusive) in the slice.</param>          
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.GetSliceDeep(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a submatrix (deep copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRowInclusive" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="stepRow" type="int">Row step size.</param> 
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastColInclusive" type="int">Maximum column number (inclusive) in the slice.</param>          
            <param name="stepCol" type="int">Column step size.</param> 
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.GetSlice(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a submatrix (shallow copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRowInclusive" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="stepRow" type="int">Row step size.</param> 
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastColInclusive" type="int">Maximum column number (inclusive) in the slice.</param>          
            <param name="stepCol" type="int">Column step size.</param> 
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.GetSliceDeep(ShoNS.Array.Slice[])">
            <summary>Creates a submatrix (deep copy).</summary>
            <param name="slices">Slices to get</param>        
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.GetSlice(ShoNS.Array.Slice[])">
            <summary>Creates a submatrix (shallow copy).</summary>
            <param name="slices">Slices to get</param>        
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.GetArrayEntries(System.Collections.Generic.IEnumerable{ShoNS.Array.IArrayEntry})">
            <summary>Creates an array (deep copy) from the array entries.</summary>
            <param name="arrayEntries">Enumerable of array entries to get</param>   
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.GetColSparse(System.Int32)">
            <summary>Returns a column in a sparse vector.</summary>
            <param name="colIndex" type="int">The index of the column to retrieve.</param>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.GetColsSparse(System.Collections.Generic.IList{System.Int32})">
            <summary>Returns one or more columns in a new sparse matrix.</summary>
            <param name="colsToGet">List of column indices to retrieve.</param>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.GetRowSparse(System.Int32)">
            <summary>Returns a row in a sparse vector.</summary>
            <param name="rowIndex" type="int">The index of the row to retrieve.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.GetRowsSparse(System.Collections.Generic.IList{System.Int32})">
            <summary>Returns one or more rows in a new sparse matrix.</summary>
            <param name="rowsToGet">List of row indices to retrieve</param>     
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.AccumulateValue(System.Int32,System.Int32,System.Single)">
            <summary>Used to add or change an element in a sparse matrix.</summary>
            <param name="rowIndex" type="int">The row index of the element.</param>         
            <param name="colIndex" type="int">The column index of the element.</param>         
            <param name="value" type="Object">The value to set.</param>         
            <remarks>The value is not saved to the matrix until CommitValues is called.</remarks>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.AccumulateValue(System.Int32,System.Single)">
            <summary>Used to add or change an element in a 1D sparse matrix.</summary>
            <param name="index" type="int">The index of the element.</param>         
            <param name="value" type="Object">The value to set.</param>         
            <remarks>The value is not saved to the matrix until CommitValues is called.</remarks>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.ColumnLength(System.Int32)">
            <summary>Returns the number of set items in the given column.</summary>
            <param name="colIndex" type="int">The index of the column to retrieve.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.CommitValues">
            <summary>Commits the values added by AccumulateValue.</summary>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.GetCellIndex(System.Int32,System.Int32)">
            <summary>Returns the cell index corresponding to the given matrix indices, returns -1 for unset elements.</summary>
            <param name="rowIndex">The index of the row to retrieve</param>
            <param name="colIndex">The index of the column to retrieve</param>          
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.GetCellValue(System.Int32)">
            <summary>Returns the value of the matrix at the given cell index.</summary>
            <param name="cellIndex" type="int">The index of the cell to retrieve.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.RowLength(System.Int32)">
            <summary>Returns the number of set items in the given row.</summary>
            <param name="rowIndex" type="int">The index of the row to retrieve.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.RowElementColumns(System.Int32)">
            <summary>Returns a list of the column indices of the set items in the given row.</summary>
            <param name="rowIndex">Row index</param>            
            <exception cref="T:System.NotImplementedException">Thrown when array not in CSR format</exception>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.RowElementValues(System.Int32)">
            <summary>Returns a list of the values of the set items in the given row.</summary>
            <param name="rowIndex">Row index</param>            
            <exception cref="T:System.NotImplementedException">Thrown when array not in CSR format</exception>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.ColumnElementRows(System.Int32)">
            <summary>Returns a list of the row indices of the set items in the given column.</summary>
            <param name="colIndex">Column index</param>            
            <exception cref="T:System.NotImplementedException">Thrown when array not in CSC format</exception>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.ColumnElementValues(System.Int32)">
            <summary>Returns a list of the values of the set items in the given column.</summary>
            <param name="colIndex">Column index</param>            
            <exception cref="T:System.NotImplementedException">Thrown when array not in CSC format</exception>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.SwapRows(System.Int32,System.Int32)">
            <summary>Swaps the two rows.</summary>
            <param name="rowIndex1" type="int">The index of the first row to swap.</param>         
            <param name="rowIndex2" type="int">The index of the second row to swap.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.RemoveZeros">
            <summary>Removes zero entries.</summary>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.ImportFromList(System.Collections.IList,System.Collections.IList)">
            <summary>Loads the 1D sparse matrix from a pair of lists.</summary>
            <param name="index0List" type="IList">The list of indices in Coordinate format.</param>         
            <param name="valueList" type="IList">The list of corresponding values.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.ImportFromList(System.Collections.IList,System.Collections.IList,System.Boolean)">
            <summary>Loads the 1D sparse matrix from a pair of lists in specific sort-order.</summary>
            <param name="index0List" type="IList">The list of indices.</param>         
            <param name="inputValueList" type="IList">The list of corresponding values.</param>         
            <param name="sortedInput" type="bool">The input list is sorted.</param>     
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.ImportFromList(System.Collections.IList,System.Collections.IList,System.Collections.IList)">
            <summary>Loads the 2D sparse matrix from a triplet of lists.</summary>
            <param name="index0List" type="IList">The list of row indices in Coordinate format.</param> 
            <param name="index1List" type="IList">The list of corresponding column indices in Coordinate format.</param> 
            <param name="inputValueList" type="IList">The list of corresponding values.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.ImportFromList(System.Collections.IList,System.Collections.IList,System.Collections.IList,ShoNS.Array.SortOrder)">
            <summary>Loads the 2D sparse matrix from a triplet of lists in specific sort-order.</summary>
            <param name="index0List" type="IList">The first list of indices.</param>         
            <param name="index1List" type="IList">The second list of indices.</param>         
            <param name="inputValueList" type="IList">The list of corresponding values.</param>         
            <param name="inputOrder" type="SortOrder">The linear sort order of input lists.</param> 
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.ExportToList(System.Collections.IList@,System.Collections.IList@)">
            <summary>Constructs pair of lists from the 1D sparse matrix.</summary>
            <param name="index0List" type="IList">The list of indices in Coordinate format.</param>         
            <param name="valueList" type="IList">The list of corresponding values.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.ExportToList(System.Collections.IList@,System.Collections.IList@,System.Collections.IList@)">
            <summary>Constructs triplet of lists from the 2D sparse matrix.</summary>
            <param name="index0List" type="IList">The list of row indices in Coordinate format.</param> 
            <param name="index1List" type="IList">The list of corresponding column indices in Coordinate format.</param> 
            <param name="outputValueList" type="IList">The list of corresponding values.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.ExportToList(System.Collections.IList@,System.Collections.IList@,System.Collections.IList@,ShoNS.Array.SortOrder)">
            <summary>Constructs triplet of lists in specific sort-order from the 2D sparse matrix.</summary>
            <param name="index0List" type="IList">The first list of indices.</param>         
            <param name="index1List" type="IList">The second list of indices.</param>         
            <param name="outputValueList" type="IList">The list of corresponding values.</param>         
            <param name="outputOrder" type="SortOrder">The linear sort order of output lists.</param> 
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.ExportToLists(System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Single}@)">
            <summary>Constructs pair of lists from the 1D sparse matrix.</summary>
            <param name="index0List">The list of indices in Coordinate format.</param>         
            <param name="outputValueList">The list of corresponding values.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.ExportToLists(System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Single}@)">
            <summary>Constructs triplet of lists from the 2D sparse matrix.</summary>
            <param name="index0List">The list of row indices in Coordinate format.</param> 
            <param name="index1List">The list of corresponding column indices in Coordinate format.</param> 
            <param name="outputValueList">The list of corresponding values.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.ExportToLists(System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Single}@,ShoNS.Array.SortOrder)">
            <summary>Constructs triplet of lists in specific sort-order from the 2D sparse matrix.</summary>
            <param name="index0List">The first list of indices.</param>         
            <param name="index1List">The second list of indices.</param>         
            <param name="outputValueList">The list of corresponding values.</param>         
            <param name="outputOrder" type="SortOrder">The linear sort order of output lists.</param> 
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.ImportFromFile(System.String,ShoNS.Array.SparseFileFormat,System.Boolean)">
            <summary>Initialize sparse matrix from file stored in COO format with default delimiter (space or comma) and specific indexing (0 or 1).</summary>
            <param name="fileName" type="string">The name of input file.</param>
            <param name="fileFormat" type="SparseFileFormat">Input file format: {MM, COOH, MTL, HB}.</param> 
            <param name="zeroIndexing" type="bool">File data indexing is 0 based.</param> 
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.ExportToFile(System.String,ShoNS.Array.SparseFileFormat,System.Boolean)">
            <summary>Create a file in COO format with specific data indexing (0 or 1) from sparse object.</summary>
            <param name="fileName" type="string">The name of input file.</param>
            <param name="fileFormat" type="SparseFileFormat">Input file format: {MM, COOH, MTL, HB}.</param> 
            <param name="zeroIndexing" type="bool">File data indexing is 0 based.</param> 
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.Norm">
            <summary>Computes the matrix two-norm.</summary>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.Norm(ShoNS.Array.NormType)">
            <summary>Computes the matrix norm.</summary>
            <param name="normToCompute" type="NormType">Type of norm to compute.</param>
            <remarks>SparseFloatArray objects implement the two-norm via SVD if the inputObject is a 2D matrix.</remarks>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.Sum(ShoNS.Array.DimOp)">
            <summary>Computes the sum along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the sum.</param>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.Min(ShoNS.Array.DimOp)">
            <summary>Finds the minimum element value along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to find the minimum.</param>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.Max(ShoNS.Array.DimOp)">
            <summary>Finds the maximum element value along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to find the maximum.</param>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.Mean">
            <summary>Computes the mean over the array or matrix</summary>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.Median">
            <summary>Computes the median over the array or matrix</summary>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.Var">
            <summary>Computes the variance (normalized by N-1) over the array or matrix</summary>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.VarN">
            <summary>Computes the variance (normalized by N) over the array or matrix</summary>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.Std">
            <summary>Computes the standard deviation over the array or matrix</summary>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.Mean(ShoNS.Array.DimOp)">
            <summary>Computes the mean along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the mean.</param>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.Median(ShoNS.Array.DimOp)">
            <summary>Computes the median along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the median.</param>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.Var(ShoNS.Array.DimOp)">
            <summary>Computes the variance, normalized by N-1, along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the variance.</param>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.VarN(ShoNS.Array.DimOp)">
            <summary>Computes the variance, normalized by N, along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the variance.</param>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.Std(ShoNS.Array.DimOp)">
            <summary>Computes the standard deviation long the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the standard deviation.</param>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.Det">
            <summary>Computes the matrix determinant, for square matrics only.</summary>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.Add(ShoNS.Array.SparseFloatArray)">
            <summary>Adds two matrices.</summary>
            <param name="otherMatrix">The other matrix</param>        
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.Subtract(ShoNS.Array.SparseFloatArray)">
            <summary>Subtracts two matrices.</summary>
            <param name="otherMatrix">The other matrix</param>        
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.Add(System.Single)">
             <summary>Adds a value to each element of the matrix.</summary>
            <param name="value">The value to add</param>       
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.Subtract(System.Single)">
            <summary>Adds a value to each element of the matrix.</summary>
            <param name="value">The value to subtract</param>        
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.RSubtract(System.Single)">
            <summary>From a value, subtracts each value of the matrix.</summary>
            <param name="value">The value from which to subtract</param>           
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.Multiply(ShoNS.Array.SparseFloatArray)">
            <summary>Multiplies two matrices.</summary>
            <param name="otherMatrix">The other matrix</param>        
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.Multiply(System.Single)">
            <summary>Multiplies each element of the matrix by a value.</summary>
            <param name="value">The value to multiply</param>        
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.Divide(System.Single)">
            <summary>Divides each element of the matrix by a value.</summary>
            <param name="value">The value to divide</param>          
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.RDivide(System.Single)">
            <summary>From a value, divides each element of the matrix.</summary>
            <param name="value">The value from which to divide</param>          
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.op_Addition(ShoNS.Array.SparseFloatArray,ShoNS.Array.SparseFloatArray)">
            <summary>Adds two sparse matrices.</summary>
            <param name="matrixLeft" type="SparseFloatArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="SparseFloatArray">Sparse matrix on the right side.</param>
            <returns>A SparseFloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.op_Addition(ShoNS.Array.SparseFloatArray,ShoNS.Array.SparseIntArray)">
            <summary>Adds two sparse matrices.</summary>
            <param name="matrixLeft" type="SparseFloatArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="SparseIntArray">Sparse matrix on the right side.</param>
            <returns>A SparseFloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.op_Addition(ShoNS.Array.SparseFloatArray,ShoNS.Array.SparseDoubleArray)">
            <summary>Adds two sparse matrices.</summary>
            <param name="matrixLeft" type="SparseFloatArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="SparseDoubleArray">Sparse matrix on the right side.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.op_Addition(ShoNS.Array.SparseFloatArray,ShoNS.Array.DoubleArray)">
            <summary>Adds two matrices.</summary>
            <param name="matrixLeft" type="SparseDoubleArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="DoubleArray">Matrix on the right side.</param>
            <returns>A dense DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.op_Addition(ShoNS.Array.SparseFloatArray,ShoNS.Array.FloatArray)">
            <summary>Adds two matrices.</summary>
            <param name="matrixLeft" type="SparseFloatArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="FloatArray">Matrix on the right side.</param>
            <returns>A dense FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.op_Addition(ShoNS.Array.SparseFloatArray,ShoNS.Array.IntArray)">
            <summary>Adds two matrices.</summary>
            <param name="matrixLeft" type="SparseFloatArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="IntArray">Matrix on the right side.</param>
            <returns>A dense FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.op_Addition(ShoNS.Array.SparseFloatArray,System.Single)">
            <summary>Adds a value to each element of a sparse matrix.</summary>
            <param name="matrix" type="SparseFloatArray">The matrix to which to add the value.</param>
            <param name="value" type="float">The value to add.</param>
            <returns>A dense FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.op_Addition(ShoNS.Array.SparseFloatArray,System.Int32)">
            <summary>Adds a value to each element of a sparse matrix.</summary>
            <param name="matrix" type="SparseFloatArray">The matrix to which to add the value.</param>
            <param name="value" type="int">The value to add.</param>
            <returns>A dense FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.op_Addition(ShoNS.Array.SparseFloatArray,System.Double)">
            <summary>Adds a value to each element of a sparse matrix.</summary>
            <param name="matrix" type="SparseFloatArray">The matrix to which to add the value.</param>
            <param name="value" type="double">The value to add.</param>
            <returns>A dense DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.op_Addition(System.Single,ShoNS.Array.SparseFloatArray)">
            <summary>Adds a value to each element of a sparse matrix.</summary>
            <param name="value" type="float">The value to add.</param>
            <param name="matrix" type="SparseFloatArray">Sparse matrix to which to add the value.</param>
            <returns>A dense FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.op_Addition(System.Int32,ShoNS.Array.SparseFloatArray)">
            <summary>Adds a value to each element of a sparse matrix.</summary>
            <param name="value" type="int">The value to add.</param>
            <param name="matrix" type="SparseFloatArray">Sparse matrix to which to add the value.</param>
            <returns>A dense FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.op_Addition(System.Double,ShoNS.Array.SparseFloatArray)">
            <summary>Adds a value to each element of a sparse matrix.</summary>
            <param name="value" type="double">The value to add.</param>
            <param name="matrix" type="SparseFloatArray">Sparse matrix to which to add the value.</param>
            <returns>A dense DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.op_Subtraction(ShoNS.Array.SparseFloatArray,ShoNS.Array.SparseFloatArray)">
            <summary>Subtracts a sparse matrix from a sparse matrix.</summary>
            <param name="matrixLeft" type="SparseFloatArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="SparseFloatArray">Sparse matrix on the right side.</param>
            <returns>A SparseFloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.op_Subtraction(ShoNS.Array.SparseFloatArray,ShoNS.Array.SparseIntArray)">
            <summary>Subtracts a sparse matrix from a sparse matrix.</summary>
            <param name="matrixLeft" type="SparseFloatArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="SparseIntArray">Sparse matrix on the right side.</param>
            <returns>A SparseFloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.op_Subtraction(ShoNS.Array.SparseFloatArray,ShoNS.Array.SparseDoubleArray)">
            <summary>Subtracts a sparse matrix from a sparse matrix.</summary>
            <param name="matrixLeft" type="SparseFloatArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="SparseDoubleArray">Sparse matrix on the right side.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.op_Subtraction(ShoNS.Array.SparseFloatArray,ShoNS.Array.DoubleArray)">
            <summary>Subtracts a matrix from a sparse matrix.</summary>
            <param name="matrixLeft" type="SparseFloatArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="DoubleArray">Matrix on the right side.</param>
            <returns>A dense DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.op_Subtraction(ShoNS.Array.SparseFloatArray,ShoNS.Array.FloatArray)">
            <summary>Subtracts a matrix from a sparse matrix.</summary>
            <param name="matrixLeft" type="SparseFloatArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="FloatArray">Matrix on the right side.</param>
            <returns>A dense FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.op_Subtraction(ShoNS.Array.SparseFloatArray,ShoNS.Array.IntArray)">
            <summary>Subtracts a matrix from a sparse matrix.</summary>
            <param name="matrixLeft" type="SparseFloatArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="IntArray">Matrix on the right side.</param>
            <returns>A dense FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.op_Subtraction(ShoNS.Array.SparseFloatArray,System.Single)">
            <summary>Subtracts a value from each element of a sparse matrix.</summary>
            <param name="matrix" type="SparseFloatArray">Sparse matrix on the left side.</param>
            <param name="value" type="float">The value to subtract.</param>
            <returns>A dense FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.op_Subtraction(ShoNS.Array.SparseFloatArray,System.Int32)">
            <summary>Subtracts a value from each element of a sparse matrix.</summary>
            <param name="matrix" type="SparseFloatArray">Sparse matrix on the left side.</param>
            <param name="value" type="int">The value to subtract.</param>
            <returns>A dense FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.op_Subtraction(ShoNS.Array.SparseFloatArray,System.Double)">
            <summary>Subtracts a value from each element of a sparse matrix.</summary>
            <param name="matrix" type="SparseFloatArray">Sparse matrix on the left side.</param>
            <param name="value" type="double">The value to subtract.</param>
            <returns>A dense DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.op_Subtraction(System.Single,ShoNS.Array.SparseFloatArray)">
            <summary>From a value, subtracts each element of a sparse matrix.</summary>
            <param name="value" type="float">The value to subtract.</param>
            <param name="matrix" type="SparseFloatArray">Sparse matrix on the right side.</param>
            <returns>A dense FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.op_Subtraction(System.Int32,ShoNS.Array.SparseFloatArray)">
            <summary>From a value, subtracts each element of a sparse matrix.</summary>
            <param name="value" type="int">The value to subtract.</param>
            <param name="matrix" type="SparseFloatArray">Sparse matrix on the right side.</param>
            <returns>A dense FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.op_Subtraction(System.Double,ShoNS.Array.SparseFloatArray)">
            <summary>From a value, subtracts each element of a sparse matrix.</summary>
            <param name="value" type="double">The value to subtract.</param>
            <param name="matrix" type="SparseFloatArray">Sparse matrix on the right side.</param>
            <returns>A dense DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.op_Multiply(ShoNS.Array.SparseFloatArray,ShoNS.Array.SparseFloatArray)">
            <summary>Multiplies two sparse matrices.</summary>
            <param name="matrixLeft" type="SparseFloatArray">Matrix on the left side.</param>
            <param name="matrixRight" type="SparseFloatArray">Matrix on the right side.</param>
            <returns>Returns an object which is either a dense matrix (FloatArray) or sparse matrix (SparseFloatArray).</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.op_Multiply(ShoNS.Array.SparseFloatArray,ShoNS.Array.SparseIntArray)">
            <summary>Multiplies two sparse matrices.</summary>
            <param name="matrixLeft" type="SparseFloatArray">Matrix on the left side.</param>
            <param name="matrixRight" type="SparseIntArray">Matrix on the right side.</param>
            <returns>Returns an object which is either a dense matrix (FloatArray) or sparse matrix (SparseFloatArray).</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.op_Multiply(ShoNS.Array.SparseFloatArray,ShoNS.Array.SparseDoubleArray)">
            <summary>Multiplies two sparse matrices.</summary>
            <param name="matrixLeft" type="SparseFloatArray">Matrix on the left side.</param>
            <param name="matrixRight" type="SparseDoubleArray">Matrix on the right side.</param>
            <returns>Returns an object which is either a dense matrix (DoubleArray) or sparse matrix (SparseDoubleArray).</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.op_Multiply(ShoNS.Array.SparseFloatArray,ShoNS.Array.DoubleArray)">
            <summary>Multiplies two matrices.</summary>
            <param name="matrixLeft" type="SparseFloatArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="DoubleArray">Matrix on the right side.</param>
            <returns>A dense DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.op_Multiply(ShoNS.Array.SparseFloatArray,ShoNS.Array.FloatArray)">
            <summary>Multiplies two matrices.</summary>
            <param name="matrixLeft" type="SparseFloatArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="FloatArray">Matrix on the right side.</param>
            <returns>A dense FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.op_Multiply(ShoNS.Array.SparseFloatArray,ShoNS.Array.IntArray)">
            <summary>Multiplies two matrices.</summary>
            <param name="matrixLeft" type="SparseFloatArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="IntArray">Matrix on the right side.</param>
            <returns>A dense FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.op_Multiply(ShoNS.Array.SparseFloatArray,System.Single)">
            <summary>Multiplies each element of a matrix by a value.</summary>
            <param name="matrix" type="SparseFloatArray">Matrix on the left side.</param>
            <param name="value" type="float">The value to multiply.</param>
            <returns>A SparseFloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.op_Multiply(ShoNS.Array.SparseFloatArray,System.Int32)">
            <summary>Multiplies each element of a matrix by a value.</summary>
            <param name="matrix" type="SparseFloatArray">Matrix on the left side.</param>
            <param name="value" type="int">The value to multiply.</param>
            <returns>A SparseFloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.op_Multiply(ShoNS.Array.SparseFloatArray,System.Double)">
            <summary>Multiplies each element of a matrix by a value.</summary>
            <param name="matrix" type="SparseFloatArray">Matrix on the left side.</param>
            <param name="value" type="double">The value to multiply.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.op_Multiply(System.Single,ShoNS.Array.SparseFloatArray)">
            <summary>Multiplies each element of a matrix by a value.</summary>
            <param name="value" type="float">The value to multiply.</param>
            <param name="matrix" type="SparseFloatArray">Matrix on the right side.</param>
            <returns>A SparseFloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.op_Multiply(System.Int32,ShoNS.Array.SparseFloatArray)">
            <summary>Multiplies each element of a matrix by a value.</summary>
            <param name="value" type="int">The value to multiply.</param>
            <param name="matrix" type="SparseFloatArray">Matrix on the right side.</param>
            <returns>A SparseFloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.op_Multiply(System.Double,ShoNS.Array.SparseFloatArray)">
            <summary>Multiplies each element of a matrix by a value.</summary>
            <param name="value" type="double">The value to multiply.</param>
            <param name="matrix" type="SparseFloatArray">Matrix on the right side.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.ElementMultiply(ShoNS.Array.SparseFloatArray)">
            <summary>Multiplies the elements of two matrices.</summary>
            <param name="otherMatrix" type="SparseFloatArray">Sparse matrix on the right side.</param>
            <returns>A SparseFloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.ElementMultiply(ShoNS.Array.SparseDoubleArray)">
            <summary>Multiplies the elements of two matrices.</summary>
            <param name="otherMatrix" type="SparseDoubleArray">Sparse matrix on the right side.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.ElementMultiply(ShoNS.Array.SparseIntArray)">
            <summary>Multiplies the elements of two matrices.</summary>
            <param name="otherMatrix" type="SparseIntArray">Sparse matrix on the right side.</param>
            <returns>A SparseFloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.MultiplyAccum(System.Single,ShoNS.Array.SparseFloatArray)">
            <summary>matrix += alpha*b</summary>
            <param name="alpha" type="float">The value to multiply.</param>
            <param name="matrixRight" type="SparseFloatArray">Matrix on the right side.</param>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.MultiplyInto(ShoNS.Array.SparseFloatArray,ShoNS.Array.SparseFloatArray)">
            <summary>Multiplies a and b and stores the results in this FloatArray.</summary>
            <param name="matrixLeft" type="SparseFloatArray">Matrix on the left side.</param>
            <param name="matrixRight" type="SparseFloatArray">Matrix on the right side.</param>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.MultiplyInto(System.Single,ShoNS.Array.SparseFloatArray,System.Boolean,ShoNS.Array.SparseFloatArray,System.Boolean,System.Single)">
            <summary>Performs this = alpha*op(matrixLeft)*op(matrixRight) + beta*this, storing the results in this FloatArray.</summary>
            <param name="alpha" type="float">Scalar</param>
            <param name="matrixLeft" type="SparseFloatArray">Matrix to the left.</param>
            <param name="transLeft" type="bool">If true, op(matrixLeft) = matrixLeft.T. If false, op(matrixLeft) = matrixLeft</param>
            <param name="matrixRight" type="SparseFloatArray">Matrix to the right.</param>
            <param name="transRight" type="bool">If true, op(matrixRight) = matrixRight.T. If false, op(matrixRight) = matrixRight</param>
            <param name="beta" type="float">Scalar used to multiply this matrix</param>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.MultiplyTranspose(System.Boolean)">
            <summary>Multiplies the matrix by its transpose or vice versa: A'*A or A*A'.</summary>
            <param name="transFirst" type="bool">If true, the transpose is on the left side; else it's on the right.</param>
            <returns>Returns an object which is either a dense matrix (FloatArray) or sparse matrix (SparseFloatArray).</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.ElementMultiply(ShoNS.Array.DoubleArray)">
            <summary>Multiplies the elements of two matrices.</summary>
            <param name="otherMatrix" type="DoubleArray">Matrix on the right side.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.ElementMultiply(ShoNS.Array.FloatArray)">
            <summary>Multiplies the elements of two matrices.</summary>
            <param name="otherMatrix" type="FloatArray">Matrix on the right side.</param>
            <returns>A SparseFloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.ElementMultiply(ShoNS.Array.IntArray)">
            <summary>Multiplies the elements of two matrices.</summary>
            <param name="otherMatrix" type="IntArray">Matrix on the right side.</param>
            <returns>A SparseFloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.op_Division(ShoNS.Array.SparseFloatArray,System.Single)">
            <summary>Divides the elements of a matrix by a value.</summary>
            <param name="matrix" type="SparseFloatArray">Matrix on the left side.</param>
            <param name="value" type="float">Value to divide.</param>
            <returns>A SparseFloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.op_Division(ShoNS.Array.SparseFloatArray,System.Int32)">
            <summary>Divides the elements of a matrix by a value.</summary>
            <param name="matrix" type="SparseFloatArray">Matrix on the left side.</param>
            <param name="value" type="int">Value to divide.</param>
            <returns>A SparseFloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.op_Division(ShoNS.Array.SparseFloatArray,System.Double)">
            <summary>Divides the elements of a matrix by a value.</summary>
            <param name="matrix" type="SparseFloatArray">Matrix on the left side.</param>
            <param name="value" type="double">Value to divide.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.op_Division(System.Single,ShoNS.Array.SparseFloatArray)">
            <summary>Divides a value by the elements of a matrix.</summary>
            <param name="value" type="float">Value to divide.</param>
            <param name="matrix" type="SparseFloatArray">Matrix on the right side.</param>
            <returns>A SparseFloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.op_Division(System.Int32,ShoNS.Array.SparseFloatArray)">
            <summary>Divides a value by the elements of a matrix.</summary>
            <param name="value" type="int">Value to divide.</param>
            <param name="matrix" type="SparseFloatArray">Matrix on the right side.</param>
            <returns>A SparseFloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.op_Division(System.Double,ShoNS.Array.SparseFloatArray)">
            <summary>Divides a value by the elements of a matrix.</summary>
            <param name="value" type="double">Value to divide.</param>
            <param name="matrix" type="SparseFloatArray">Matrix on the right side.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.ElementDivide(ShoNS.Array.DoubleArray)">
            <summary>Divides the elements of two matrix.</summary>
            <param name="otherMatrix" type="DoubleArray">Matrix on the right side.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.ElementDivide(ShoNS.Array.FloatArray)">
            <summary>Divides the elements of two matrix.</summary>
            <param name="otherMatrix" type="FloatArray">Matrix on the right side.</param>
            <returns>A SparseFloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.ElementDivide(ShoNS.Array.IntArray)">
            <summary>Divides the elements of two matrix.</summary>
            <param name="otherMatrix" type="IntArray">Matrix on the right side.</param>
            <returns>A SparseFloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.op_UnaryNegation(ShoNS.Array.SparseFloatArray)">
            <summary>Negates each element of the matrix.</summary>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.Negate">
            <summary>Negates each element of the matrix.</summary>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.Dot(ShoNS.Array.SparseDoubleArray)">
            <summary>Computes the vector dot product.</summary>
            <param name="otherVector" type="SparseDoubleArray">Sparse vector to dot.</param>
            <returns>Returns the vector dot product (double).</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.Dot(ShoNS.Array.SparseFloatArray)">
            <summary>Computes the vector dot product.</summary>
            <param name="otherVector" type="SparseFloatArray">Sparse vector to dot.</param>
            <returns>Returns the vector dot product (float).</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.Dot(ShoNS.Array.SparseIntArray)">
            <summary>Computes the vector dot product.</summary>
            <param name="otherVector" type="SparseIntArray">Sparse vector to dot.</param>
            <returns>Returns the vector dot product (float).</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.Dot(ShoNS.Array.DoubleArray)">
            <summary>Computes the vector dot product.</summary>
            <param name="otherVector" type="DoubleArray">Vector to dot.</param>
            <returns>Returns the vector dot product (double).</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.Dot(ShoNS.Array.FloatArray)">
            <summary>Computes the vector dot product.</summary>
            <param name="otherVector" type="FloatArray">Vector to dot.</param>
            <returns>Returns the vector dot product (float).</returns>
        </member>
        <member name="M:ShoNS.Array.SparseFloatArray.Dot(ShoNS.Array.IntArray)">
            <summary>Computes the vector dot product.</summary>
            <param name="otherVector" type="IntArray">Vector to dot.</param>
            <returns>Returns the vector dot product (float).</returns>
        </member>
        <member name="P:ShoNS.Array.SparseFloatArray.Rows">
            <summary>Returns an IEnumerable object that can be used to iterate over the rows of the matrix.</summary>
        </member>
        <member name="P:ShoNS.Array.SparseFloatArray.Cols">
            <summary>Returns an IEnumerable object that can be used to iterate over the columns of the matrix.</summary>
        </member>
        <member name="P:ShoNS.Array.SparseFloatArray.T">
            <summary>Transposes the 1st and 2nd dimensions of the matrix, making a deep copy.</summary>
            <returns>Returns a deep copy of transposed matrix.</returns>
        </member>
        <member name="P:ShoNS.Array.SparseFloatArray.Diagonal">
            <summary>Returns the main diagonal of the matrix as a vectory or sets the main diagonal to the inputObject vector.</summary>
        </member>
        <member name="P:ShoNS.Array.SparseFloatArray.CountCells">
            <summary>Returns the number of set items in the matrix.</summary>
        </member>
        <member name="P:ShoNS.Array.SparseFloatArray.StorageFormat">
            <summary>Returns the storage format of the sparse matrix.</summary>
        </member>
        <member name="P:ShoNS.Array.SparseFloatArray.NullValue">
            <summary>Returns the null (unset) value for the matrix.</summary>
        </member>
        <member name="T:ShoNS.Array.SparseIntArray">
            <summary>This class implements functionality for a sparse matrix with integer elements.</summary>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.Zeros(System.Int32)">
            <summary>Creates a SparseIntArray of the given length, filled with zeros.</summary>
            <param name="length">Vector length</param>        
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.Zeros(System.Int32,System.Int32)">
            <summary>Creates a SparseIntArray of size0 x size1, filled with zeros.</summary>
            <param name="size0">Number of rows</param>
            <param name="size1">Number of columns</param>           
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.FromFile(System.String)">
            <summary>Creates an array from a file, using binary serialization.</summary>
            <param name="fileName" type="String">Name of file from which to create the array.</param>    
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.FromStream(System.IO.Stream)">
            <summary>Creates an array from a stream, using binary serialization.</summary>
            <param name="stream" type="System.IO.Stream">Stream from which to create the array.</param>  
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.From(ShoNS.Array.NumArrayBase{System.Int32})">
             <summary>Creates a matrix (deep copy) from another matrix or array.</summary>
            <param name="input">Array to copy</param>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.From(System.Collections.IEnumerable)">
            <summary>Creates a deep copy from an IEnumerable object</summary>
            <param name="input">Enumerable to copy</param>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.#ctor(System.Int32)">
            <summary>Creates a SparseIntArray of the given length, filled with zeros.</summary>
            <param name="length">Vector length</param>        
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.#ctor(System.Int32,System.Int32)">
            <summary>Creates a SparseIntArray of size0 x size1, filled with zeros.</summary>
            <param name="size0">Number of rows</param>
            <param name="size1">Number of columns</param>           
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.#ctor(ShoNS.Array.SparseIntArray,ShoNS.Array.SparseStorageFormat)">
            <summary>Creates a matrix from the input matrix.</summary>
            <param name="inputMatrix" type="SparseIntArray">Input matrix from which to create the output matrix.</param>  
            <param name="storageFormat" type="SparseStorageFormat">Storage format of the output sparse matrix.</param>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.#ctor(ShoNS.Array.IntArray,ShoNS.Array.SparseStorageFormat)">
            <summary>Creates a matrix from the input matrix.</summary>
            <param name="inputMatrix" type="IntArray">Input matrix from which to create the output matrix.</param>  
            <param name="storageFormat" type="SparseStorageFormat">Storage format of the output sparse matrix.</param>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.#ctor(System.Int32,ShoNS.Array.SparseStorageFormat)">
            <summary>Creates a one-dimensional matrix.</summary>
            <param name="size" type="int">Number of elements in the matrix.</param> 
            <param name="storageFormat" type="SparseStorageFormat">Storage format of the sparse matrix.</param>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.#ctor(System.Int32,System.Int32,ShoNS.Array.SparseStorageFormat)">
            <summary>Creates a two-dimensional matrix.</summary>
            <param name="size0" type="int">Number of rows in the matrix.</param> 
            <param name="size1" type="int">Number of columns in the matrix.</param> 
            <param name="storageFormat" type="SparseStorageFormat">Storage format of the sparse matrix.</param>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.#ctor(System.Int32,System.Int32,System.Single,ShoNS.Array.SparseStorageFormat)">
            <summary>Creates a two-dimensional matrix.</summary>
            <param name="size0" type="int">Number of rows in the matrix.</param> 
            <param name="size1" type="int">Number of columns in the matrix.</param> 
            <param name="density" type="float">Expected approximate ratio of non-zeros to zeros.</param>
            <param name="storageFormat" type="SparseStorageFormat">Storage format of the sparse matrix.</param>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.#ctor(System.Object,ShoNS.Array.SparseStorageFormat)">
            <summary>Creates a matrix from the contents of an object.</summary>
            <param name="inputObject" type="Object">Object from which to create the matrix.</param>  
            <param name="storageFormat" type="SparseStorageFormat">Storage format of the sparse matrix.</param>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.#ctor(System.Collections.IList,System.Collections.IList)">
            <summary>Creates a vector from index and value lists</summary>
            <param name="index0List">Indices</param>
            <param name="valueList">Values</param>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.#ctor(System.Int32,System.Collections.IList,System.Collections.IList)">
            <summary>Creates a vector from index and value lists</summary>
            <param name="size0">Number of elements</param>
            <param name="index0List">Indices</param>
            <param name="valueList">Values</param>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.#ctor(System.Collections.IList,System.Collections.IList,System.Boolean)">
            <summary>Creates a vector from index and value lists</summary>
            <param name="index0List">Indices</param>
            <param name="valueList">Values</param>
            <param name="useFastInsert">If true, the list of indices is already sorted</param>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.#ctor(System.Int32,System.Collections.IList,System.Collections.IList,System.Boolean)">
            <summary>Creates a vector from index and value lists</summary>
            <param name="size0"></param>
            <param name="index0List">Indices</param>
            <param name="valueList">Values</param>
            <param name="useFastInsert">If true, the list of indices is already sorted</param>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.#ctor(System.Collections.IList,System.Collections.IList,System.Collections.IList)">
            <summary>Creates a matrix from index and value lists</summary>
            <param name="index0List">Row indices</param>
            <param name="index1List">Column indices</param>
            <param name="valueList">Values</param>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.#ctor(System.Int32,System.Int32,System.Collections.IList,System.Collections.IList,System.Collections.IList)">
            <summary>Creates a matrix from index and value lists</summary>
            <param name="size0">Number of rows</param>
            <param name="size1">Number of columns</param>
            <param name="index0List">Row indices</param>
            <param name="index1List">Column indices</param>
            <param name="valueList">Values</param>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.#ctor(System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Boolean)">
            <summary>Creates a matrix from index and value lists</summary>
            <param name="index0List">Row indices</param>
            <param name="index1List">Column indices</param>
            <param name="valueList">Values</param>
            <param name="useFastInsert">If true, the list of indices is already sorted</param>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.#ctor(System.Int32,System.Int32,System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Boolean)">
            <summary>Creates a matrix from index and value lists</summary>
            <param name="size0">Number of rows</param>
            <param name="size1">Number of columns</param>
            <param name="index0List">Row indices</param>
            <param name="index1List">Column indices</param>
            <param name="valueList">Values</param>
            <param name="useFastInsert">If true, the list of indices is already sorted</param>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.#ctor(System.String,ShoNS.Array.SparseFileFormat,System.Boolean,ShoNS.Array.SparseStorageFormat)">
            <summary>Creates a matrix from index and value lists</summary>
            <param name="fileName">Name of file</param>
            <param name="fileFormat">File format</param>
            <param name="zeroIndexing">If true, uses zero-based indexing</param>
            <param name="storageFormat">Storage format</param>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.SameValues(ShoNS.Array.SparseIntArray)">
            <summary>Determines if two matrices are the exactly same.</summary>
            <param name="matrixToCompare" type="SparseIntArray">Matrix to compare.</param>
            <returns>true if the matrices are the same; false if different.</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.SameValues(ShoNS.Array.IntArray)">
            <summary>Determines if two matrices are the exactly same.</summary>
            <param name="matrixToCompare" type="IntArray">Matrix to compare.</param>
            <returns>true if the matrices are the same; false if different.</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.AlongDim(System.Int32)">
            <summary>Returns an IEnumerable object that can be used to iterate along a dimension of a matrix.</summary>
            <param name="dim">Along which dimension</param>        
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.RowElements(System.Int32)">
            <summary>Returns an IEnumerable object that can be used to iterate over the elements of a given row.</summary>
            <param name="rowIndex" type="int">The index of the row to return.</param>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.ColumnElements(System.Int32)">
            <summary>Returns an IEnumerable object that can be used to iterate over the elements of a given column.</summary>
            <param name="colIndex" type="int">The index of the row to return.</param>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.TransposeDeep">
            <summary>Transposes the 1st and 2nd dimensions of the matrix, making a deep copy.</summary>
            <returns>Returns a deep copy of transposed matrix.</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.Transpose">
            <summary>Transposes the 1st and 2nd dimensions of the matrix, making a shallow copy.</summary>
            <returns>Returns a shallow copy of transposed matrix.</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.CopyDeep">
            <summary>Makes a deep copy of the matrix; the new matrix has its own storage.</summary>
            <returns>Returns a deep copy the matrix.</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.CopyShallow">
            <summary>Makes a shallow copy of the matrix; the new matrix shares its storage with the original matrix.</summary>
            <returns>Returns a shallow copy the matrix.</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.ToVector">
            <summary>Makes a vector, copying the elements in row-column order.</summary>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.GetSlice(System.Int32,System.Int32)">
            <summary>Creates a submatrix (shallow copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndexInclusive" type="int">Maximum index (inclusive) in the slice.</param>  
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.GetSliceDeep(System.Int32,System.Int32)">
            <summary>Creates a submatrix (deep copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndexInclusive" type="int">Maximum index (inclusive) in the slice.</param>  
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.GetSlice(System.Int32,System.Int32,System.Int32)">
            <summary>Creates a submatrix (shallow copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndexInclusive" type="int">Maximum index (inclusive) in the slice.</param>  
            <param name="step">Step</param>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.GetSliceDeep(System.Int32,System.Int32,System.Int32)">
            <summary>Creates a submatrix (deep copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndexInclusive" type="int">Maximum index (inclusive) in the slice.</param>  
            <param name="step">Step</param>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.GetSlice(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a submatrix (shallow copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRowInclusive" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastColInclusive" type="int">Maximum column number (inclusive) in the slice.</param>          
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.GetSliceDeep(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a submatrix (deep copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRowInclusive" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastColInclusive" type="int">Maximum column number (inclusive) in the slice.</param>          
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.GetSliceDeep(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a submatrix (deep copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRowInclusive" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="stepRow" type="int">Row step size.</param> 
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastColInclusive" type="int">Maximum column number (inclusive) in the slice.</param>          
            <param name="stepCol" type="int">Column step size.</param> 
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.GetSlice(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a submatrix (shallow copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRowInclusive" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="stepRow" type="int">Row step size.</param> 
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastColInclusive" type="int">Maximum column number (inclusive) in the slice.</param>          
            <param name="stepCol" type="int">Column step size.</param> 
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.GetSliceDeep(ShoNS.Array.Slice[])">
            <summary>Creates a submatrix (deep copy).</summary>
            <param name="slices">Slices to get</param>        
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.GetSlice(ShoNS.Array.Slice[])">
            <summary>Creates a submatrix (shallow copy).</summary>
            <param name="slices">Slices to get</param>        
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.GetArrayEntries(System.Collections.Generic.IEnumerable{ShoNS.Array.IArrayEntry})">
            <summary>Creates an array (deep copy) from the array entries.</summary>
            <param name="arrayEntries">Enumerable of array entries to get</param>   
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.GetColSparse(System.Int32)">
            <summary>Returns a column in a sparse vector.</summary>
            <param name="colIndex" type="int">The index of the column to retrieve.</param>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.GetColsSparse(System.Collections.Generic.IList{System.Int32})">
            <summary>Returns one or more columns in a new sparse matrix.</summary>
            <param name="colsToGet">List of column indices to retrieve.</param>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.GetRowSparse(System.Int32)">
            <summary>Returns a row in a sparse vector.</summary>
            <param name="rowIndex" type="int">The index of the row to retrieve.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.GetRowsSparse(System.Collections.Generic.IList{System.Int32})">
            <summary>Returns one or more rows in a new sparse matrix.</summary>
            <param name="rowsToGet">List of row indices to retrieve</param>     
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.AccumulateValue(System.Int32,System.Int32,System.Int32)">
            <summary>Used to add or change an element in a sparse matrix.</summary>
            <param name="rowIndex" type="int">The row index of the element.</param>         
            <param name="colIndex" type="int">The column index of the element.</param>         
            <param name="value" type="Object">The value to set.</param>         
            <remarks>The value is not saved to the matrix until CommitValues is called.</remarks>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.AccumulateValue(System.Int32,System.Int32)">
            <summary>Used to add or change an element in a 1D sparse matrix.</summary>
            <param name="index" type="int">The index of the element.</param>         
            <param name="value" type="Object">The value to set.</param>         
            <remarks>The value is not saved to the matrix until CommitValues is called.</remarks>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.ColumnLength(System.Int32)">
            <summary>Returns the number of set items in the given column.</summary>
            <param name="colIndex" type="int">The index of the column to retrieve.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.CommitValues">
            <summary>Commits the values added by AccumulateValue.</summary>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.GetCellIndex(System.Int32,System.Int32)">
            <summary>Returns the cell index corresponding to the given matrix indices, returns -1 for unset elements.</summary>
            <param name="rowIndex">The index of the row to retrieve</param>
            <param name="colIndex">The index of the column to retrieve</param>          
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.GetCellValue(System.Int32)">
            <summary>Returns the value of the matrix at the given cell index.</summary>
            <param name="cellIndex" type="int">The index of the cell to retrieve.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.RowLength(System.Int32)">
            <summary>Returns the number of set items in the given row.</summary>
            <param name="rowIndex" type="int">The index of the row to retrieve.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.RowElementColumns(System.Int32)">
            <summary>Returns a list of the column indices of the set items in the given row.</summary>
            <param name="rowIndex">Row index</param>            
            <exception cref="T:System.NotImplementedException">Thrown when array not in CSR format</exception>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.RowElementValues(System.Int32)">
            <summary>Returns a list of the values of the set items in the given row.</summary>
            <param name="rowIndex">Row index</param>            
            <exception cref="T:System.NotImplementedException">Thrown when array not in CSR format</exception>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.ColumnElementRows(System.Int32)">
            <summary>Returns a list of the row indices of the set items in the given column.</summary>
            <param name="colIndex">Column index</param>            
            <exception cref="T:System.NotImplementedException">Thrown when array not in CSC format</exception>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.ColumnElementValues(System.Int32)">
            <summary>Returns a list of the values of the set items in the given column.</summary>
            <param name="colIndex">Column index</param>            
            <exception cref="T:System.NotImplementedException">Thrown when array not in CSC format</exception>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.SwapRows(System.Int32,System.Int32)">
            <summary>Swaps the two rows.</summary>
            <param name="rowIndex1" type="int">The index of the first row to swap.</param>         
            <param name="rowIndex2" type="int">The index of the second row to swap.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.RemoveZeros">
            <summary>Removes zero entries.</summary>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.ImportFromList(System.Collections.IList,System.Collections.IList)">
            <summary>Loads the 1D sparse matrix from a pair of lists.</summary>
            <param name="index0List" type="IList">The list of indices in Coordinate format.</param>         
            <param name="inputValueList" type="IList">The list of corresponding values.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.ImportFromList(System.Collections.IList,System.Collections.IList,System.Boolean)">
            <summary>Loads the 1D sparse matrix from a pair of lists in specific sort-order.</summary>
            <param name="index0List" type="IList">The list of indices.</param>         
            <param name="inputValueList" type="IList">The list of corresponding values.</param>         
            <param name="sortedInput" type="bool">The inputObject list is sorted.</param>     
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.ImportFromList(System.Collections.IList,System.Collections.IList,System.Collections.IList)">
            <summary>Loads the 2D sparse matrix from a triplet of lists.</summary>
            <param name="index0List" type="IList">The list of row indices in Coordinate format.</param> 
            <param name="index1List" type="IList">The list of corresponding column indices in Coordinate format.</param> 
            <param name="inputValueList" type="IList">The list of corresponding values.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.ImportFromList(System.Collections.IList,System.Collections.IList,System.Collections.IList,ShoNS.Array.SortOrder)">
            <summary>Loads the 2D sparse matrix from a triplet of lists in specific sort-order.</summary>
            <param name="index0List" type="IList">The first list of indices.</param>         
            <param name="index1List" type="IList">The second list of indices.</param>         
            <param name="inputValueList" type="IList">The list of corresponding values.</param>         
            <param name="inputOrder" type="SortOrder">The linear sort order of inputObject lists.</param> 
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.ExportToList(System.Collections.IList@,System.Collections.IList@)">
            <summary>Constructs pair of lists from the 1D sparse matrix.</summary>
            <param name="index0List" type="IList">The list of indices in Coordinate format.</param>         
            <param name="outputValueList" type="IList">The list of corresponding values.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.ExportToList(System.Collections.IList@,System.Collections.IList@,System.Collections.IList@)">
            <summary>Constructs triplet of lists from the 2D sparse matrix.</summary>
            <param name="index0List" type="IList">The list of row indices in Coordinate format.</param> 
            <param name="index1List" type="IList">The list of corresponding column indices in Coordinate format.</param> 
            <param name="outputValueList" type="IList">The list of corresponding values.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.ExportToList(System.Collections.IList@,System.Collections.IList@,System.Collections.IList@,ShoNS.Array.SortOrder)">
            <summary>Constructs triplet of lists in specific sort-order from the 2D sparse matrix.</summary>
            <param name="index0List" type="IList">The first list of indices.</param>         
            <param name="index1List" type="IList">The second list of indices.</param>         
            <param name="outputValueList" type="IList">The list of corresponding values.</param>         
            <param name="outputOrder" type="SortOrder">The linear sort order of output lists.</param> 
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.ExportToLists(System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@)">
            <summary>Constructs pair of lists from the 1D sparse matrix.</summary>
            <param name="index0List">The list of indices in Coordinate format.</param>         
            <param name="outputValueList">The list of corresponding values.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.ExportToLists(System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@)">
            <summary>Constructs triplet of lists from the 2D sparse matrix.</summary>
            <param name="index0List">The list of row indices in Coordinate format.</param> 
            <param name="index1List">The list of corresponding column indices in Coordinate format.</param> 
            <param name="outputValueList">The list of corresponding values.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.ExportToLists(System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@,ShoNS.Array.SortOrder)">
            <summary>Constructs triplet of lists in specific sort-order from the 2D sparse matrix.</summary>
            <param name="index0List">The first list of indices.</param>         
            <param name="index1List">The second list of indices.</param>         
            <param name="outputValueList">The list of corresponding values.</param>         
            <param name="outputOrder">The linear sort order of output lists.</param> 
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.ImportFromFile(System.String,ShoNS.Array.SparseFileFormat,System.Boolean)">
            <summary>Initialize sparse matrix from file stored in COO format with default delimiter (space or comma) and specific indexing (0 or 1).</summary>
            <param name="fileName" type="string">The name of inputObject file.</param>
            <param name="fileFormat" type="SparseFileFormat">Input file format: {MM, COOH, MTL, HB}.</param> 
            <param name="zeroIndexing" type="bool">File data indexing is 0 based.</param> 
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.ExportToFile(System.String,ShoNS.Array.SparseFileFormat,System.Boolean)">
            <summary>Create a file in COO format with specific data indexing (0 or 1) from sparse object.</summary>
            <param name="fileName" type="string">The name of inputObject file.</param>
            <param name="fileFormat" type="SparseFileFormat">Input file format: {MM, COOH, MTL, HB}.</param> 
            <param name="zeroIndexing" type="bool">File data indexing is 0 based.</param> 
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.Norm(ShoNS.Array.NormType)">
            <summary>Computes the matrix norm.</summary>
            <param name="normToCompute" type="NormType">Type of norm to compute.</param>
            <remarks>IntArray objects implement the two-norm via SVD if the inputObject is a 2D matrix.</remarks>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.Sum(ShoNS.Array.DimOp)">
            <summary>Computes the sum along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the sum.</param>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.Min(ShoNS.Array.DimOp)">
            <summary>Finds the minimum element value along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to find the minimum.</param>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.Max(ShoNS.Array.DimOp)">
            <summary>Finds the maximum element value along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to find the maximum.</param>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.Mean">
            <summary>Computes the mean over the array or matrix</summary>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.Median">
            <summary>Computes the median over the array or matrix</summary>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.Var">
            <summary>Computes the variance (normalized by N-1) over the array or matrix</summary>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.VarN">
            <summary>Computes the variance (normalized by N) over the array or matrix</summary>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.Std">
            <summary>Computes the standard deviation over the array or matrix</summary>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.Mean(ShoNS.Array.DimOp)">
            <summary>Computes the mean along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the mean.</param>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.Median(ShoNS.Array.DimOp)">
            <summary>Computes the median along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the median.</param>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.Var(ShoNS.Array.DimOp)">
            <summary>Computes the variance, normalized by N-1, along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the variance.</param>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.VarN(ShoNS.Array.DimOp)">
            <summary>Computes the variance, normalized by N, along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the variance.</param>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.Std(ShoNS.Array.DimOp)">
            <summary>Computes the standard deviation long the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the standard deviation.</param>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.Det">
            <summary>Computes the matrix determinant, for square matrics only.</summary>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.Add(ShoNS.Array.SparseIntArray)">
            <summary>Adds two matrices.</summary>
            <param name="otherMatrix">The other matrix</param>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.Subtract(ShoNS.Array.SparseIntArray)">
            <summary>Subtracts two matrices.</summary>
            <param name="otherMatrix">The other matrix</param>        
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.Add(System.Int32)">
             <summary>Adds a value to each element of the matrix.</summary>
            <param name="value">The value to add</param>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.Subtract(System.Int32)">
            <summary>Adds a value to each element of the matrix.</summary>
            <param name="value">The value to subtract</param>        
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.RSubtract(System.Int32)">
            <summary>From a value, subtracts each value of the matrix.</summary>
            <param name="value">The value from which to subtract</param>          
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.Multiply(ShoNS.Array.SparseIntArray)">
            <summary>Multiplies two matrices.</summary>
            <param name="otherMatrix">The other matrix</param>        
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.Multiply(System.Int32)">
            <summary>Multiplies each element of the matrix by a value.</summary>
            <param name="value">The value to multiply</param>         
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.Divide(System.Int32)">
            <summary>Divides each element of the matrix by a value.</summary>
            <param name="value">The value to divide</param>          
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.RDivide(System.Int32)">
            <summary>From a value, divides each element of the matrix.</summary>
            <param name="value">The value from which to divide</param>          
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.op_Addition(ShoNS.Array.SparseIntArray,ShoNS.Array.SparseIntArray)">
            <summary>Adds two sparse matrices.</summary>
            <param name="matrixLeft" type="SparseIntArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="SparseIntArray">Sparse matrix on the right side.</param>
            <returns>A SparseIntArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.op_Addition(ShoNS.Array.SparseIntArray,ShoNS.Array.SparseFloatArray)">
            <summary>Adds two sparse matrices.</summary>
            <param name="matrixLeft" type="SparseIntArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="SparseFloatArray">Sparse matrix on the right side.</param>
            <returns>A SparseFloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.op_Addition(ShoNS.Array.SparseIntArray,ShoNS.Array.SparseDoubleArray)">
            <summary>Adds two sparse matrices.</summary>
            <param name="matrixLeft" type="SparseFloatArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="SparseFloatArray">Sparse matrix on the right side.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.op_Addition(ShoNS.Array.SparseIntArray,ShoNS.Array.DoubleArray)">
            <summary>Adds two matrices.</summary>
            <param name="matrixLeft" type="SparseIntArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="DoubleArray">Matrix on the right side.</param>
            <returns>A dense DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.op_Addition(ShoNS.Array.SparseIntArray,ShoNS.Array.FloatArray)">
            <summary>Adds two matrices.</summary>
            <param name="matrixLeft" type="SparseIntArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="FloatArray">Matrix on the right side.</param>
            <returns>A dense FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.op_Addition(ShoNS.Array.SparseIntArray,ShoNS.Array.IntArray)">
            <summary>Adds two matrices.</summary>
            <param name="matrixLeft" type="SparseIntArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="IntArray">Matrix on the right side.</param>
            <returns>A dense IntArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.op_Addition(ShoNS.Array.SparseIntArray,System.Int32)">
            <summary>Adds a value to each element of a sparse matrix.</summary>
            <param name="matrix" type="SparseIntArray">The matrix to which to add the value.</param>
            <param name="value" type="int">The value to add.</param>
            <returns>A dense IntArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.op_Addition(System.Int32,ShoNS.Array.SparseIntArray)">
            <summary>Adds a value to each element of a sparse matrix.</summary>
            <param name="value" type="int">The value to add.</param>
            <param name="matrix" type="SparseIntArray">Sparse matrix to which to add the value.</param>
            <returns>A dense IntArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.op_Subtraction(ShoNS.Array.SparseIntArray,ShoNS.Array.SparseIntArray)">
            <summary>Subtracts a sparse matrix from a sparse matrix.</summary>
            <param name="matrixLeft" type="SparseIntArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="SparseIntArray">Sparse matrix on the right side.</param>
            <returns>A SparseIntArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.op_Subtraction(ShoNS.Array.SparseIntArray,ShoNS.Array.SparseFloatArray)">
            <summary>Subtracts a sparse matrix from a sparse matrix.</summary>
            <param name="matrixLeft" type="SparseIntArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="SparseFloatArray">Sparse matrix on the right side.</param>
            <returns>A SparseFloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.op_Subtraction(ShoNS.Array.SparseIntArray,ShoNS.Array.SparseDoubleArray)">
            <summary>Subtracts a sparse matrix from a sparse matrix.</summary>
            <param name="matrixLeft" type="SparseIntArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="SparseDoubleArray">Sparse matrix on the right side.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.op_Subtraction(ShoNS.Array.SparseIntArray,ShoNS.Array.DoubleArray)">
            <summary>Subtracts a matrix from a sparse matrix.</summary>
            <param name="matrixLeft" type="SparseIntArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="DoubleArray">Matrix on the right side.</param>
            <returns>A dense DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.op_Subtraction(ShoNS.Array.SparseIntArray,ShoNS.Array.FloatArray)">
            <summary>Subtracts a matrix from a sparse matrix.</summary>
            <param name="matrixLeft" type="SparseIntArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="IntArray">Matrix on the right side.</param>
            <returns>A dense FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.op_Subtraction(ShoNS.Array.SparseIntArray,ShoNS.Array.IntArray)">
            <summary>Subtracts a matrix from a sparse matrix.</summary>
            <param name="matrixLeft" type="SparseIntArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="IntArray">Matrix on the right side.</param>
            <returns>A dense IntArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.op_Subtraction(ShoNS.Array.SparseIntArray,System.Int32)">
            <summary>Subtracts a value from each element of a sparse matrix.</summary>
            <param name="matrix" type="SparseIntArray">Sparse matrix on the left side.</param>
            <param name="value" type="int">The value to subtract.</param>
            <returns>A dense IntArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.op_Subtraction(System.Int32,ShoNS.Array.SparseIntArray)">
            <summary>From a value, subtracts each element of a sparse matrix.</summary>
            <param name="value" type="int">The value to subtract.</param>
            <param name="matrix" type="SparseIntArray">Sparse matrix on the left side.</param>
            <returns>A dense IntArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.op_Multiply(ShoNS.Array.SparseIntArray,ShoNS.Array.SparseIntArray)">
            <summary>Multiplies two sparse matrices.</summary>
            <param name="matrixLeft" type="SparseIntArray">Matrix on the left side.</param>
            <param name="matrixRight" type="SparseIntArray">Matrix on the right side.</param>
            <returns>Returns an object which is either a dense matrix (IntArray) or sparse matrix (SparseIntArray).</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.op_Multiply(ShoNS.Array.SparseIntArray,ShoNS.Array.SparseFloatArray)">
            <summary>Multiplies two sparse matrices.</summary>
            <param name="matrixLeft" type="SparseIntArray">Matrix on the left side.</param>
            <param name="matrixRight" type="SparseDoubleArray">Matrix on the right side.</param>
            <returns>Returns an object which is either a dense matrix (FloatArray) or sparse matrix (SparseFloatArray).</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.op_Multiply(ShoNS.Array.SparseIntArray,ShoNS.Array.SparseDoubleArray)">
            <summary>Multiplies two sparse matrices.</summary>
            <param name="matrixLeft" type="SparseIntArray">Matrix on the left side.</param>
            <param name="matrixRight" type="SparseDoubleArray">Matrix on the right side.</param>
            <returns>Returns an object which is either a dense matrix (DoubleArray) or sparse matrix (SparseDoubleArray).</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.op_Multiply(ShoNS.Array.SparseIntArray,ShoNS.Array.DoubleArray)">
            <summary>Multiplies two matrices.</summary>
            <param name="matrixLeft" type="SparseIntArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="DoubleArray">Matrix on the right side.</param>
            <returns>A dense DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.op_Multiply(ShoNS.Array.SparseIntArray,ShoNS.Array.FloatArray)">
            <summary>Multiplies two matrices.</summary>
            <param name="matrixLeft" type="SparseIntArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="FloatArray">Matrix on the right side.</param>
            <returns>A dense FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.op_Multiply(ShoNS.Array.SparseIntArray,ShoNS.Array.IntArray)">
            <summary>Multiplies two matrices.</summary>
            <param name="matrixLeft" type="SparseIntArray">Sparse matrix on the left side.</param>
            <param name="matrixRight" type="IntArray">Matrix on the right side.</param>
            <returns>A dense IntArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.op_Multiply(ShoNS.Array.SparseIntArray,System.Int32)">
            <summary>Multiplies each element of a matrix by a value.</summary>
            <param name="matrix" type="SparseIntArray">Matrix on the left side.</param>
            <param name="value" type="int">The value to multiply.</param>
            <returns>A SparseIntArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.op_Multiply(System.Int32,ShoNS.Array.SparseIntArray)">
            <summary>Multiplies each element of a matrix by a value.</summary>
            <param name="value" type="int">The value to multiply.</param>
            <param name="matrix" type="SparseIntArray">Matrix on the right side.</param>
            <returns>A SparseIntArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.MultiplyAccum(System.Int32,ShoNS.Array.SparseIntArray)">
            <summary>matrix += alpha*b</summary>
            <param name="alpha" type="int">The value to multiply.</param>
            <param name="matrixRight" type="SparseIntArray">Matrix on the right side.</param>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.MultiplyTranspose(System.Boolean)">
            <summary>Multiplies the matrix by its transpose or vice versa: A'*A or A*A'.</summary>
            <param name="transFirst" type="bool">If true, the transpose is on the left side; else it's on the right.</param>
            <returns>Returns an object which is either a dense matrix (IntArray) or sparse matrix (SparseIntArray).</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.ElementMultiply(ShoNS.Array.SparseIntArray)">
            <summary>Multiplies the elements of two matrices.</summary>
            <param name="otherMatrix" type="SparseIntArray">Sparse matrix on the right side.</param>
            <returns>A SparseIntArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.ElementMultiply(ShoNS.Array.SparseFloatArray)">
            <summary>Multiplies the elements of two matrices.</summary>
            <param name="otherMatrix" type="SparseFloatArray">Sparse matrix on the right side.</param>
            <returns>A SparseFloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.ElementMultiply(ShoNS.Array.SparseDoubleArray)">
            <summary>Multiplies the elements of two matrices.</summary>
            <param name="otherMatrix" type="SparseDoubleArray">Sparse matrix on the right side.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.ElementMultiply(ShoNS.Array.DoubleArray)">
            <summary>Multiplies the elements of two matrices.</summary>
            <param name="otherMatrix" type="DoubleArray">Matrix on the right side.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.ElementMultiply(ShoNS.Array.FloatArray)">
            <summary>Multiplies the elements of two matrices.</summary>
            <param name="otherMatrix" type="FloatArray">Matrix on the right side.</param>
            <returns>A SparseFloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.ElementMultiply(ShoNS.Array.IntArray)">
            <summary>Multiplies the elements of two matrices.</summary>
            <param name="otherMatrix" type="IntArray">Matrix on the right side.</param>
            <returns>A SparseIntArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.op_Division(ShoNS.Array.SparseIntArray,System.Int32)">
            <summary>Divides the elements of a matrix by a value.</summary>
            <param name="matrix" type="SparseIntArray">Matrix on the left side.</param>
            <param name="value" type="int">Value to divide.</param>
            <returns>A SparseIntArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.op_Division(System.Int32,ShoNS.Array.SparseIntArray)">
            <summary>Divides a value by the elements of a matrix.</summary>
            <param name="value" type="int">Value to divide.</param>
            <param name="matrix" type="SparseIntArray">Matrix on the right side.</param>
            <returns>A SparseIntArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.ElementDivide(ShoNS.Array.DoubleArray)">
            <summary>Divides the elements of two matrix.</summary>
            <param name="otherMatrix" type="DoubleArray">Matrix on the right side.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.ElementDivide(ShoNS.Array.FloatArray)">
            <summary>Divides the elements of two matrix.</summary>
            <param name="otherMatrix" type="FloatArray">Matrix on the right side.</param>
            <returns>A SparseFloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.ElementDivide(ShoNS.Array.IntArray)">
            <summary>Divides the elements of two matrix.</summary>
            <param name="otherMatrix" type="IntArray">Matrix on the right side.</param>
            <returns>A SparseIntArray</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.op_UnaryNegation(ShoNS.Array.SparseIntArray)">
            <summary>Negates each element of the matrix.</summary>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.Negate">
            <summary>Negates each element of the matrix.</summary>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.Dot(ShoNS.Array.SparseDoubleArray)">
            <summary>Computes the vector dot product.</summary>
            <param name="otherVector" type="SparseDoubleArray">Sparse vector to dot.</param>
            <returns>Returns the vector dot product (double).</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.Dot(ShoNS.Array.SparseFloatArray)">
            <summary>Computes the vector dot product.</summary>
            <param name="otherVector" type="SparseFloatArray">Sparse vector to dot.</param>
            <returns>Returns the vector dot product (float).</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.Dot(ShoNS.Array.SparseIntArray)">
            <summary>Computes the vector dot product.</summary>
            <param name="otherVector" type="SparseIntArray">Sparse vector to dot.</param>
            <returns>Returns the vector dot product (int).</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.Dot(ShoNS.Array.DoubleArray)">
            <summary>Computes the vector dot product.</summary>
            <param name="otherVector" type="DoubleArray">Vector to dot.</param>
            <returns>Returns the vector dot product (double).</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.Dot(ShoNS.Array.FloatArray)">
            <summary>Computes the vector dot product.</summary>
            <param name="otherVector" type="DoubleArray">Vector to dot.</param>
            <returns>Returns the vector dot product (float).</returns>
        </member>
        <member name="M:ShoNS.Array.SparseIntArray.Dot(ShoNS.Array.IntArray)">
            <summary>Computes the vector dot product.</summary>
            <param name="otherVector" type="DoubleArray">Vector to dot.</param>
            <returns>Returns the vector dot product (int).</returns>
        </member>
        <member name="P:ShoNS.Array.SparseIntArray.Rows">
            <summary>Returns an IEnumerable object that can be used to iterate over the rows of the matrix.</summary>
        </member>
        <member name="P:ShoNS.Array.SparseIntArray.Cols">
            <summary>Returns an IEnumerable object that can be used to iterate over the columns of the matrix.</summary>
        </member>
        <member name="P:ShoNS.Array.SparseIntArray.T">
            <summary>Transposes the 1st and 2nd dimensions of the matrix, making a deep copy.</summary>
            <returns>Returns a deep copy of transposed matrix.</returns>
        </member>
        <member name="P:ShoNS.Array.SparseIntArray.Diagonal">
            <summary>Returns the main diagonal of the matrix as a vectory or sets the main diagonal to the input vector.</summary>
        </member>
        <member name="P:ShoNS.Array.SparseIntArray.CountCells">
            <summary>Returns the number of set items in the matrix.</summary>
        </member>
        <member name="P:ShoNS.Array.SparseIntArray.StorageFormat">
            <summary>Returns the storage format of the sparse matrix.</summary>
        </member>
        <member name="P:ShoNS.Array.SparseIntArray.NullValue">
            <summary>Returns the null (unset) value for the matrix.</summary>
        </member>
        <member name="T:ShoNS.Array.SparseSVDBase`1">
            <summary>The SparseSVD base class.</summary>
        </member>
        <member name="T:ShoNS.Array.SparseSVD">
            <summary>This class computes the SVD decomposition for a double floating point array.</summary>
        </member>
        <member name="M:ShoNS.Array.SparseSVD.#ctor(ShoNS.Array.SparseDoubleArray,System.Int32,System.Double)">
            <summary>Computes the k-rank sparse SVD decomposition with specified tolerance.</summary>
            <param name="arr">Matrix to decompose</param>
            <param name="k">Rank</param>
            <param name="tol">Tolerance</param>
            <remarks>This method is currently not implemented: call SparseSVD(arr) instead.</remarks>
        </member>
        <member name="M:ShoNS.Array.SparseSVD.#ctor(ShoNS.Array.SparseDoubleArray,System.Int32)">
            <summary>Computes the k-rank sparse SVD decomposition with default tolerance (1.0E-12).</summary>
            <param name="arr">Matrix to decompose</param>
            <param name="k">Rank</param>
        </member>
        <member name="M:ShoNS.Array.SparseSVD.#ctor(ShoNS.Array.SparseDoubleArray)">
            <summary>Computes the SVD decomposition for the input array.</summary>
            <param name="arr">Matrix to decompose</param>    
        </member>
        <member name="P:ShoNS.Array.SparseSVD.U">
            <summary>The unitary array U</summary>
        </member>
        <member name="P:ShoNS.Array.SparseSVD.V">
            <summary>The unitary array V</summary>
        </member>
        <member name="P:ShoNS.Array.SparseSVD.D">
            <summary>The singular values</summary>
        </member>
        <member name="P:ShoNS.Array.SparseSVD.Count">
            <summary>Not currently implemented</summary>
        </member>
        <member name="T:ShoNS.Array.ComplexArray">
            <summary>This class implements functionality for an array with Complex64 elements.</summary>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Zeros(System.Int32)">
            <summary>Creates a ComplexArray of the given length, filled with zeros.</summary>
            <param name="length">Vector length</param>        
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Zeros(System.Int32,System.Int32)">
            <summary>Creates a ComplexArray of size0 x size1, filled with zeros.</summary>
            <param name="size0">Number of rows</param>
            <param name="size1">Number of columns</param>           
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Zeros(System.Int32[])">
             <summary>Creates a multidimensional DoubleArray of the given size, filled with zeros.</summary>
            <param name="sizes">Sizes</param>        
        </member>
        <member name="M:ShoNS.Array.ComplexArray.FromFile(System.String)">
            <summary>Creates an array from a file, using binary serialization.</summary>
            <param name="fileName" type="String">Name of file from which to create the array.</param>    
        </member>
        <member name="M:ShoNS.Array.ComplexArray.FromStream(System.IO.Stream)">
            <summary>Creates an array from a stream, using binary serialization.</summary>
            <param name="stream" type="System.IO.Stream">Stream from which to create the array.</param>  
        </member>
        <member name="M:ShoNS.Array.ComplexArray.From(ShoNS.Array.NumArrayBase{System.Numerics.Complex})">
            <summary>Creates an array (deep copy) from another array.</summary>
            <param name="input">Array to copy</param>        
        </member>
        <member name="M:ShoNS.Array.ComplexArray.FromShallow(ShoNS.Array.NumArrayBase{System.Numerics.Complex})">
            <summary>Creates an array (shallow copy) from another array.</summary>
            <param name="input">Array to copy</param>        
        </member>
        <member name="M:ShoNS.Array.ComplexArray.From(System.Collections.Generic.IEnumerable{System.Numerics.Complex})">
            <summary>Creates a deep copy from an IEnumerable object.</summary>
            <param name="input">Enumerable to copy</param>         
        </member>
        <member name="M:ShoNS.Array.ComplexArray.From(System.Collections.IEnumerable)">
            <summary>Creates a deep copy from an IEnumerable object.</summary>
            <param name="input">Enumerable to copy</param>         
        </member>
        <member name="M:ShoNS.Array.ComplexArray.From(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Creates an array from the contents of two objects.</summary>
            <param name="real" type="IEnumerable">Object from which to create the real part of the array.</param>  
            <param name="imag" type="IEnumerable">Object from which to create the imaginary part of the array.</param>  
        </member>
        <member name="M:ShoNS.Array.ComplexArray.From(ShoNS.Array.DoubleArray,ShoNS.Array.DoubleArray)">
            <summary>Creates an array from the contents of two objects.</summary>
            <param name="realArray" type="DoubleArray">Array from which to create the real part of the array.</param>  
            <param name="imagArray" type="DoubleArray">Array from which to create the imaginary part of the array.</param>  
        </member>
        <member name="M:ShoNS.Array.ComplexArray.#ctor(System.Int32)">
            <summary>Creates a ComplexArray of the given length, filled with zeros.</summary>
            <param name="length">Length of vector</param>        
        </member>
        <member name="M:ShoNS.Array.ComplexArray.#ctor(System.Int32,System.Int32)">
            <summary>Creates a ComplexArray of size0 x size1, filled with zeros.</summary>
            <param name="size0">Number of rows</param>
            <param name="size1">Number columns</param>  
        </member>
        <member name="M:ShoNS.Array.ComplexArray.#ctor(System.Int32[])">
            <summary>Creates a multidimensional ComplexArray of the given size, filled with zeros.</summary>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization.</summary>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Squeeze">
            <summary>Squeezes out the size 1 dimensions (shallowly).</summary>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.SameValues(ShoNS.Array.ComplexArray,System.Numerics.Complex,System.Numerics.Complex)">
            <summary>Determines if two arrays are the same within the given tolerance.</summary>
            <param name="arrayToCompare" type="ComplexArray">Array to compare.</param>
            <param name="relToler" type="Complex64">Tolerance to use.</param>
            <param name="absToler" type="Complex64">Tolerance to use.</param>
            <returns>true if the arrays are the same; false if different.</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.SameValues(ShoNS.Array.ComplexArray)">
            <summary>Determines if two arrays are exactly the same.</summary>
            <param name="arrayToCompare" type="ComplexArray">Array to compare.</param>
            <returns>true if the arrays are the same; false if different.</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.AlongDim(System.Int32)">
            <summary>Returns an IEnumerable object that can be used to iterate along a dimension of an array.</summary>
            <param name="dim">Along which dimension</param>        
        </member>
        <member name="M:ShoNS.Array.ComplexArray.RowElements(System.Int32)">
            <summary>Returns an IEnumerable object that can be used to iterate over the elements of a given row.</summary>
            <param name="rowIndex" type="int">The index of the row to return.</param>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.ColumnElements(System.Int32)">
            <summary>Returns an IEnumerable object that can be used to iterate over the elements of a given column.</summary>
            <param name="colIndex" type="int">The index of the row to return.</param>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.TransposeDeep">
            <summary>Transposes the 1st and 2nd dimensions of the array, making a deep copy.</summary>
            <returns>Returns a deep copy of transposed array.</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Transpose">
            <summary>Transposes the 1st and 2nd dimensions of the array, making a shallow copy.</summary>
            <returns>Returns a shallow copy of transposed array.</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.CopyDeep">
            <summary>Makes a deep copy of the array; the new array has its own storage.</summary>
            <returns>Returns a deep copy the array.</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.CopyShallow">
            <summary>Makes a shallow copy of the array; the new array shares its storage with the original array.</summary>
            <returns>Returns a shallow copy the array.</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.CopyTo(ShoNS.Array.ComplexArray)">
            <summary>Copies the contents of this array to the specified array.</summary>
            <param name="destArray">Destination array</param>                
        </member>
        <member name="M:ShoNS.Array.ComplexArray.ToVector">
            <summary>Makes a vector, copying the elements in row-column order.</summary>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Conj">
            <summary>Returns the conjugate of the array.</summary>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.ConjTranspose">
            <summary>Returns the conjugate transpose of the array, making a deep copy.</summary>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Real">
            <summary>Returns the real portion of the array.</summary>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Imag">
            <summary>Returns the imaginary portion of the array.</summary>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.GetSlice(System.Int32,System.Int32)">
            <summary>Creates a subarray (shallow copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndex" type="int">Maximum index (inclusive) in the slice.</param>  
        </member>
        <member name="M:ShoNS.Array.ComplexArray.GetSliceDeep(System.Int32,System.Int32)">
            <summary>Creates a subarray (deep copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndex" type="int">Maximum index (inclusive) in the slice.</param>  
        </member>
        <member name="M:ShoNS.Array.ComplexArray.GetSlice(System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (shallow copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndex" type="int">Maximum index (inclusive) in the slice.</param>  
            <param name="step">Step</param>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.GetSliceDeep(System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (deep copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndex" type="int">Maximum index (inclusive) in the slice.</param>  
            <param name="step">Step</param>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.GetSlice(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (shallow copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRow" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastCol" type="int">Maximum column number (inclusive) in the slice.</param>          
        </member>
        <member name="M:ShoNS.Array.ComplexArray.GetSliceDeep(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (deep copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRow" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastCol" type="int">Maximum column number (inclusive) in the slice.</param>          
        </member>
        <member name="M:ShoNS.Array.ComplexArray.GetRow(System.Int32)">
            <summary>Get a shallow copy of a row.</summary>
            <param name="rowIndex" type="int">Row to retrieve</param>  
            <remarks>This method is a shortcut for calling GetSlice(iRow,iRow,0,size1-1)</remarks>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.GetCol(System.Int32)">
            <summary>Get a shallow copy of a column.</summary>
            <param name="colIndex" type="int">Column to retrieve</param>  
            <remarks>This method is a shortcut for calling GetSlice(0,size0-1,colIndex,colIndex)</remarks>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.GetSliceDeep(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (deep copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRow" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="stepRow" type="int">Row step size.</param> 
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastCol" type="int">Maximum column number (inclusive) in the slice.</param>          
            <param name="stepCol" type="int">Column step size.</param> 
        </member>
        <member name="M:ShoNS.Array.ComplexArray.GetSlice(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (shallow copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRow" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="stepRow" type="int">Row step size.</param> 
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastCol" type="int">Maximum column number (inclusive) in the slice.</param>          
            <param name="stepCol" type="int">Column step size.</param> 
        </member>
        <member name="M:ShoNS.Array.ComplexArray.GetSliceDeep(ShoNS.Array.Slice[])">
            <summary>Creates a subarray (deep copy). If your slice contains a list of indices, you must call this method.</summary>
            <param name="slices">Slices to get</param>        
        </member>
        <member name="M:ShoNS.Array.ComplexArray.GetSlice(ShoNS.Array.Slice[])">
            <summary>Creates a subarray (shallow copy). If your slice contains a list of indices, call GetSliceDeep instead.</summary>
            <param name="slices">Slices to get</param>        
        </member>
        <member name="M:ShoNS.Array.ComplexArray.GetArrayEntries(System.Collections.Generic.IEnumerable{ShoNS.Array.IArrayEntry})">
            <summary>Creates an array (deep copy) from the array entries.</summary>
            <param name="arrayEntries">Enumerable of array entries to get</param>   
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Norm(ShoNS.Array.NormType)">
            <summary>Computes the array norm.</summary>
            <param name="normToCompute" type="NormType">Type of norm to compute.</param>
            <remarks>DoubleArray objects implement the two-norm via SVD if the inputObject is a 2D array.</remarks>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Dot(ShoNS.Array.ComplexArray)">
            <summary>Computes the vector dot product.</summary>
            <param name="otherVector" type="ComplexArray">Vector to dot.</param>
            <returns>Returns the vector dot product (Complex64).</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Dot(ShoNS.Array.DoubleArray)">
            <summary>Computes the vector dot product.</summary>
            <param name="otherVector" type="DoubleArray">Vector to dot.</param>
            <returns>Returns the vector dot product (Complex64).</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Dot(ShoNS.Array.FloatArray)">
            <summary>Computes the vector dot product.</summary>
            <param name="otherVector" type="FloatArray">Vector to dot.</param>
            <returns>Returns the vector dot product (Complex64).</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Dot(ShoNS.Array.IntArray)">
            <summary>Computes the vector dot product.</summary>
            <param name="otherVector" type="IntArray">Vector to dot.</param>
            <returns>Returns the vector dot product (Complex64).</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Dot(ShoNS.Array.SparseDoubleArray)">
            <summary>Computes the vector dot product.</summary>
            <param name="otherVector" type="SparseDoubleArray">Vector to dot.</param>
            <returns>Returns the vector dot product (Complex64).</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Dot(ShoNS.Array.SparseFloatArray)">
            <summary>Computes the vector dot product.</summary>
            <param name="otherVector" type="SparseFloatArray">Vector to dot.</param>
            <returns>Returns the vector dot product (Complex64).</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Dot(ShoNS.Array.SparseIntArray)">
            <summary>Computes the vector dot product.</summary>
            <param name="otherVector" type="SparseIntArray">Vector to dot.</param>
            <returns>Returns the vector dot product (Complex64).</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Sum(System.Int32)">
            <summary>Computes the sum over the given dimension.</summary>
            <param name="dim">Dimension over which to compute the sum.</param>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Min(System.Int32)">
            <summary>Finds the minimum element value over the given dimension.</summary>
            <param name="dim">Dimension over which to find the minimum.</param>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Max(System.Int32)">
            <summary>Finds the maximum element value over the given dimension.</summary>
            <param name="dim">Dimension over which to find the maximum.</param>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Sum(ShoNS.Array.DimOp)">
            <summary>Computes the sum along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the sum.</param>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Min(ShoNS.Array.DimOp)">
            <summary>Finds the minimum element value along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to find the minimum.</param>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Max(ShoNS.Array.DimOp)">
            <summary>Finds the maximum element value along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to find the maximum.</param>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Mean">
            <summary>Computes the mean value of the array.</summary>
            <returns>Complex64</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Median">
            <summary>Computes the median value of the array.</summary>
            <returns>Complex64</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Var">
            <summary>Computes the variance (normalized by N-1) over the array</summary>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.VarN">
            <summary>Computes the variance (normalized by N) over the array</summary>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Std">
            <summary>Computes the standard deviation over the array</summary>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Det">
            <summary>Computes the determinant, for square matrics only.</summary>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Inv">
            <summary>Computes the array inverse, for square arrays only.</summary>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Mean(System.Int32)">
            <summary>Computes the mean over the given dimension.</summary>
            <param name="dim">Dimension over which to compute the mean.</param>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Median(System.Int32)">
            <summary>Computes the median over the given dimension.</summary>
            <param name="dim">Dimension over which to compute the median.</param>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Var(System.Int32)">
            <summary>Computes the variance, normalized by N-1, over the given dimension.</summary>
            <param name="dim">Dimension over which to compute the variance.</param>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.VarN(System.Int32)">
            <summary>Computes the variance, normalized by N, over the given dimension.</summary>
            <param name="dim">Dimension over which to compute the variance.</param>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Std(System.Int32)">
            <summary>Computes the standard deviation over the given dimension.</summary>
            <param name="dim">Dimension over which to compute the standard deviation.</param>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Mean(ShoNS.Array.DimOp)">
            <summary>Computes the mean over the given dimension.</summary>
            <param name="dim">Dimension over which to compute the mean.</param>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Median(ShoNS.Array.DimOp)">
            <summary>Computes the median over the given dimension.</summary>
            <param name="dim">Dimension over which to compute the median.</param>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Var(ShoNS.Array.DimOp)">
            <summary>Computes the variance, normalized by N-1, over the given dimension.</summary>
            <param name="dim">Dimension over which to compute the variance.</param>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.VarN(ShoNS.Array.DimOp)">
            <summary>Computes the variance, normalized by N, over the given dimension.</summary>
            <param name="dim">Dimension over which to compute the variance.</param>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Std(ShoNS.Array.DimOp)">
            <summary>Computes the standard deviation over the given dimension.</summary>
            <param name="dim">Dimension over which to compute the standard deviation.</param>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Abs">
            <summary>Returns the absolute value for each element in the array.</summary>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Add(ShoNS.Array.ComplexArray)">
            <summary>Adds two arrays.</summary>
            <param name="otherArray">The other matrix.</param>       
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Add(System.Numerics.Complex)">
            <summary>Adds a value to each element of the array.</summary>
            <param name="value">Value to add</param>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Subtract(ShoNS.Array.ComplexArray)">
            <summary>Subtracts two arrays.</summary>
            <param name="otherArray">The other matrix.</param>            
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Subtract(System.Numerics.Complex)">
            <summary>Subtracts a value from each element of the array.</summary>
            <param name="value">Value to subtract</param>        
        </member>
        <member name="M:ShoNS.Array.ComplexArray.RSubtract(System.Numerics.Complex)">
            <summary>From a value, subtracts each value of the array.</summary>
            <param name="value">Value from which to subtract</param>         
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Multiply(ShoNS.Array.ComplexArray)">
            <summary>Matrix multiply of this array by another.</summary>
            <param name="otherArray" type="ComplexArray">The other matrix.</param>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Multiply(System.Numerics.Complex)">
            <summary>Multiplies each element of the array by a value.</summary>
            <param name="value">Value to multiply</param>        
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Divide(System.Numerics.Complex)">
            <summary>Divides each element of the array by a value.</summary>
            <param name="value">Value to divide</param>        
        </member>
        <member name="M:ShoNS.Array.ComplexArray.RDivide(System.Numerics.Complex)">
            <summary>From a value, divides each element of the array.</summary>
            <param name="value">Value from which to divide</param>             
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Addition(ShoNS.Array.ComplexArray,ShoNS.Array.ComplexArray)">
            <summary>Adds two arrays.</summary>
            <param name="arrayLeft" type="ComplexArray">Array on the left side.</param>
            <param name="arrayRight" type="ComplexArray">Array on the right side.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Addition(ShoNS.Array.ComplexArray,ShoNS.Array.DoubleArray)">
            <summary>Adds two arrays.</summary>
            <param name="arrayLeft" type="ComplexArray">Array on the left side.</param>
            <param name="arrayRight" type="DoubleArray">Array on the right side.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Addition(ShoNS.Array.ComplexArray,ShoNS.Array.FloatArray)">
            <summary>Adds two arrays.</summary>
            <param name="arrayLeft" type="ComplexArray">Array on the left side.</param>
            <param name="arrayRight" type="FloatArray">Array on the right side.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Addition(ShoNS.Array.ComplexArray,ShoNS.Array.IntArray)">
            <summary>Adds two arrays.</summary>
            <param name="arrayLeft" type="ComplexArray">Array on the left side.</param>
            <param name="arrayRight" type="IntArray">Array on the right side.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Addition(ShoNS.Array.DoubleArray,ShoNS.Array.ComplexArray)">
            <summary>Adds two arrays.</summary>
            <param name="arrayLeft" type="DoubleArray">Array on the left side.</param>
            <param name="arrayRight" type="ComplexArray">Array on the right side.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Addition(ShoNS.Array.FloatArray,ShoNS.Array.ComplexArray)">
            <summary>Adds two arrays.</summary>
            <param name="arrayLeft" type="FloatArray">Array on the left side.</param>
            <param name="arrayRight" type="ComplexArray">Array on the right side.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Addition(ShoNS.Array.IntArray,ShoNS.Array.ComplexArray)">
            <summary>Adds two arrays.</summary>
            <param name="arrayLeft" type="IntArray">Array on the left side.</param>
            <param name="arrayRight" type="ComplexArray">Array on the right side.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Addition(ShoNS.Array.ComplexArray,System.Numerics.Complex)">
            <summary>Adds a value to each element of an array: result = array + value.</summary>
            <param name="array" type="ComplexArray">The array to which to add the value.</param>
            <param name="value" type="Complex64">The value to add.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Addition(ShoNS.Array.ComplexArray,System.Double)">
            <summary>Adds a value to each element of an array: result = array + value.</summary>
            <param name="array" type="ComplexArray">The array to which to add the value.</param>
            <param name="value" type="double">The value to add.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Addition(ShoNS.Array.ComplexArray,System.Single)">
            <summary>Adds a value to each element of an array: result = array + value.</summary>
            <param name="array" type="ComplexArray">The array to which to add the value.</param>
            <param name="value" type="float">The value to add.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Addition(ShoNS.Array.ComplexArray,System.Int32)">
            <summary>Adds a value to each element of an array.</summary>
            <param name="array" type="ComplexArray">The array to which to add the value.</param>
            <param name="value" type="int">The value to add.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Addition(System.Numerics.Complex,ShoNS.Array.ComplexArray)">
            <summary>Adds a value to each element of an array: result = value+array.</summary>
            <param name="value" type="Complex64">The value to add.</param>
            <param name="array" type="ComplexArray">The array to which to add the value.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Addition(System.Double,ShoNS.Array.ComplexArray)">
            <summary>Adds a value to each element of an array: result = value+array.</summary>
            <param name="value" type="double">The value to add.</param>
            <param name="array" type="ComplexArray">The array to which to add the value.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Addition(System.Single,ShoNS.Array.ComplexArray)">
            <summary>Adds a value to each element of an array: result = value+array.</summary>
            <param name="value" type="float">The value to add.</param>
            <param name="array" type="ComplexArray">The array to which to add the value.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Addition(System.Int32,ShoNS.Array.ComplexArray)">
            <summary>Adds a value to each element of an array: result = value+array.</summary>
            <param name="value" type="int">The value to add.</param>
            <param name="array" type="ComplexArray">The array to which to add the value.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Subtraction(ShoNS.Array.ComplexArray,ShoNS.Array.ComplexArray)">
            <summary>Subtracts two arrays.</summary>
            <param name="arrayLeft" type="ComplexArray">Array on the left side.</param>
            <param name="arrayRight" type="ComplexArray">Array on the right side.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Subtraction(ShoNS.Array.ComplexArray,ShoNS.Array.DoubleArray)">
            <summary>Subtracts two arrays.</summary>
            <param name="arrayLeft" type="ComplexArray">Array on the left side.</param>
            <param name="arrayRight" type="DoubleArray">Array on the right side.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Subtraction(ShoNS.Array.ComplexArray,ShoNS.Array.FloatArray)">
            <summary>Subtracts two arrays.</summary>
            <param name="arrayLeft" type="ComplexArray">Array on the left side.</param>
            <param name="arrayRight" type="FloatArray">Array on the right side.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Subtraction(ShoNS.Array.ComplexArray,ShoNS.Array.IntArray)">
            <summary>Subtracts two arrays.</summary>
            <param name="arrayLeft" type="ComplexArray">Array on the left side.</param>
            <param name="arrayRight" type="IntArray">Array on the right side.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Subtraction(ShoNS.Array.DoubleArray,ShoNS.Array.ComplexArray)">
            <summary>Subtracts two arrays.</summary>
            <param name="arrayLeft" type="DoubleArray">Array on the left side.</param>
            <param name="arrayRight" type="ComplexArray">Array on the right side.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Subtraction(ShoNS.Array.FloatArray,ShoNS.Array.ComplexArray)">
            <summary>Subtracts two arrays.</summary>
            <param name="arrayLeft" type="FloatArray">Array on the left side.</param>
            <param name="arrayRight" type="ComplexArray">Array on the right side.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Subtraction(ShoNS.Array.IntArray,ShoNS.Array.ComplexArray)">
            <summary>Subtracts two arrays.</summary>
            <param name="arrayLeft" type="IntArray">Array on the left side.</param>
            <param name="arrayRight" type="ComplexArray">Array on the right side.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Subtraction(ShoNS.Array.ComplexArray,System.Numerics.Complex)">
            <summary>Subtracts a value from each element of an array: result =array-value.</summary>
            <param name="array" type="ComplexArray">Array on the left side.</param>
            <param name="value" type="Complex64">The value to subtract.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Subtraction(ShoNS.Array.ComplexArray,System.Double)">
            <summary>Subtracts a value from each element of an array: result =array-value.</summary>
            <param name="array" type="ComplexArray">Array on the left side.</param>
            <param name="value" type="double">The value to subtract.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Subtraction(ShoNS.Array.ComplexArray,System.Single)">
            <summary>Subtracts a value from each element of an array: result =array-value.</summary>
            <param name="array" type="ComplexArray">Array on the left side.</param>
            <param name="value" type="float">The value to subtract.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Subtraction(ShoNS.Array.ComplexArray,System.Int32)">
            <summary>Subtracts a value from each element of an array: result =array-value.</summary>
            <param name="array" type="ComplexArray">Array on the left side.</param>
            <param name="value" type="int">The value to subtract.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Subtraction(System.Numerics.Complex,ShoNS.Array.ComplexArray)">
            <summary>From a value, subtracts each element of an array: result = value-array.</summary>
            <param name="value" type="Complex64">The value to subtract.</param>
            <param name="array" type="ComplexArray">Array on the right side.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Subtraction(System.Double,ShoNS.Array.ComplexArray)">
            <summary>From a value, subtracts each element of an array: result = value-array.</summary>
            <param name="value" type="double">The value to subtract.</param>
            <param name="array" type="ComplexArray">Array on the right side.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Subtraction(System.Single,ShoNS.Array.ComplexArray)">
            <summary>From a value, subtracts each element of an array: result = value-array.</summary>
            <param name="value" type="float">The value to subtract.</param>
            <param name="array" type="ComplexArray">Array.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Subtraction(System.Int32,ShoNS.Array.ComplexArray)">
            <summary>From a value, subtracts each element of an array: result = value-array.</summary>
            <param name="value" type="int">The value to subtract.</param>
            <param name="array" type="ComplexArray">Array.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Multiply(ShoNS.Array.ComplexArray,ShoNS.Array.ComplexArray)">
            <summary>Multiplies two matrices.</summary>
            <param name="matrixLeft" type="ComplexArray">Matrix on the left side.</param>
            <param name="matrixRight" type="ComplexArray">Matrix on the right side.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Multiply(ShoNS.Array.ComplexArray,ShoNS.Array.DoubleArray)">
            <summary>Multiplies two matrices.</summary>
            <param name="matrixLeft" type="ComplexArray">Matrix on the left side.</param>
            <param name="matrixRight" type="DoubleArray">Matrix on the right side.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Multiply(ShoNS.Array.ComplexArray,ShoNS.Array.FloatArray)">
            <summary>Multiplies two matrices.</summary>
            <param name="matrixLeft" type="ComplexArray">Matrix on the left side.</param>
            <param name="matrixRight" type="FloatArray">Matrix on the right side.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Multiply(ShoNS.Array.ComplexArray,ShoNS.Array.IntArray)">
            <summary>Multiplies two matrices.</summary>
            <param name="matrixLeft" type="ComplexArray">Matrix on the left side.</param>
            <param name="matrixRight" type="IntArray">Matrix on the right side.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Multiply(ShoNS.Array.DoubleArray,ShoNS.Array.ComplexArray)">
            <summary>Multiplies two matrices.</summary>
            <param name="matrixLeft" type="DoubleArray">Matrix on the left side.</param>
            <param name="matrixRight" type="ComplexArray">Matrix on the right side.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Multiply(ShoNS.Array.FloatArray,ShoNS.Array.ComplexArray)">
            <summary>Multiplies two matrices.</summary>
            <param name="matrixLeft" type="FloatArray">Matrix on the left side.</param>
            <param name="matrixRight" type="ComplexArray">Matrix on the right side.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Multiply(ShoNS.Array.IntArray,ShoNS.Array.ComplexArray)">
            <summary>Multiplies two matrices.</summary>
            <param name="matrixLeft" type="IntArray">Matrix on the left side.</param>
            <param name="matrixRight" type="ComplexArray">Matrix on the right side.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Multiply(ShoNS.Array.ComplexArray,System.Numerics.Complex)">
            <summary>Multiplies each element of an array by a value: result = array*value.</summary>
            <param name="array" type="ComplexArray">Array.</param>
            <param name="value" type="Complex64">The value to multiply.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Multiply(ShoNS.Array.ComplexArray,System.Double)">
            <summary>Multiplies each element of an array by a value: result = array*value.</summary>
            <param name="array" type="ComplexArray">Array.</param>
            <param name="value" type="double">The value to multiply.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Multiply(ShoNS.Array.ComplexArray,System.Single)">
            <summary>Multiplies each element of an array by a value: result = array*value.</summary>
            <param name="array" type="ComplexArray">Array.</param>
            <param name="value" type="float">The value to multiply.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Multiply(ShoNS.Array.ComplexArray,System.Int32)">
            <summary>Multiplies each element of an array by a value: result = array*value.</summary>
            <param name="array" type="ComplexArray">Array.</param>
            <param name="value" type="int">The value to multiply.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Multiply(System.Numerics.Complex,ShoNS.Array.ComplexArray)">
            <summary>Multiplies each element of an array by a value: result = value*array.</summary>
            <param name="value" type="Complex64">The value to multiply.</param>
            <param name="array" type="ComplexArray">Array.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Multiply(System.Double,ShoNS.Array.ComplexArray)">
            <summary>Multiplies each element of an array by a value: result = value*array.</summary>
            <param name="value" type="double">The value to multiply.</param>
            <param name="array" type="ComplexArray">Array.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Multiply(System.Single,ShoNS.Array.ComplexArray)">
            <summary>Multiplies each element of an array by a value: result = value*array.</summary>
            <param name="value" type="float">The value to multiply.</param>
            <param name="array" type="ComplexArray">Array.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Multiply(System.Int32,ShoNS.Array.ComplexArray)">
            <summary>Multiplies each element of an array by a value: result = value*array.</summary>
            <param name="value" type="int">The value to multiply.</param>
            <param name="array" type="ComplexArray">Array.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.MultiplyAccum(System.Numerics.Complex,ShoNS.Array.ComplexArray)">
            <summary>array += alpha*arrayRight</summary>
            <param name="alpha" type="Complex64">The value to multiply.</param>
            <param name="arrayRight" type="ComplexArray">Array to the right.</param>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.ElementMultiply(ShoNS.Array.ComplexArray)">
            <summary>Multiplies the elements of two arrays.</summary>
            <param name="arrayRight" type="ComplexArray">Array to the right.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.ElementMultiply(ShoNS.Array.DoubleArray)">
            <summary>Multiplies the elements of two arrays.</summary>
            <param name="arrayRight" type="DoubleArray">Array to the right.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.ElementMultiply(ShoNS.Array.FloatArray)">
            <summary>Multiplies the elements of two arrays.</summary>
            <param name="arrayRight" type="FloatArray">Array to the right.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.ElementMultiply(ShoNS.Array.IntArray)">
            <summary>Multiplies the elements of two arrays.</summary>
            <param name="arrayRight" type="IntArray">Array to the right.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Division(ShoNS.Array.ComplexArray,System.Numerics.Complex)">
            <summary>Divides the elements of an array by a value: result = array/value</summary>
            <param name="array" type="ComplexArray">Array.</param>
            <param name="value" type="Complex64">Value to divide.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Division(ShoNS.Array.ComplexArray,System.Double)">
            <summary>Divides the elements of an array by a value: result = array/value</summary>
            <param name="array" type="ComplexArray">Array.</param>
            <param name="value" type="Complex64">Value to divide.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Division(ShoNS.Array.ComplexArray,System.Single)">
            <summary>Divides the elements of an array by a value: result = array/value</summary>
            <param name="array" type="ComplexArray">Array.</param>
            <param name="value" type="Complex64">Value to divide.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Division(ShoNS.Array.ComplexArray,System.Int32)">
            <summary>Divides the elements of an array by a value: result = array/value</summary>
            <param name="array" type="ComplexArray">Array.</param>
            <param name="value" type="Complex64">Value to divide.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Division(System.Numerics.Complex,ShoNS.Array.ComplexArray)">
            <summary>Divides a value by the elements of an array: result = value/array</summary>
            <param name="value" type="Complex64">Value to divide.</param>
            <param name="array" type="ComplexArray">Array.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Division(System.Double,ShoNS.Array.ComplexArray)">
            <summary>Divides a value by the elements of an array: result = value/array</summary>
            <param name="value" type="double">Value to divide.</param>
            <param name="array" type="ComplexArray">Array.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Division(System.Single,ShoNS.Array.ComplexArray)">
            <summary>Divides a value by the elements of an array: result = value/array</summary>
            <param name="value" type="float">Value to divide.</param>
            <param name="array" type="ComplexArray">Array.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_Division(System.Int32,ShoNS.Array.ComplexArray)">
            <summary>Divides a value by the elements of an array.</summary>
            <param name="value" type="int">Value to divide.</param>
            <param name="array" type="ComplexArray">Array.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.ElementDivide(ShoNS.Array.ComplexArray)">
            <summary>Divides the elements of two arrays</summary>
            <param name="otherArray" type="ComplexArray">The array on the right.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.ElementDivide(ShoNS.Array.DoubleArray)">
            <summary>Divides the elements of two arrays.</summary>
            <param name="otherArray" type="DoubleArray">The array on the right.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.ElementDivide(ShoNS.Array.FloatArray)">
            <summary>Divides the elements of two arrays.</summary>
            <param name="otherArray" type="FloatArray">Array on the right.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.ElementDivide(ShoNS.Array.IntArray)">
            <summary>Divides the elements of two arrays.</summary>
            <param name="otherArray" type="IntArray">Array on the right.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.ElementDivide(ShoNS.Array.SparseDoubleArray)">
            <summary>Divides the elements of two arrays.</summary>
            <param name="otherArray" type="SparseDoubleArray">The array on the right.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.ElementDivide(ShoNS.Array.SparseFloatArray)">
            <summary>Divides the elements of two arrays.</summary>
            <param name="otherArray" type="SparseFloatArray">Array on the right.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.ElementDivide(ShoNS.Array.SparseIntArray)">
            <summary>Divides the elements of two arrays.</summary>
            <param name="otherArray" type="SparseIntArray">Array on the right.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.op_UnaryNegation(ShoNS.Array.ComplexArray)">
            <summary>Negates each element of the array.</summary>
            <param name="array">Array to negate</param>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Negate(ShoNS.Array.ComplexArray)">
            <summary>Negates each element of the array.</summary>     
        </member>
        <member name="M:ShoNS.Array.ComplexArray.AddBroadcast(ShoNS.Array.ComplexArray)">
            <summary>Adds the elements of two arrays, broadcasting the arrays if needed.</summary>
            <param name="otherArray" type="ComplexArray">Array on the right.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.SubtractBroadcast(ShoNS.Array.ComplexArray)">
            <summary>Subtracts the elements of two arrays, broadcasting the arrays if needed.</summary>
            <param name="otherArray" type="ComplexArray">Array on the right.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.ElementMultiplyBroadcast(ShoNS.Array.ComplexArray)">
            <summary>Multiplies the elements of two arrays, broadcasting the arrays if needed.</summary>
            <param name="otherArray" type="ComplexArray">Array on the right.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.ElementDivideBroadcast(ShoNS.Array.ComplexArray)">
            <summary>Divides the elements of two arrays, broadcasting the arrays if needed.</summary>
            <param name="otherArray" type="ComplexArray">Array on the right.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Sort">
            <summary>Sorts the array in ascending order.</summary>
            <returns>A vector containing the sorted values.</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.SortDesc">
            <summary>Sorts the array in descending orde.</summary>
            <returns>A vector containing the sorted values.</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.SortIndex(ShoNS.Array.IntArray@)">
            <summary>Sorts the array in ascending order, returning the indices into the original array in sorted order.</summary>
            <param name="indexArray">The indices into the original array, an out parameter.</param>
            <returns>A vector containing the sorted values and an IntArray containing the indices into the original array.</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.SortDescIndex(ShoNS.Array.IntArray@)">
            <summary>Sorts the array in descending order, returning the indices into the original array in sorted order.</summary>
            <param name="indexArray">The indices into the original array, an out parameter.</param>
            <returns>A vector containing the sorted values and an IntArray containing the indices into the original array.</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Sort(System.Int32)">
            <summary>Sorts the array in ascending order over the given dimension.</summary>
            <param name="dim">The dimension to sort.</param>
            <returns>An array containing the sorted values.</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.SortDesc(System.Int32)">
            <summary>Sorts the array in descending order along the given dimension.</summary>
            <param name="dim">The dimension to sort.</param>
            <returns>An array containing the sorted values.</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.SortIndex(System.Int32,ShoNS.Array.IntArray@)">
            <summary>Sorts the array in ascending order, over the given dimension, returning the indices into the original array in sorted order.</summary>
            <param name="dim">The dimension to sort.</param>
            <param name="indexArray">The indices into the original array, an out parameter.</param>
            <returns>An array of sorted values and an IntArray containing the indices into the original array.</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.SortDescIndex(System.Int32,ShoNS.Array.IntArray@)">
            <summary>Sorts the array in descending order, along the given dimension, returning the indices into the original array in sorted order.</summary>
            <param name="dim">The dimension to sort.</param>
            <param name="indexArray">The indices into the original array, an out parameter.</param>
            <returns>An array of sorted values and an IntArray containing the indices into the original array.</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.Sort(ShoNS.Array.DimOp)">
            <summary>Sorts the array in ascending order along the given dimension.</summary>
            <param name="dim" type="DimOp">The dimension to sort.</param>
            <returns>An array containing the sorted values.</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.SortDesc(ShoNS.Array.DimOp)">
            <summary>Sorts the array in descending order along the given dimension.</summary>
            <param name="dim" type="DimOp">The dimension to sort.</param>
            <returns>An array containing the sorted values.</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.SortIndex(ShoNS.Array.DimOp,ShoNS.Array.IntArray@)">
            <summary>Sorts the array in ascending order, along the given dimension, returning the indices into the original array in sorted order.</summary>
            <param name="dim" type="DimOp">The dimension to sort.</param>
            <param name="indexArray">The indices into the original array, an out parameter.</param>
            <returns>An array of sorted values and an IntArray containing the indices into the original array.</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.SortDescIndex(ShoNS.Array.DimOp,ShoNS.Array.IntArray@)">
            <summary>Sorts the array in descending order, along the given dimension, returning the indices into the original array in sorted order.</summary>
            <param name="dim" type="DimOp">The dimension to sort.</param>
            <param name="indexArray">The indices into the original array, an out parameter.</param>
            <returns>An array of sorted values and an IntArray containing the indices into the original array.</returns>
        </member>
        <member name="M:ShoNS.Array.ComplexArray.VertStack(System.Collections.IEnumerable[])">
            <summary>Stacks the inputs vertically.</summary>
            <param name="items">Items to stack</param>           
        </member>
        <member name="M:ShoNS.Array.ComplexArray.HorizStack(System.Collections.IEnumerable[])">
            <summary>Stacks the inputs horizontally.</summary>
            <param name="items">Items to stack</param>           
        </member>
        <member name="P:ShoNS.Array.ComplexArray.Rows">
            <summary>Returns an IEnumerable object that can be used to iterate over the rows of the array.</summary>
        </member>
        <member name="P:ShoNS.Array.ComplexArray.Cols">
            <summary>Returns an IEnumerable object that can be used to iterate over the columns of the array.</summary>
        </member>
        <member name="P:ShoNS.Array.ComplexArray.T">
            <summary>Transposes the 1st and 2nd dimensions of the array, making a shallow copy.</summary>
            <returns>Returns a shallow copy of transposed array.</returns>
        </member>
        <member name="P:ShoNS.Array.ComplexArray.Diagonal">
            <summary>Returns the main diagonal of the array as a vectory or sets the main diagonal to the input vector.</summary>
        </member>
        <member name="P:ShoNS.Array.ComplexArray.H">
            <summary>Returns the conjugate transpose, making a deep copy.</summary>
            <returns>Returns a deep copy of conjugate transpose.</returns>
        </member>
        <member name="T:ShoNS.Array.DoubleArray">
            <summary>This class implements functionality for an array with double-precision floating point elements.</summary>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Zeros(System.Int32)">
            <summary>Creates a DoubleArray of the given length, filled with zeros.</summary>
            <param name="length">Vector length</param>        
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Zeros(System.Int32,System.Int32)">
            <summary>Creates a size0 x size1 DoubleArray, filled with zeros.</summary>
            <param name="size0">Number of rows</param>
            <param name="size1">Number of columns</param>             
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Zeros(System.Int32[])">
             <summary>Creates a multidimensional DoubleArray of the given size, filled with zeros.</summary>
            <param name="sizes">Sizes</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Ones(System.Int32)">
            <summary>Creates a DoubleArray of the given length, filled with ones.</summary>
            <param name="length">Vector length</param>        
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Ones(System.Int32,System.Int32)">
            <summary>Creates a size0 x size1 DoubleArray, filled with ones.</summary>
            <param name="size0">Number of rows</param>
            <param name="size1">Number of columns</param>             
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Ones(System.Int32[])">
             <summary>Creates a multidimensional DoubleArray of the given size, filled with ones.</summary>
            <param name="sizes">Sizes</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Id(System.Int32,System.Int32)">
            <summary>Creates the size0 x size1 identity DoubleArray.</summary>
            <param name="size0">Number of rows</param>
            <param name="size1">Number of columns</param>             
        </member>
        <member name="M:ShoNS.Array.DoubleArray.FromFile(System.String)">
            <summary>Creates an array from a file, using binary serialization.</summary>
            <param name="fileName" type="String">Name of file from which to create the array.</param>    
        </member>
        <member name="M:ShoNS.Array.DoubleArray.FromStream(System.IO.Stream)">
            <summary>Creates an array from a stream, using binary serialization.</summary>
            <param name="stream" type="System.IO.Stream">Stream from which to create the array.</param>  
        </member>
        <member name="M:ShoNS.Array.DoubleArray.From(ShoNS.Array.NumArrayBase{System.Double})">
            <summary>Creates an array (deep copy) from an another array.</summary>
            <param name="input">Array to copy</param>          
        </member>
        <member name="M:ShoNS.Array.DoubleArray.From(ShoNS.Array.NumArrayBase{System.Single})">
            <summary>Creates an array (deep copy) from an another array.</summary>
            <param name="input">Array to copy</param>          
        </member>
        <member name="M:ShoNS.Array.DoubleArray.From(ShoNS.Array.NumArrayBase{System.Int32})">
            <summary>Creates an array (deep copy) from another array.</summary>
            <param name="input">Array to copy</param>          
        </member>
        <member name="M:ShoNS.Array.DoubleArray.FromShallow(ShoNS.Array.NumArrayBase{System.Double})">
            <summary>Creates an array (shallow copy) from another array.</summary>
            <param name="input">Array to copy</param>          
        </member>
        <member name="M:ShoNS.Array.DoubleArray.From(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>Creates a deep copy from an IEnumerable object.</summary>
            <param name="input">Enumerable to copy</param>   
        </member>
        <member name="M:ShoNS.Array.DoubleArray.From(System.Collections.IEnumerable)">
            <summary>Creates a deep copy from an IEnumerable object.</summary>
            <param name="input">Enumerable to copy</param>         
        </member>
        <member name="M:ShoNS.Array.DoubleArray.#ctor(System.Int32)">
            <summary>Creates a DoubleArray of the given length, filled with zeros.</summary>
            <param name="length">Length of vector</param>        
        </member>
        <member name="M:ShoNS.Array.DoubleArray.#ctor(System.Int32,System.Int32)">
            <summary>Creates a size0 x size1 DoubleArray, filled with zeros.</summary>
            <param name="size0">Number of rows</param>
            <param name="size1">Number columns</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.#ctor(System.Int32[])">
            <summary>Creates a multidimensional DoubleArray of the given size, filled with zeros.</summary>
            <param name="sizes">Sizes</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization.</summary>       
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Squeeze">
            <summary>Squeezes out the size 1 dimensions (shallowly).</summary>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.SameValues(ShoNS.Array.DoubleArray,System.Double,System.Double)">
            <summary>Determines if two arrays are the same within the given tolerance.</summary>
            <param name="arrayToCompare" type="DoubleArray">Array to compare.</param>
            <param name="relToler" type="double">Relative tolerance.</param>
            <param name="absToler" type="double">Absolute tolerance.</param>
            <returns>true if the arrays are the same; false if different.</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.SameValues(ShoNS.Array.DoubleArray)">
            <summary>Determines if two arrays are exactly the same.</summary>
            <param name="arrayToCompare" type="DoubleArray">Array to compare.</param>
            <returns>true if the arrays are the same; false if different.</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.AlongDim(System.Int32)">
            <summary>Returns an IEnumerable object that can be used to iterate along a dimension of an array.</summary>
            <param name="dim">Along which dimension</param>        
        </member>
        <member name="M:ShoNS.Array.DoubleArray.RowElements(System.Int32)">
            <summary>Returns an IEnumerable object that can be used to iterate over the elements of a given row.</summary>
            <param name="rowIndex" type="int">The index of the row to return.</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.ColumnElements(System.Int32)">
            <summary>Returns an IEnumerable object that can be used to iterate over the elements of a given column.</summary>
            <param name="colIndex" type="int">The index of the row to return.</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.TransposeDeep">
            <summary>Transposes the 1st and 2nd dimensions of the array, making a deep copy.</summary>
            <returns>Returns a deep copy of transposed array.</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Transpose">
            <summary>Transposes the 1st and 2nd dimensions of the array, making a shallow copy.</summary>
            <returns>Returns a shallow copy of transposed array.</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.CopyDeep">
            <summary>Makes a deep copy of the array; the new array has its own storage.</summary>
            <returns>Returns a deep copy the array.</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.CopyShallow">
            <summary>Makes a shallow copy of the array; the new array shares its storage with the original array.</summary>
            <returns>Returns a shallow copy the array.</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.CopyTo(ShoNS.Array.DoubleArray)">
            <summary>Copies the contents of this array to the specified array.</summary>
            <param name="destArray">Destination array</param>             
        </member>
        <member name="M:ShoNS.Array.DoubleArray.ToVector">
            <summary>Makes a vector, copying the elements in row-column order.</summary>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.GetSlice(System.Int32,System.Int32)">
            <summary>Creates a subarray (shallow copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndex" type="int">Maximum index (inclusive) in the slice.</param>  
        </member>
        <member name="M:ShoNS.Array.DoubleArray.GetRow(System.Int32)">
            <summary>Get a shallow copy of a row.</summary>
            <param name="rowIndex" type="int">Row to retrieve</param>  
            <remarks>This method is a shortcut for calling GetSlice(iRow,iRow,0,size1-1)</remarks>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.GetCol(System.Int32)">
            <summary>Get a shallow copy of a column.</summary>
            <param name="colIndex" type="int">Column to retrieve</param>  
            <remarks>This method is a shortcut for calling GetSlice(0,size0-1,colIndex,colIndex)</remarks>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.GetSliceDeep(System.Int32,System.Int32)">
            <summary>Creates a subarray (deep copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndex" type="int">Maximum index (inclusive) in the slice.</param>  
        </member>
        <member name="M:ShoNS.Array.DoubleArray.GetSlice(System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (shallow copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndex" type="int">Maximum index (inclusive) in the slice.</param>  
            <param name="step">Step</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.GetSliceDeep(System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (deep copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndex" type="int">Maximum index (inclusive) in the slice.</param>  
            <param name="step">Step</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.GetSlice(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (shallow copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRow" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastCol" type="int">Maximum column number (inclusive) in the slice.</param>          
        </member>
        <member name="M:ShoNS.Array.DoubleArray.GetSliceDeep(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (deep copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRow" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastCol" type="int">Maximum column number (inclusive) in the slice.</param>          
        </member>
        <member name="M:ShoNS.Array.DoubleArray.GetSliceDeep(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (deep copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRow" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="stepRow" type="int">Row step size.</param> 
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastCol" type="int">Maximum column number (inclusive) in the slice.</param>          
            <param name="stepCol" type="int">Column step size.</param> 
        </member>
        <member name="M:ShoNS.Array.DoubleArray.GetSlice(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (shallow copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRow" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="stepRow" type="int">Row step size.</param> 
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastCol" type="int">Maximum column number (inclusive) in the slice.</param>          
            <param name="stepCol" type="int">Column step size.</param> 
        </member>
        <member name="M:ShoNS.Array.DoubleArray.GetSliceDeep(ShoNS.Array.Slice[])">
            <summary>Creates a subarray (deep copy). If your slice contains a list of indices, you must call this method.</summary>
            <param name="slices">Slices to get</param>        
        </member>
        <member name="M:ShoNS.Array.DoubleArray.GetSlice(ShoNS.Array.Slice[])">
            <summary>Creates a subarray (shallow copy). If your slice contains a list of indices, call GetSliceDeep instead.</summary>
            <param name="slices">Slices to get</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.GetArrayEntries(System.Collections.Generic.IEnumerable{ShoNS.Array.IArrayEntry})">
            <summary>Creates an array (deep copy) from the array entries.</summary>
            <param name="arrayEntries">Enumerable of array entries to get</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Norm">
            <summary>Computes the matrix two-norm.</summary>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Norm(ShoNS.Array.NormType)">
            <summary>Computes the matrix norm.</summary>
            <param name="normToCompute" type="NormType">Type of norm to compute.</param>
            <remarks>DoubleArray objects implement the two-norm via SVD unless the input is a vector.</remarks>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Dot(ShoNS.Array.DoubleArray)">
            <summary>Computes the vector dot product.</summary>
            <param name="otherVector">Vector to dot.</param>
            <returns>Returns the vector dot product (double).</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Dot(ShoNS.Array.FloatArray)">
            <summary>Computes the vector dot product.</summary>
            <param name="otherVector" type="FloatArray">Vector to dot.</param>
            <returns>Returns the vector dot product (double).</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Dot(ShoNS.Array.IntArray)">
            <summary>Computes the vector dot product.</summary>
            <param name="otherVector" type="IntArray">Vector to dot.</param>
            <returns>Returns the vector dot product (double).</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Dot(ShoNS.Array.SparseDoubleArray)">
            <summary>Computes the vector dot product.</summary>
            <param name="otherVector" type="SparseDoubleArray">Sparse vector to dot.</param>
            <returns>Returns the vector dot product (double).</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Dot(ShoNS.Array.SparseFloatArray)">
            <summary>Computes the vector dot product.</summary>
            <param name="otherVector" type="SparseFloatArray">Sparse vector to dot.</param>
            <returns>Returns the vector dot product (double).</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Dot(ShoNS.Array.SparseIntArray)">
            <summary>Computes the vector dot product.</summary>
            <param name="otherVector" type="SparseIntArray">Sparse vector to dot.</param>
            <returns>Returns the vector dot product (double).</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Sum">
            <summary>Returns the sum of all elements of the array.</summary>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Sum(ShoNS.Array.DimOp)">
            <summary>Computes the sum along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the sum.</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.CumSum(ShoNS.Array.DimOp)">
            <summary>Computes the cumulative sum along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the cumulative sum.</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Min(ShoNS.Array.DimOp)">
            <summary>Finds the minimum element value along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to find the minimum.</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Max(ShoNS.Array.DimOp)">
            <summary>Finds the maximum element value along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to find the maximum.</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Sum(System.Int32)">
            <summary>Computes the sum over the given dimension.</summary>
            <param name="dim">Dimension over which to compute the sum.</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Min(System.Int32)">
            <summary>Finds the minimum element value over the given dimension.</summary>
            <param name="dim">Dimension over which to find the minimum.</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Max(System.Int32)">
            <summary>Finds the maximum element value over the given dimension.</summary>
            <param name="dim">Dimension over which to find the maximum.</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Mean">
            <summary>Computes the mean over the array.</summary>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Median">
            <summary>Computes the median over the array.</summary>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Var">
            <summary>Computes the variance (normalized by N-1) over the array.</summary>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.VarN">
            <summary>Computes the variance (normalized by N) over the array.</summary>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Std">
            <summary>Computes the standard deviation over the array.</summary>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.SumNaN">
            <summary>Computes the sum over the array, ignoring NaN values.</summary>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.MeanNaN">
            <summary>Computes the mean over the array, ignoring NaN values.</summary>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.VarNaN">
            <summary>Computes the variance (normalized by N-1) over the array, ignoring NaN values.</summary>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.VarNNaN">
            <summary>Computes the variance (normalized by N) over the array, ignoring NaN values.</summary>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.StdNaN">
            <summary>Computes the standard deviation over the array, ignoring NaN values.</summary>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Det">
            <summary>Computes the determinant, for square arrays only.</summary>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Inv">
            <summary>Computes the matrix inverse, for square matrices only.</summary>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Mean(System.Int32)">
            <summary>Computes the mean over the given dimension.</summary>
            <param name="dim">Dimension over which to compute the mean.</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Median(System.Int32)">
            <summary>Computes the median over the given dimension.</summary>
            <param name="dim">Dimension over which to compute the median.</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Var(System.Int32)">
            <summary>Computes the variance, normalized by N-1, over the given dimension.</summary>
            <param name="dim">Dimension over which to compute the variance.</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.VarN(System.Int32)">
            <summary>Computes the variance, normalized by N, over the given dimension.</summary>
            <param name="dim">Dimension over which to compute the variance.</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Std(System.Int32)">
            <summary>Computes the standard deviation over the given dimension.</summary>
            <param name="dim">Dimension over which to compute the standard deviation.</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Mean(ShoNS.Array.DimOp)">
            <summary>Computes the mean along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the mean.</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Median(ShoNS.Array.DimOp)">
            <summary>Computes the median along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the median.</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Var(ShoNS.Array.DimOp)">
            <summary>Computes the variance, normalized by N-1, along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the variance.</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.VarN(ShoNS.Array.DimOp)">
            <summary>Computes the variance, normalized by N, along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the variance.</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Std(ShoNS.Array.DimOp)">
            <summary>Computes the standard deviation long the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the standard deviation.</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.SumNaN(ShoNS.Array.DimOp)">
            <summary>Computes the sum along the given dimension, ignoring NaN values.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the mean.</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.MeanNaN(ShoNS.Array.DimOp)">
            <summary>Computes the mean along the given dimension, ignoring NaN values.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the mean.</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.VarNaN(ShoNS.Array.DimOp)">
            <summary>Computes the variance, normalized by N-1, along the given dimension, ignoring NaN values.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the variance.</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.VarNNaN(ShoNS.Array.DimOp)">
            <summary>Computes the variance, normalized by N, along the given dimension, ignoring NaN values.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the variance.</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.StdNaN(ShoNS.Array.DimOp)">
            <summary>Computes the standard deviation long the given dimension, ignoring NaN values.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the standard deviation.</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Add(ShoNS.Array.DoubleArray)">
            <summary>Adds two arrays.</summary>
            <param name="otherArray">Other array to add</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Add(System.Double)">
            <summary>Adds a value to each element of the array.</summary>
            <param name="value">Value to add</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Subtract(ShoNS.Array.DoubleArray)">
            <summary>Subtracts two arrays.</summary>
            <param name="otherArray">Other array to subtract</param>         
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Subtract(ShoNS.Array.FloatArray)">
            <summary>Subtracts two arrays.</summary>
            <param name="otherArray">Other array to subtract</param>         
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Subtract(ShoNS.Array.IntArray)">
            <summary>Subtracts two arrays.</summary>
            <param name="otherArray">Other array to subtract</param>         
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Subtract(System.Double)">
            <summary>Subtracts a value from each element of the array.</summary>
            <param name="value">Value to subtract</param>        
        </member>
        <member name="M:ShoNS.Array.DoubleArray.RSubtract(System.Double)">
            <summary>From a value, subtracts each value of the array.</summary>
            <param name="value">Value to subtract</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Multiply(ShoNS.Array.DoubleArray)">
            <summary>Matrix multiply of this array by another.</summary>
            <param name="otherMatrix">The other matrix.</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Multiply(ShoNS.Array.FloatArray)">
            <summary>Matrix multiply of this array by another.</summary>
            <param name="otherMatrix">The other matrix.</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Multiply(ShoNS.Array.IntArray)">
            <summary>Matrix multiply of this array by another.</summary>
            <param name="otherMatrix">The other matrix.</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Multiply(System.Double)">
            <summary>Multiplies each element of the array by a value.</summary>
            <param name="value">Value to multiply</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Divide(System.Double)">
            <summary>Divides each element of the array by a value.</summary>
            <param name="value">Value to divide</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.RDivide(System.Double)">
            <summary>From a value, divides each element of the array.</summary>
            <param name="value">Value from which to divide</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Addition(ShoNS.Array.DoubleArray,ShoNS.Array.DoubleArray)">
            <summary>Adds two arrays.</summary>
            <param name="arrayLeft" type="DoubleArray">Array on the left side.</param>
            <param name="arrayRight" type="DoubleArray">Array on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Addition(ShoNS.Array.DoubleArray,ShoNS.Array.FloatArray)">
            <summary>Adds two arrays.</summary>
            <param name="arrayLeft" type="DoubleArray">Array on the left side.</param>
            <param name="arrayRight" type="FloatArray">Array on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Addition(ShoNS.Array.DoubleArray,ShoNS.Array.IntArray)">
            <summary>Adds two arrays.</summary>
            <param name="arrayLeft" type="DoubleArray">Array on the left side.</param>
            <param name="arrayRight" type="IntArray">Array on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Addition(ShoNS.Array.FloatArray,ShoNS.Array.DoubleArray)">
            <summary>Adds two arrays.</summary>
            <param name="arrayLeft" type="FloatArray">Array on the left side.</param>
            <param name="arrayRight" type="DoubleArray">Array on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Addition(ShoNS.Array.IntArray,ShoNS.Array.DoubleArray)">
            <summary>Adds two arrays.</summary>
            <param name="arrayLeft" type="IntArray">Array on the left side.</param>
            <param name="arrayRight" type="DoubleArray">Array on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Addition(ShoNS.Array.DoubleArray,ShoNS.Array.SparseDoubleArray)">
            <summary>Adds two arrays.</summary>
            <param name="arrayLeft" type="DoubleArray">Array on the left side.</param>
            <param name="arrayRight" type="SparseDoubleArray">Array on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Addition(ShoNS.Array.DoubleArray,ShoNS.Array.SparseFloatArray)">
            <summary>Adds two arrays.</summary>
            <param name="arrayLeft" type="DoubleArray">Array on the left side.</param>
            <param name="arrayRight" type="SparseFloatArray">Array on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Addition(ShoNS.Array.DoubleArray,ShoNS.Array.SparseIntArray)">
            <summary>Adds two arrays.</summary>
            <param name="arrayLeft" type="DoubleArray">Array on the left side.</param>
            <param name="arrayRight" type="SparseIntArray">Array on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Addition(ShoNS.Array.DoubleArray,System.Double)">
            <summary>Adds a value to each element of an array.</summary>
            <param name="array" type="DoubleArray">The array to which to add the value.</param>
            <param name="value" type="double">The value to add.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Addition(ShoNS.Array.DoubleArray,System.Single)">
            <summary>Adds a value to each element of an array.</summary>
            <param name="array" type="DoubleArray">The array to which to add the value.</param>
            <param name="value" type="float">The value to add.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Addition(ShoNS.Array.DoubleArray,System.Int32)">
            <summary>Adds a value to each element of an array.</summary>
            <param name="array" type="DoubleArray">The array to which to add the value.</param>
            <param name="value" type="int">The value to add.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Addition(System.Double,ShoNS.Array.DoubleArray)">
            <summary>Adds a value to each element of an array.</summary>
            <param name="value" type="double">The value to add.</param>
            <param name="array" type="DoubleArray">The array to which to add the value.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Addition(System.Single,ShoNS.Array.DoubleArray)">
            <summary>Adds a value to each element of an array.</summary>
            <param name="value" type="float">The value to add.</param>
            <param name="array" type="DoubleArray">The array to which to add the value.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Addition(System.Int32,ShoNS.Array.DoubleArray)">
            <summary>Adds a value to each element of an array.</summary>
            <param name="value" type="int">The value to add.</param>
            <param name="array" type="DoubleArray">The array to which to add the value.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Subtraction(ShoNS.Array.DoubleArray,ShoNS.Array.DoubleArray)">
            <summary>Subtracts two arrays.</summary>
            <param name="arrayLeft" type="DoubleArray">Array on the left side.</param>
            <param name="arrayRight" type="DoubleArray">Array on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Subtraction(ShoNS.Array.DoubleArray,ShoNS.Array.FloatArray)">
            <summary>Subtracts two arrays.</summary>
            <param name="arrayLeft" type="DoubleArray">Array on the left side.</param>
            <param name="arrayRight" type="FloatArray">Array on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Subtraction(ShoNS.Array.DoubleArray,ShoNS.Array.IntArray)">
            <summary>Subtracts two arrays.</summary>
            <param name="arrayLeft" type="DoubleArray">Array on the left side.</param>
            <param name="arrayRight" type="IntArray">Array on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Subtraction(ShoNS.Array.FloatArray,ShoNS.Array.DoubleArray)">
            <summary>Subtracts two arrays.</summary>
            <param name="arrayLeft" type="FloatArray">Array on the left side.</param>
            <param name="arrayRight" type="DoubleArray">Array on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Subtraction(ShoNS.Array.IntArray,ShoNS.Array.DoubleArray)">
            <summary>Subtracts two arrays.</summary>
            <param name="arrayLeft" type="IntArray">Array on the left side.</param>
            <param name="arrayRight" type="DoubleArray">Array on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Subtraction(ShoNS.Array.DoubleArray,ShoNS.Array.SparseDoubleArray)">
            <summary>Subtracts a sparse array from a dense array.</summary>
            <param name="arrayLeft" type="DoubleArray">Array on the left side.</param>
            <param name="arrayRight" type="SparseDoubleArray">Sparse array on the right side.</param>
            <returns>A dense DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Subtraction(ShoNS.Array.DoubleArray,ShoNS.Array.SparseFloatArray)">
            <summary>Subtracts a sparse array from a dense array.</summary>
            <param name="arrayLeft" type="DoubleArray">Array on the left side.</param>
            <param name="arrayRight" type="SparseFloatArray">Sparse array on the right side.</param>
            <returns>A dense DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Subtraction(ShoNS.Array.DoubleArray,ShoNS.Array.SparseIntArray)">
            <summary>Subtracts a sparse array from a dense array.</summary>
            <param name="arrayLeft" type="DoubleArray">Array on the left side.</param>
            <param name="arrayRight" type="SparseIntArray">Sparse array on the right side.</param>
            <returns>A dense DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Subtraction(ShoNS.Array.DoubleArray,System.Double)">
            <summary>Subtracts a value from each element of an array.</summary>
            <param name="array" type="DoubleArray">Array on the left side.</param>
            <param name="value" type="double">The value to subtract.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Subtraction(ShoNS.Array.DoubleArray,System.Single)">
            <summary>Subtracts a value from each element of an array.</summary>
            <param name="array" type="DoubleArray">Array on the left side.</param>
            <param name="value" type="double">The value to subtract.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Subtraction(ShoNS.Array.DoubleArray,System.Int32)">
            <summary>Subtracts a value from each element of an array.</summary>
            <param name="array" type="DoubleArray">Array on the left side.</param>
            <param name="value" type="double">The value to subtract.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Subtraction(System.Double,ShoNS.Array.DoubleArray)">
            <summary>From a value, subtracts each element of an array.</summary>
            <param name="value" type="double">The value to subtract.</param>
            <param name="array" type="DoubleArray">Array on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Subtraction(System.Single,ShoNS.Array.DoubleArray)">
            <summary>From a value, subtracts each element of an array.</summary>
            <param name="value" type="float">The value to subtract.</param>
            <param name="array" type="DoubleArray">Array on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Subtraction(System.Int32,ShoNS.Array.DoubleArray)">
            <summary>From a value, subtracts each element of an array.</summary>
            <param name="value" type="int">The value to subtract.</param>
            <param name="array" type="DoubleArray">Array on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Multiply(ShoNS.Array.DoubleArray,ShoNS.Array.DoubleArray)">
            <summary>Multiplies two matrices.</summary>
            <param name="matrixLeft" type="DoubleArray">Matrix on the left side.</param>
            <param name="matrixRight" type="DoubleArray">Matrix on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Multiply(ShoNS.Array.DoubleArray,ShoNS.Array.FloatArray)">
            <summary>Multiplies two matrices.</summary>
            <param name="matrixLeft" type="DoubleArray">Matrix on the left side.</param>
            <param name="matrixRight" type="FloatArray">Matrix on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Multiply(ShoNS.Array.DoubleArray,ShoNS.Array.IntArray)">
            <summary>Multiplies two matrices.</summary>
            <param name="matrixLeft" type="DoubleArray">Matrix on the left side.</param>
            <param name="matrixRight" type="IntArray">Matrix on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Multiply(ShoNS.Array.FloatArray,ShoNS.Array.DoubleArray)">
            <summary>Multiplies two matrices.</summary>
            <param name="matrixLeft" type="FloatArray">Matrix on the left side.</param>
            <param name="matrixRight" type="DoubleArray">Matrix on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Multiply(ShoNS.Array.IntArray,ShoNS.Array.DoubleArray)">
            <summary>Multiplies two matrices.</summary>
            <param name="matrixLeft" type="IntArray">Matrix on the left side.</param>
            <param name="matrixRight" type="DoubleArray">Matrix on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Multiply(ShoNS.Array.DoubleArray,ShoNS.Array.SparseDoubleArray)">
            <summary>Multiplies two matrices.</summary>
            <param name="matrixLeft" type="DoubleArray">Matrix on the left side.</param>
            <param name="matrixRight" type="SparseDoubleArray">Sparse matrix on the right side.</param>
            <returns>A dense DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Multiply(ShoNS.Array.DoubleArray,ShoNS.Array.SparseFloatArray)">
            <summary>Multiplies two matrices.</summary>
            <param name="matrixLeft" type="DoubleArray">Matrix on the left side.</param>
            <param name="matrixRight" type="SparseFloatArray">Sparse matrix on the right side.</param>
            <returns>A dense DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Multiply(ShoNS.Array.DoubleArray,ShoNS.Array.SparseIntArray)">
            <summary>Multiplies two matrices.</summary>
            <param name="matrixLeft" type="DoubleArray">Matrix on the left side.</param>
            <param name="matrixRight" type="SparseIntArray">Sparse matrix on the right side.</param>
            <returns>A dense DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Multiply(ShoNS.Array.DoubleArray,System.Double)">
            <summary>Multiplies each element of an array by a value.</summary>
            <param name="array" type="DoubleArray">Array on the left side.</param>
            <param name="value" type="double">The value to multiply.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Multiply(ShoNS.Array.DoubleArray,System.Single)">
            <summary>Multiplies each element of an array by a value.</summary>
            <param name="array" type="DoubleArray">Array on the left side.</param>
            <param name="value" type="float">The value to multiply.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Multiply(ShoNS.Array.DoubleArray,System.Int32)">
            <summary>Multiplies each element of an array by a value.</summary>
            <param name="array" type="DoubleArray">Array on the left side.</param>
            <param name="value" type="int">The value to multiply.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Multiply(System.Double,ShoNS.Array.DoubleArray)">
            <summary>Multiplies each element of an array by a value.</summary>
            <param name="value" type="double">The value to multiply.</param>
            <param name="array" type="DoubleArray">Array to the right.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Multiply(System.Single,ShoNS.Array.DoubleArray)">
            <summary>Multiplies each element of an array by a value.</summary>
            <param name="value" type="float">The value to multiply.</param>
            <param name="array" type="DoubleArray">Array to the right.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Multiply(System.Int32,ShoNS.Array.DoubleArray)">
            <summary>Multiplies each element of an array by a value.</summary>
            <param name="value" type="int">The value to multiply.</param>
            <param name="array" type="DoubleArray">Array to the right.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.MultiplyAccum(System.Double,ShoNS.Array.DoubleArray)">
            <summary>array += alpha*b</summary>
            <param name="alpha" type="double">The value to multiply.</param>
            <param name="matrixRight" type="DoubleArray">Array to the right.</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.MultiplyInto(ShoNS.Array.DoubleArray,ShoNS.Array.DoubleArray)">
            <summary>Matrix multiplies matrixLeft and matrixRight and stores the results in this DoubleArray: this = matrixLeft*matrixRight.</summary>
            <param name="matrixLeft" type="DoubleArray">Array on the left side.</param>
            <param name="matrixRight" type="DoubleArray">Array to the right.</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.MultiplyInto(System.Double,ShoNS.Array.DoubleArray,System.Boolean,ShoNS.Array.DoubleArray,System.Boolean,System.Double)">
            <summary>Performs this = alpha*op(matrixLeft)*op(matrixRight) + beta*this, storing the results in this DoubleArray.</summary>
            <param name="alpha" type="double">Scalar</param>
            <param name="matrixLeft" type="DoubleArray">Array to the left.</param>
            <param name="transLeft" type="bool">If true, op(matrixLeft) = matrixLeft.T. If false, op(matrixLeft) = matrixLeft</param>
            <param name="matrixRight" type="DoubleArray">Array to the right.</param>
            <param name="transRight" type="bool">If true, op(matrixRight) = matrixRight.T. If false, op(matrixRight) = matrixRight</param>
            <param name="beta" type="double">Scalar used to multiply this array</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.MultiplyInto(ShoNS.Array.SparseDoubleArray,ShoNS.Array.DoubleArray)">
            <summary>Matrix multiplies matrixLeft and matrixRight and stores the results in this DoubleArray: this = matrixLeft*matrixRight.</summary>
            <param name="matrixLeft" type="SparseDoubleArray">Sparse array on the left side.</param>
            <param name="matrixRight" type="DoubleArray">Array to the right.</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.MultiplyInto(System.Double,ShoNS.Array.SparseDoubleArray,System.Boolean,ShoNS.Array.DoubleArray,System.Boolean,System.Double)">
            <summary>Performs this = alpha*op(matrixLeft)*op(matrixRight) + beta*this, storing the results in this DoubleArray.</summary>
            <param name="alpha" type="double">Scalar</param>
            <param name="matrixLeft" type="SparseDoubleArray">Sparse array to the left.</param>
            <param name="transLeft" type="bool">If true, op(matrixLeft) = matrixLeft.T. If false, op(matrixLeft) = matrixLeft</param>
            <param name="matrixRight" type="DoubleArray">Array to the right.</param>
            <param name="transRight" type="bool">If true, op(matrixRight) = matrixRight.T. If false, op(matrixRight) = matrixRight</param>
            <param name="beta" type="double">Scalar used to multiply this array</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.MultiplyTranspose(System.Boolean)">
            <summary>Multiplies the array by its transpose or vice versa: A'*A or A*A'.</summary>
            <param name="transFirst" type="bool">If true, the transpose is on the left side; else it's on the right.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.ElementMultiply(ShoNS.Array.DoubleArray)">
            <summary>Multiplies the elements of two arrays.</summary>
            <param name="otherArray" type="DoubleArray">Array on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.ElementMultiply(ShoNS.Array.FloatArray)">
            <summary>Multiplies the elements of two arrays.</summary>
            <param name="otherArray" type="FloatArray">Array on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.ElementMultiply(ShoNS.Array.IntArray)">
            <summary>Multiplies the elements of two arrays.</summary>
            <param name="otherArray" type="IntArray">Array on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.ElementMultiply(ShoNS.Array.ComplexArray)">
            <summary>Multiplies the elements of two arrays.</summary>
            <param name="otherArray" type="DoubleArray">Array to the right.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.ElementMultiply(ShoNS.Array.SparseDoubleArray)">
            <summary>Multiplies the elements of two arrays.</summary>
            <param name="otherArray" type="SparseDoubleArray">Sparse array on the right side.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.ElementMultiply(ShoNS.Array.SparseFloatArray)">
            <summary>Multiplies the elements of two arrays.</summary>
            <param name="otherArray" type="SparseFloatArray">Sparse array on the right side.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.ElementMultiply(ShoNS.Array.SparseIntArray)">
            <summary>Multiplies the elements of two arrays.</summary>
            <param name="otherArray" type="SparseIntArray">Sparse array on the right side.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Division(ShoNS.Array.DoubleArray,System.Double)">
            <summary>Divides the elements of an array by a value.</summary>
            <param name="array" type="DoubleArray">Array on the left side.</param>
            <param name="value" type="double">Value to divide.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Division(ShoNS.Array.DoubleArray,System.Single)">
            <summary>Divides the elements of an array by a value.</summary>
            <param name="array" type="DoubleArray">Array on the left side.</param>
            <param name="value" type="float">Value to divide.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Division(ShoNS.Array.DoubleArray,System.Int32)">
            <summary>Divides the elements of an array by a value.</summary>
            <param name="array" type="DoubleArray">Array on the left side.</param>
            <param name="value" type="int">Value to divide.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Division(System.Double,ShoNS.Array.DoubleArray)">
            <summary>Divides a value by the elements of an array.</summary>
            <param name="value" type="double">Value to divide.</param>
            <param name="array" type="DoubleArray">Array on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Division(System.Single,ShoNS.Array.DoubleArray)">
            <summary>Divides a value by the elements of an array.</summary>
            <param name="value" type="float">Value to divide.</param>
            <param name="array" type="DoubleArray">Array on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_Division(System.Int32,ShoNS.Array.DoubleArray)">
            <summary>Divides a value by the elements of an array.</summary>
            <param name="value" type="int">Value to divide.</param>
            <param name="array" type="DoubleArray">Array on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.ElementDivide(ShoNS.Array.DoubleArray)">
            <summary>Divides the elements of two arrays.</summary>
            <param name="otherArray">Array on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.ElementDivide(ShoNS.Array.FloatArray)">
            <summary>Divides the elements of two arrays.</summary>
            <param name="otherArray" type="FloatArray">Array on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.ElementDivide(ShoNS.Array.IntArray)">
            <summary>Divides the elements of two arrays.</summary>
            <param name="otherArray" type="IntArray">Array on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.ElementDivide(ShoNS.Array.ComplexArray)">
            <summary>Divides the elements of two arrays.</summary>
            <param name="otherArray" type="DoubleArray">The array on the right.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.ElementDivide(ShoNS.Array.SparseDoubleArray)">
            <summary>Divides the elements of two arrays.</summary>
            <param name="otherArray" type="SparseDoubleArray">Sparse array on the right side.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.ElementDivide(ShoNS.Array.SparseFloatArray)">
            <summary>Divides the elements of two arrays.</summary>
            <param name="otherArray" type="SparseFloatArray">Sparse array on the right side.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.ElementDivide(ShoNS.Array.SparseIntArray)">
            <summary>Divides the elements of two arrays.</summary>
            <param name="otherArray" type="SparseIntArray">Sparse array on the right side.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.op_UnaryNegation(ShoNS.Array.DoubleArray)">
            <summary>Negates each element of the array.</summary>
            <param name="array">Array to negate</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Negate">
            <summary>Negates each element of the array.</summary>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.AddBroadcast(ShoNS.Array.DoubleArray)">
            <summary>Adds the elements of two arrays, broadcasting the arrays if needed.</summary>
            <param name="otherArray" type="DoubleArray">Array on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.SubtractBroadcast(ShoNS.Array.DoubleArray)">
            <summary>Subtracts the elements of two arrays, broadcasting the arrays if needed.</summary>
            <param name="otherArray" type="DoubleArray">Array on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.ElementMultiplyBroadcast(ShoNS.Array.DoubleArray)">
            <summary>Multiplies the elements of two arrays, broadcasting the arrays if needed.</summary>
            <param name="otherArray" type="DoubleArray">Array on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.ElementDivideBroadcast(ShoNS.Array.DoubleArray)">
            <summary>Divides the elements of two arrays, broadcasting the arrays if needed.</summary>
            <param name="otherArray" type="DoubleArray">Array on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Sort">
            <summary>Sorts the array in ascending order.</summary>
            <returns>A vector containing the sorted values.</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.SortDesc">
            <summary>Sorts the array in descending order.</summary>
            <returns>A vector containing the sorted values.</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.SortIndex(ShoNS.Array.IntArray@)">
            <summary>Sorts the array in ascending order, returning the indices into the original array in sorted order.</summary>
            <param name="indexArray">The indices into the original array, an out parameter.</param>
            <returns>A vector containing the sorted values and an IntArray containing the indices into the original array.</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.SortDescIndex(ShoNS.Array.IntArray@)">
            <summary>Sorts the array in descending order, returning the indices into the original array in sorted order.</summary>
            <param name="indexArray">The indices into the original array, an out parameter.</param>
            <returns>A vector containing the sorted values and an IntArray containing the indices into the original array.</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Sort(System.Int32)">
            <summary>Sorts the array in ascending order over the given dimension.</summary>
            <param name="dim">The dimension to sort.</param>
            <returns>An array containing the sorted values.</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.SortDesc(System.Int32)">
            <summary>Sorts the array in descending order along the given dimension.</summary>
            <param name="dim">The dimension to sort.</param>
            <returns>An array containing the sorted values.</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.SortIndex(System.Int32,ShoNS.Array.IntArray@)">
            <summary>Sorts the array in ascending order, along the given dimension, returning the indices into the original array in sorted order.</summary>
            <param name="dim">The dimension to sort.</param>
            <param name="indexArray">The indices into the original array, an out parameter.</param>
            <returns>An array of sorted values and an IntArray containing the indices into the original array.</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.SortDescIndex(System.Int32,ShoNS.Array.IntArray@)">
            <summary>Sorts the array in descending order, along the given dimension, returning the indices into the original array in sorted order.</summary>
            <param name="dim">The dimension to sort.</param>
            <param name="indexArray">The indices into the original array, an out parameter.</param>
            <returns>An array of sorted values and an IntArray containing the indices into the original array.</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.Sort(ShoNS.Array.DimOp)">
            <summary>Sorts the array in ascending order along the given dimension.</summary>
            <param name="dim" type="DimOp">The dimension to sort.</param>
            <returns>An array containing the sorted values.</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.SortDesc(ShoNS.Array.DimOp)">
            <summary>Sorts the array in descending order along the given dimension.</summary>
            <param name="dim" type="DimOp">The dimension to sort.</param>
            <returns>An array containing the sorted values.</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.SortIndex(ShoNS.Array.DimOp,ShoNS.Array.IntArray@)">
            <summary>Sorts the array in ascending order, along the given dimension, returning the indices into the original array in sorted order.</summary>
            <param name="dim" type="DimOp">The dimension to sort.</param>
            <param name="indexArray">The indices into the original array, an out parameter.</param>
            <returns>An array of sorted values and an IntArray containing the indices into the original array.</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.SortDescIndex(ShoNS.Array.DimOp,ShoNS.Array.IntArray@)">
            <summary>Sorts the array in descending order, along the given dimension, returning the indices into the original array in sorted order.</summary>
            <param name="dim" type="DimOp">The dimension to sort.</param>
            <param name="indexArray">The indices into the original array, an out parameter.</param>
            <returns>An array of sorted values and an IntArray containing the indices into the original array.</returns>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.VertStack(System.Collections.IEnumerable[])">
            <summary>Stacks the inputs vertically.</summary>
            <param name="items">Items to stack</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.HorizStack(System.Collections.IEnumerable[])">
            <summary>Stacks the inputs horizontally.</summary>
            <param name="items">Items to stack</param>        
        </member>
        <member name="M:ShoNS.Array.DoubleArray.FromEntryEnumerable(System.Collections.Generic.IEnumerable{ShoNS.Array.ArrayEntry{System.Double}},System.Int32,System.Int32)">
            <summary> Creates a DoubleArray of size rowCount x colCount from the given ArrayEntry enumerable.</summary>
            <param name="entries">Enumerable of ArrayEntry</param>
            <param name="rowCount">Number of rows in output array</param>
            <param name="colCount">Number of columns in output array</param>
        </member>
        <member name="M:ShoNS.Array.DoubleArray.FromEntryEnumerable(System.Collections.Generic.IEnumerable{ShoNS.Array.ArrayEntry{System.Double}})">
            <summary> Creates a vector with the values in the ArrayEntry enumerable.</summary>
            <param name="entries">Enumerable of ArrayEntry</param>        
        </member>
        <member name="M:ShoNS.Array.DoubleArray.FromBinaryFile(System.String)">
            <summary>Creates an array from a binary file saved by a call to SaveToBinaryFile.</summary>
            <param name="filename">Filename containing array</param>          
        </member>
        <member name="M:ShoNS.Array.DoubleArray.SaveToBinaryFile(System.String)">
            <summary>Saves an array to a binary file, avoiding .NET serialization.</summary>
            <param name="filename">Filename to contain array</param>          
        </member>
        <member name="P:ShoNS.Array.DoubleArray.Rows">
            <summary>Returns an IEnumerable object that can be used to iterate over the rows of the array, for rank 2 only.</summary>
        </member>
        <member name="P:ShoNS.Array.DoubleArray.Cols">
            <summary>Returns an IEnumerable object that can be used to iterate over the columns of the array, for rank 2 only.</summary>
        </member>
        <member name="P:ShoNS.Array.DoubleArray.T">
            <summary>Transposes the 1st and 2nd dimensions of the array, making a shallow copy.</summary>
            <returns>Returns a shallow copy of transposed array.</returns>
        </member>
        <member name="P:ShoNS.Array.DoubleArray.Diagonal">
            <summary>Returns the main diagonal of the array as a vectory or sets the main diagonal to the inputObject vector.</summary>
        </member>
        <member name="T:ShoNS.Array.EigenVals">
            <summary>This class computes the eigenvalues for a floating point matrix.</summary>
        </member>
        <member name="M:ShoNS.Array.EigenVals.#ctor(ShoNS.Array.DoubleArray)">
            <summary>Computes the eigenvalues for the input matrix.</summary>
            <param name="inputMatrix">Input matrix to decompose</param>
        </member>
        <member name="M:ShoNS.Array.EigenVals.#ctor(ShoNS.Array.DoubleArray,ShoNS.Array.DoubleArray)">
            <summary>Computes the generalized eigenvalues for the system A*x = lambda*B*x</summary>
        </member>
        <member name="P:ShoNS.Array.EigenVals.D">
            <summary>The eigenvalues</summary>
        </member>
        <member name="T:ShoNS.Array.EigenValsSym">
            <summary>This class computes the eigenvalues for a symmetric floating point matrix.</summary>
        </member>
        <member name="M:ShoNS.Array.EigenValsSym.#ctor(ShoNS.Array.DoubleArray)">
            <summary>Computes the eigenvalues for the input matrix.</summary>
            <param name="inputMatrix">Input matrix to decompose</param>
        </member>
        <member name="M:ShoNS.Array.EigenValsSym.#ctor(ShoNS.Array.DoubleArray,System.Int32)">
            <summary>
            Compute a subset of eigenvalues for the input matrix
            </summary>
            <param name="inputMatrix">Input matrix to decompose</param>
            <param name="numEigenvalues">Number of eigenvalues to compute. If greater than 0, compute the highest ones,
            if less than 0, compute the lowest ones</param>
        </member>
        <member name="M:ShoNS.Array.EigenValsSym.#ctor(ShoNS.Array.DoubleArray,ShoNS.Array.DoubleArray)">
            <summary>Computes the generalized eigenvalues for the system A*x = lambda*B*x</summary>
        </member>
        <member name="M:ShoNS.Array.EigenValsSym.#ctor(ShoNS.Array.DoubleArray,ShoNS.Array.DoubleArray,System.Int32)">
            <summary>Compute a subset of generalized eigenvalues for the system A*x = lambda*B*x</summary>
            <param name="A">Symmetric matrix on left-hand side</param>
            <param name="B">Positive-definite matrix on right-hand side</param>
            <param name="numEigenvalues">Number of eigenvalues to compute. If greater than 0, compute the highest ones,
            if less than 0, compute the lowest ones</param>
        </member>
        <member name="P:ShoNS.Array.EigenValsSym.D">
            <summary>The eigenvalues</summary>
        </member>
        <member name="T:ShoNS.Array.EigenValsAsym">
            <summary>This class computes the eigenvalues for an asymmetric floating point matrix.</summary>
        </member>
        <member name="M:ShoNS.Array.EigenValsAsym.#ctor(ShoNS.Array.DoubleArray)">
            <summary>Computes the eigenvalues for the input matrix.</summary>
            <param name="inputMatrix">Input matrix to decompose</param>
        </member>
        <member name="M:ShoNS.Array.EigenValsAsym.#ctor(ShoNS.Array.DoubleArray,ShoNS.Array.DoubleArray)">
            <summary>Computes the generalized eigenvalues for the system A*x = lambda*B*x</summary>
            <param name="A">Asymmetric matrix on left-hand side</param>
            <param name="B">Positive-definite matrix on right-hand side</param>        
        </member>
        <member name="P:ShoNS.Array.EigenValsAsym.D">
            <summary>The eigenvalues</summary>
        </member>
        <member name="T:ShoNS.Array.EigenValsFloat">
            <summary>This class computes the eigenvalues for a floating point array.</summary>
        </member>
        <member name="M:ShoNS.Array.EigenValsFloat.#ctor(ShoNS.Array.FloatArray)">
            <summary>Computes the eigenvalues for the input array.</summary>
            <param name="inputMatrix">Input matrix to decompose</param>       
        </member>
        <member name="M:ShoNS.Array.EigenValsFloat.#ctor(ShoNS.Array.FloatArray,ShoNS.Array.FloatArray)">
            <summary>Computes the generalized eigenvalues for the system A*x = lambda*B*x</summary>
            <param name="A">Matrix on left-hand side</param>
            <param name="B">Positive-definite matrix on right-hand side</param>             
        </member>
        <member name="P:ShoNS.Array.EigenValsFloat.D">
            <summary>The eigenvalues</summary>
        </member>
        <member name="T:ShoNS.Array.EigenValsSymFloat">
            <summary>This class computes the eigenvalues for a symmetric floating point array.</summary>
        </member>
        <member name="M:ShoNS.Array.EigenValsSymFloat.#ctor(ShoNS.Array.FloatArray)">
            <summary>Computes the eigenvalues for the input array.</summary>
            <param name="inputMatrix">Input matrix to decompose</param>        
        </member>
        <member name="M:ShoNS.Array.EigenValsSymFloat.#ctor(ShoNS.Array.FloatArray,System.Int32)">
            <summary>Compute a subset of eigenvalues for the input matrix</summary>
            <param name="inputMatrix">Input matrix to decompose</param>
            <param name="numEigenvalues">Number of eigenvalues to compute. If greater than 0, compute the highest ones,
            if less than 0, compute the lowest ones</param>
        </member>
        <member name="M:ShoNS.Array.EigenValsSymFloat.#ctor(ShoNS.Array.FloatArray,ShoNS.Array.FloatArray)">
            <summary>Computes the generalized eigenvalues for the system A*x = lambda*B*x</summary>
            <param name="A">Symmetric matrix on left-hand side</param>
            <param name="B">Positive-definite matrix on right-hand side</param>   
        </member>
        <member name="M:ShoNS.Array.EigenValsSymFloat.#ctor(ShoNS.Array.FloatArray,ShoNS.Array.FloatArray,System.Int32)">
            <summary>
            Compute a subset of generalized eigenvalues for the system A*x = lambda*B*x
            </summary>
            <param name="A">matrix on left-hand side</param>
            <param name="B">positive-definite matrix on right-hand side</param>
            <param name="numEigenvalues">number of eigenvalues to compute. If greater than 0, compute the highest ones,
            if less than 0, compute the lowest ones</param>
        </member>
        <member name="P:ShoNS.Array.EigenValsSymFloat.D">
            <summary>The eigenvalues</summary>
        </member>
        <member name="T:ShoNS.Array.EigenValsAsymFloat">
            <summary>This class computes the eigenvalues for an asymmetric floating point array.</summary>
        </member>
        <member name="M:ShoNS.Array.EigenValsAsymFloat.#ctor(ShoNS.Array.FloatArray)">
            <summary>Computes the eigenvalues for the input array.</summary>
            <param name="inputMatrix">Input matrix to decompose</param>        
        </member>
        <member name="M:ShoNS.Array.EigenValsAsymFloat.#ctor(ShoNS.Array.FloatArray,ShoNS.Array.FloatArray)">
            <summary>Computes the generalized eigenvalues for the system A*x = lambda*B*x</summary>
            <param name="A">Asymmetric matrix on left-hand side</param>
            <param name="B">Positive-definite matrix on right-hand side</param>           
        </member>
        <member name="P:ShoNS.Array.EigenValsAsymFloat.D">
            <summary>The eigenvalues</summary>
        </member>
        <member name="T:ShoNS.Array.Eigen">
            <summary>This class computes the full eigenvalue decomposition for a double floating point array.</summary>
        </member>
        <member name="M:ShoNS.Array.Eigen.#ctor(ShoNS.Array.DoubleArray)">
            <summary>Computes the eigenvalues and eigenvectors for a DoubleArray.</summary>
            <param name="inputMatrix">Input matrix to decompose</param>        
        </member>
        <member name="M:ShoNS.Array.Eigen.#ctor(ShoNS.Array.DoubleArray,ShoNS.Array.DoubleArray)">
            <summary>Computes the generalized eigenvalues and eigenvectors for the system A*x = lambda*B*x.</summary>
            <param name="A">Matrix on left-hand side</param>
            <param name="B">Positive-definite matrix on right-hand side</param>  
        </member>
        <member name="P:ShoNS.Array.Eigen.D">
            <summary>The eigenvalues</summary>
        </member>
        <member name="P:ShoNS.Array.Eigen.V">
            <summary>The eigenvectors</summary>
        </member>
        <member name="T:ShoNS.Array.EigenFloat">
            <summary>This class computes the full eigenvalue decomposition for a single floating point array.</summary>
        </member>
        <member name="M:ShoNS.Array.EigenFloat.#ctor(ShoNS.Array.FloatArray)">
            <summary>Computes the full eigen decomposition for a FloatArray.</summary>
            <param name="inputMatrix">Input matrix to decompose</param>        
        </member>
        <member name="M:ShoNS.Array.EigenFloat.#ctor(ShoNS.Array.FloatArray,ShoNS.Array.FloatArray)">
            <summary>Computes the generalized eigenvalues and eigenvectors for the system A*x = lambda*B*x.</summary>
            <param name="A">Matrix on left-hand side</param>
            <param name="B">Positive-definite matrix on right-hand side</param>
        </member>
        <member name="P:ShoNS.Array.EigenFloat.D">
            <summary>The eigenvalues</summary>
        </member>
        <member name="P:ShoNS.Array.EigenFloat.V">
            <summary>The eigenvectors</summary>
        </member>
        <member name="T:ShoNS.Array.EigenSym">
            <summary>This class computes the full eigenvalue decomposition for a symmetric double floating point array.</summary>
        </member>
        <member name="M:ShoNS.Array.EigenSym.#ctor(ShoNS.Array.DoubleArray)">
            <summary>Computes the eigenvalues and corresponding eigenvectors for a symmetric matrix..</summary>
            <param name="inputMatrix">Input matrix to decompose</param>        
        </member>
        <member name="M:ShoNS.Array.EigenSym.#ctor(ShoNS.Array.DoubleArray,System.Int32)">
            <summary>Computes a subset of eigenvalues and corresponding eigenvectors for a symmetric matrix.</summary>
            <param name="inputMatrix">Input matrix to decompose</param>
            <param name="numEigenvalues">Number of eigenvalues to compute: if positive, then compute highest eigenvalues.
            If negative, then compute lowest eigenvalues.</param>
        </member>
        <member name="M:ShoNS.Array.EigenSym.#ctor(ShoNS.Array.DoubleArray,ShoNS.Array.DoubleArray)">
            <summary>Computes the eigenvalues and corresponding eigenvectors for the system A*x = lambda*B*x</summary>
            <param name="A">Symmetric matrix on left-hand side</param>
            <param name="B">Positive-definite matrix on right-hand side</param>
        </member>
        <member name="M:ShoNS.Array.EigenSym.#ctor(ShoNS.Array.DoubleArray,ShoNS.Array.DoubleArray,System.Int32)">
            <summary>
            Computes a subset of eigenvalues and corresponding eigenvectors for a symmetric matrix.</summary>
            <param name="A">Symmetric matrix on left-hand side</param>
            <param name="B">Positive-definite matrix on right-hand side</param>
            <param name="numEigenvalues">number of eigenvalues to compute: if positive, then compute highest eigenvalues.
            If negative, then compute lowest eigenvalues.</param>
        </member>
        <member name="P:ShoNS.Array.EigenSym.D">
            <summary>The eigenvalues</summary>
        </member>
        <member name="P:ShoNS.Array.EigenSym.V">
            <summary>The eigenvectors</summary>
        </member>
        <member name="T:ShoNS.Array.EigenSymFloat">
            <summary>This class computes the full eigenvalue decomposition for a symmetric single floating point array.</summary>
        </member>
        <member name="M:ShoNS.Array.EigenSymFloat.#ctor(ShoNS.Array.FloatArray)">
            <summary>Computes the eigenvalues and corresponding eigenvalues for a symmetric matrix.</summary>
            <param name="inputMatrix">Input matrix to decompose</param>        
        </member>
        <member name="M:ShoNS.Array.EigenSymFloat.#ctor(ShoNS.Array.FloatArray,System.Int32)">
            <summary>Computes a subset of the eigenvalues and corresponding eigenvalues for a symmetric matrix.</summary>
            <param name="inputMatrix">Input matrix to decompose</param>
            <param name="numEigenvalues">Number of eigenvalues to compute: if positive, then compute highest eigenvalues.
            If negative, then compute lowest eigenvalues.</param>
        </member>
        <member name="M:ShoNS.Array.EigenSymFloat.#ctor(ShoNS.Array.FloatArray,ShoNS.Array.FloatArray)">
            <summary>Computes the eigenvalues and corresponding eigenvectors for the system A*x = lambda*B*x</summary>
            <param name="A">Symmetric matrix on left-hand side</param>
            <param name="B">Positive-definite matrix on right-hand side</param>
        </member>
        <member name="M:ShoNS.Array.EigenSymFloat.#ctor(ShoNS.Array.FloatArray,ShoNS.Array.FloatArray,System.Int32)">
            <summary>Computes a subset of eigenvalues and corresponding eigenvectors for a symmetric matrix.</summary>
            <param name="A">Symmetric matrix on left-hand side</param>
            <param name="B">Positive-definite matrix on right-hand side</param>
            <param name="numEigenvalues">Number of eigenvalues to compute: if positive, then compute highest eigenvalues.
            If negative, then compute lowest eigenvalues.</param>
        </member>
        <member name="P:ShoNS.Array.EigenSymFloat.D">
            <summary>The eigenvalues</summary>
        </member>
        <member name="P:ShoNS.Array.EigenSymFloat.V">
            <summary>The eigenvectors</summary>
        </member>
        <member name="T:ShoNS.Array.EigenAsym">
            <summary>This class computes the eigenvalue and eigevector decomposition for an asymmetric double floating point array.</summary>
        </member>
        <member name="M:ShoNS.Array.EigenAsym.#ctor(ShoNS.Array.DoubleArray)">
            <summary>Computes the eigenvalues and eigenvectors for an asymmetric DoubleArray.</summary>
            <param name="inputMatrix">Input matrix to decompose</param>        
        </member>
        <member name="M:ShoNS.Array.EigenAsym.#ctor(ShoNS.Array.DoubleArray,ShoNS.Array.DoubleArray)">
            <summary>Computes the eigenvalues and eigenvectors for the system A*x = lambda*B*x</summary>
            <param name="A">Asymmetric matrix on left-hand side</param>
            <param name="B">Positive-definite matrix on right-hand side</param>
        </member>
        <member name="P:ShoNS.Array.EigenAsym.D">
            <summary>The eigenvalues</summary>
        </member>
        <member name="P:ShoNS.Array.EigenAsym.V">
            <summary>The eigenvectors</summary>
        </member>
        <member name="T:ShoNS.Array.EigenAsymFloat">
            <summary>This class computes the eigenvalue and eigenvector decomposition for an asymmetric single floating point array.</summary>
        </member>
        <member name="M:ShoNS.Array.EigenAsymFloat.#ctor(ShoNS.Array.FloatArray)">
            <summary>Computes the full eigen decomposition for an asymmetric FloatArray.</summary>
            <param name="inputMatrix">Input matrix to decompose</param>        
        </member>
        <member name="M:ShoNS.Array.EigenAsymFloat.#ctor(ShoNS.Array.FloatArray,ShoNS.Array.FloatArray)">
            <summary>Computes the eigenvalues and eigenvectors for the system A*x = lambda*B*x</summary>
            <param name="A">Asymmetric matrix on left-hand side</param>
            <param name="B">Positive-definite matrix on right-hand side</param>
        </member>
        <member name="P:ShoNS.Array.EigenAsymFloat.D">
            <summary>The eigenvalues</summary>
        </member>
        <member name="P:ShoNS.Array.EigenAsymFloat.V">
            <summary>The eigenvectors</summary>
        </member>
        <member name="T:ShoNS.Array.FloatArray">
            <summary>This class implements functionality for an array with single-precision floating point elements.</summary>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Zeros(System.Int32)">
            <summary>Creates a FloatArray of the given length, filled with zeros.</summary>
            <param name="length">Vector length</param>        
        </member>
        <member name="M:ShoNS.Array.FloatArray.Zeros(System.Int32,System.Int32)">
            <summary>Creates a FloatArray of size0 x size1, filled with zeros.</summary>
            <param name="size0">Number of rows</param>
            <param name="size1">Number of columns</param>             
        </member>
        <member name="M:ShoNS.Array.FloatArray.Zeros(System.Int32[])">
             <summary>Creates a multidimensional FloatArray of the given size, filled with zeros.</summary>
            <param name="sizes">Sizes</param>        
        </member>
        <member name="M:ShoNS.Array.FloatArray.Ones(System.Int32)">
            <summary>Creates a FloatArray of the given length, filled with ones.</summary>
            <param name="length">Vector length</param>        
        </member>
        <member name="M:ShoNS.Array.FloatArray.Ones(System.Int32,System.Int32)">
            <summary>Creates an FloatArray of size0 x size1, filled with ones.</summary>
            <param name="size0">Number of rows</param>
            <param name="size1">Number of columns</param>             
        </member>
        <member name="M:ShoNS.Array.FloatArray.Ones(System.Int32[])">
             <summary>Creates a multidimensional IntArray of the given size, filled with ones.</summary>
            <param name="sizes">Sizes</param>        
        </member>
        <member name="M:ShoNS.Array.FloatArray.Id(System.Int32,System.Int32)">
            <summary>Creates the size0 x size1 identity FloatArray.</summary>
            <param name="size0">Number of rows</param>
            <param name="size1">Number of columns</param>             
        </member>
        <member name="M:ShoNS.Array.FloatArray.FromFile(System.String)">
            <summary>Creates an array from a file, using binary serialization.</summary>
            <param name="fileName" type="String">Name of file from which to create the array.</param>    
        </member>
        <member name="M:ShoNS.Array.FloatArray.FromStream(System.IO.Stream)">
            <summary>Creates an array from a stream, using binary serialization.</summary>
            <param name="stream" type="System.IO.Stream">Stream from which to create the array.</param>  
        </member>
        <member name="M:ShoNS.Array.FloatArray.From(ShoNS.Array.NumArrayBase{System.Single})">
            <summary>Creates an array (deep copy) from another array.</summary>
            <param name="input">Array to copy</param>        
        </member>
        <member name="M:ShoNS.Array.FloatArray.From(ShoNS.Array.NumArrayBase{System.Double})">
            <summary>Creates an array (deep copy) from another array.</summary>
        </member>
        <member name="M:ShoNS.Array.FloatArray.From(ShoNS.Array.NumArrayBase{System.Int32})">
            <summary>Creates an array (deep copy) from another array.</summary>
            <param name="input">Array to copy</param>        
        </member>
        <member name="M:ShoNS.Array.FloatArray.FromShallow(ShoNS.Array.NumArrayBase{System.Single})">
            <summary>Creates an array (shallow copy) from another array.</summary>
            <param name="input">Array to copy</param>        
        </member>
        <member name="M:ShoNS.Array.FloatArray.From(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>Creates a deep copy from an IEnumerable object.</summary>
            <param name="input">Enumerable to copy</param>         
        </member>
        <member name="M:ShoNS.Array.FloatArray.From(System.Collections.IEnumerable)">
            <summary>Creates a deep copy from an IEnumerable object.</summary>
            <param name="input">Enumerable to copy</param>         
        </member>
        <member name="M:ShoNS.Array.FloatArray.#ctor(System.Int32)">
            <summary>Creates a FloatArray of the given length, filled with zeros.</summary>
            <param name="length">Length of vector</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.#ctor(System.Int32,System.Int32)">
            <summary>Creates a FloatArray of size0 x size1, filled with zeros.</summary>
            <param name="size0">Number of rows</param>
            <param name="size1">Number columns</param>        
        </member>
        <member name="M:ShoNS.Array.FloatArray.#ctor(System.Int32[])">
            <summary>Creates a multidimensional FloatArray of the given size, filled with zeros.</summary>
            <param name="sizes">Sizes</param>        
        </member>
        <member name="M:ShoNS.Array.FloatArray.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization.</summary>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Squeeze">
            <summary>Squeezes out the size 1 dimensions (shallowly).</summary>
        </member>
        <member name="M:ShoNS.Array.FloatArray.SameValues(ShoNS.Array.FloatArray,System.Single,System.Single)">
            <summary>Determines if two arrays are the same within the given tolerance.</summary>
            <param name="arrayToCompare" type="FloatArray">Array to compare.</param>
            <param name="relToler" type="float">Relative tolerance.</param>
            <param name="absToler" type="float">Absolute tolerance.</param>
            <returns>true if the arrays are the same; false if different.</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.SameValues(ShoNS.Array.FloatArray)">
            <summary>Determines if two arrays are exactly the same.</summary>
            <param name="arrayToCompare" type="FloatArray">Array to compare.</param>
            <returns>true if the arrays are the same; false if different.</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.AlongDim(System.Int32)">
            <summary>Returns an IEnumerable object that can be used to iterate along a dimension of an array.</summary>
            <param name="dim">Along which dimension</param>        
        </member>
        <member name="M:ShoNS.Array.FloatArray.RowElements(System.Int32)">
            <summary>Returns an IEnumerable object that can be used to iterate over the elements of a given row.</summary>
            <param name="rowIndex" type="int">The index of the row to return.</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.ColumnElements(System.Int32)">
            <summary>Returns an IEnumerable object that can be used to iterate over the elements of a given column.</summary>
            <param name="colIndex" type="int">The index of the row to return.</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.TransposeDeep">
            <summary>Transposes the 1st and 2nd dimensions of the array, making a deep copy.</summary>
            <returns>Returns a deep copy of transposed array.</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Transpose">
            <summary>Transposes the 1st and 2nd dimensions of the array, making a shallow copy.</summary>
            <returns>Returns a shallow copy of transposed array.</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.CopyDeep">
            <summary>Makes a deep copy of the array; the new array has its own storage.</summary>
            <returns>Returns a deep copy the array.</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.CopyShallow">
            <summary>Makes a shallow copy of the array; the new array shares its storage with the original array.</summary>
            <returns>Returns a shallow copy the array.</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.CopyTo(ShoNS.Array.FloatArray)">
            <summary>Copies the contents of this array to the specified array.</summary>
            <param name="destArray">Destination array</param>             
        </member>
        <member name="M:ShoNS.Array.FloatArray.ToVector">
            <summary>Makes a vector, copying the elements in row-column order.</summary>
        </member>
        <member name="M:ShoNS.Array.FloatArray.GetSlice(System.Int32,System.Int32)">
            <summary>Creates a subarray (shallow copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndex" type="int">Maximum index (inclusive) in the slice.</param>  
        </member>
        <member name="M:ShoNS.Array.FloatArray.GetSliceDeep(System.Int32,System.Int32)">
            <summary>Creates a subarray (deep copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndex" type="int">Maximum index (inclusive) in the slice.</param>  
        </member>
        <member name="M:ShoNS.Array.FloatArray.GetSlice(System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (shallow copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndex" type="int">Maximum index (inclusive) in the slice.</param>  
            <param name="step">Step</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.GetSliceDeep(System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (deep copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndex" type="int">Maximum index (inclusive) in the slice.</param>  
            <param name="step">Step</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.GetRow(System.Int32)">
            <summary>Get a shallow copy of a row.</summary>
            <param name="rowIndex" type="int">Row to retrieve</param>  
            <remarks>This method is a shortcut for calling GetSlice(iRow,iRow,0,size1-1)</remarks>
        </member>
        <member name="M:ShoNS.Array.FloatArray.GetCol(System.Int32)">
            <summary>Get a shallow copy of a column.</summary>
            <param name="colIndex" type="int">Column to retrieve</param>  
            <remarks>This method is a shortcut for calling GetSlice(0,size0-1,colIndex,colIndex)</remarks>
        </member>
        <member name="M:ShoNS.Array.FloatArray.GetSlice(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (shallow copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRow" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastCol" type="int">Maximum column number (inclusive) in the slice.</param>          
        </member>
        <member name="M:ShoNS.Array.FloatArray.GetSliceDeep(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (deep copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRow" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastCol" type="int">Maximum column number (inclusive) in the slice.</param>          
        </member>
        <member name="M:ShoNS.Array.FloatArray.GetSliceDeep(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (deep copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRow" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="stepRow" type="int">Row step size.</param> 
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastCol" type="int">Maximum column number (inclusive) in the slice.</param>          
            <param name="stepCol" type="int">Column step size.</param> 
        </member>
        <member name="M:ShoNS.Array.FloatArray.GetSlice(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (shallow copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRow" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="stepRow" type="int">Row step size.</param> 
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastCol" type="int">Maximum column number (inclusive) in the slice.</param>          
            <param name="stepCol" type="int">Column step size.</param> 
        </member>
        <member name="M:ShoNS.Array.FloatArray.GetSliceDeep(ShoNS.Array.Slice[])">
            <summary>Creates a subarray (deep copy). If your slice contains a list of indices, you must call this method.</summary>
            <param name="slices">Slices to get</param>        
        </member>
        <member name="M:ShoNS.Array.FloatArray.GetSlice(ShoNS.Array.Slice[])">
            <summary>Creates a subarray (shallow copy). If your slice contains a list of indices, call GetSliceDeep instead.</summary>
            <param name="slices">Slices to get</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.GetArrayEntries(System.Collections.Generic.IEnumerable{ShoNS.Array.IArrayEntry})">
            <summary>Creates an array (deep copy) from the array entries.</summary>
            <param name="arrayEntries">Enumerable of array entries to get</param>   
        </member>
        <member name="M:ShoNS.Array.FloatArray.Norm">
            <summary>Computes the array two-norm.</summary>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Norm(ShoNS.Array.NormType)">
            <summary>Computes the array norm.</summary>
            <param name="normToCompute" type="NormType">Type of norm to compute.</param>
            <remarks>FloatArray objects implement the two-norm via SVD if the inputObject is a 2D array.</remarks>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Dot(ShoNS.Array.DoubleArray)">
            <summary>Computes the vector dot product.</summary>
            <param name="otherVector" type="DoubleArray">DoubleArray vector to dot.</param>
            <returns>Returns the vector dot product (double).</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Dot(ShoNS.Array.FloatArray)">
            <summary>Computes the vector dot product.</summary>
            <param name="otherVector" type="FloatArray">FloatArray vector to dot.</param>
            <returns>Returns the vector dot product (float).</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Dot(ShoNS.Array.IntArray)">
            <summary>Computes the vector dot product.</summary>
            <param name="otherVector" type="IntArray">IntArray vector to dot.</param>
            <returns>Returns the vector dot product (float).</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Dot(ShoNS.Array.SparseDoubleArray)">
            <summary>Computes the vector dot product.</summary>
            <param name="otherVector" type="SparseDoubleArray">SparseDoubleArray vector to dot.</param>
            <returns>Returns the vector dot product (double).</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Dot(ShoNS.Array.SparseFloatArray)">
            <summary>Computes the vector dot product.</summary>
            <param name="otherVector" type="SparseFloatArray">SparseFloatArray vector to dot.</param>
            <returns>Returns the vector dot product (float).</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Dot(ShoNS.Array.SparseIntArray)">
            <summary>Computes the vector dot product.</summary>
            <param name="otherVector" type="SparseIntArray">SparseIntArray vector to dot.</param>
            <returns>Returns the vector dot product (float).</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Sum(System.Int32)">
            <summary>Computes the sum over the given dimension.</summary>
            <param name="dim">Dimension over which to compute the sum.</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Min(System.Int32)">
            <summary>Finds the minimum element value over the given dimension.</summary>
            <param name="dim">Dimension over which to find the minimum.</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Max(System.Int32)">
            <summary>Finds the maximum element value over the given dimension.</summary>
            <param name="dim">Dimension over which to find the maximum.</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Sum">
            <summary>Returns the sum of all elements of the array.</summary>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Sum(ShoNS.Array.DimOp)">
            <summary>Computes the sum along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the sum.</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.CumSum(ShoNS.Array.DimOp)">
            <summary>Computes the cumulative sum along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the cumulative sum.</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Min(ShoNS.Array.DimOp)">
            <summary>Finds the minimum element value along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to find the minimum.</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Max(ShoNS.Array.DimOp)">
            <summary>Finds the maximum element value along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to find the maximum.</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Mean">
            <summary>Computes the mean over the array.</summary>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Median">
            <summary>Computes the median over the array.</summary>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Var">
            <summary>Computes the variance (normalized by N-1) over the array.</summary>
        </member>
        <member name="M:ShoNS.Array.FloatArray.VarN">
            <summary>Computes the variance (normalized by N) over the array.</summary>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Std">
            <summary>Computes the standard deviation over the array.</summary>
        </member>
        <member name="M:ShoNS.Array.FloatArray.SumNaN">
            <summary>Computes the sum over the array, ignoring NaN values.</summary>
        </member>
        <member name="M:ShoNS.Array.FloatArray.MeanNaN">
            <summary>Computes the mean over the array, ignoring NaN values.</summary>
        </member>
        <member name="M:ShoNS.Array.FloatArray.VarNaN">
            <summary>Computes the variance (normalized by N-1) over the array, ignoring NaN values.</summary>
        </member>
        <member name="M:ShoNS.Array.FloatArray.VarNNaN">
            <summary>Computes the variance (normalized by N) over the array, ignoring NaN values.</summary>
        </member>
        <member name="M:ShoNS.Array.FloatArray.StdNaN">
            <summary>Computes the standard deviation over the array, ignoring NaN values.</summary>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Det">
            <summary>Computes the determinant, for square matrics only.</summary>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Inv">
            <summary>Computes the array inverse, for square arrays only.</summary>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Mean(System.Int32)">
            <summary>Computes the mean over the given dimension.</summary>
            <param name="dim">Dimension over which to compute the mean.</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Median(System.Int32)">
            <summary>Computes the median over the given dimension.</summary>
            <param name="dim">Dimension over which to compute the median.</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Var(System.Int32)">
            <summary>Computes the variance, normalized by N-1, over the given dimension.</summary>
            <param name="dim">Dimension over which to compute the variance.</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.VarN(System.Int32)">
            <summary>Computes the variance, normalized by N, over the given dimension.</summary>
            <param name="dim">Dimension over which to compute the variance.</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Std(System.Int32)">
            <summary>Computes the standard deviation over the given dimension.</summary>
            <param name="dim">Dimension over which to compute the standard deviation.</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Mean(ShoNS.Array.DimOp)">
            <summary>Computes the mean along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the mean.</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Median(ShoNS.Array.DimOp)">
            <summary>Computes the median along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the median.</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Var(ShoNS.Array.DimOp)">
            <summary>Computes the variance, normalized by N-1, along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the variance.</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.VarN(ShoNS.Array.DimOp)">
            <summary>Computes the variance, normalized by N, along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the variance.</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Std(ShoNS.Array.DimOp)">
            <summary>Computes the standard deviation long the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the standard deviation.</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.SumNaN(ShoNS.Array.DimOp)">
            <summary>Computes the sum along the given dimension, ignoring NaN values.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the mean.</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.MeanNaN(ShoNS.Array.DimOp)">
            <summary>Computes the mean along the given dimension, ignoring NaN values.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the mean.</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.VarNaN(ShoNS.Array.DimOp)">
            <summary>Computes the variance, normalized by N-1, along the given dimension, ignoring NaN values.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the variance.</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.VarNNaN(ShoNS.Array.DimOp)">
            <summary>Computes the variance, normalized by N, along the given dimension, ignoring NaN values.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the variance.</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.StdNaN(ShoNS.Array.DimOp)">
            <summary>Computes the standard deviation long the given dimension, ignoring NaN values.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the standard deviation.</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Add(ShoNS.Array.FloatArray)">
            <summary>Adds two arrays.</summary>
            <param name="array">Other array</param>        
        </member>
        <member name="M:ShoNS.Array.FloatArray.Add(System.Single)">
            <summary>Adds a value to each element of the array.</summary>
            <param name="value">Value to add</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Add(ShoNS.Array.DoubleArray)">
            <summary>Adds two arrays.</summary>
            <param name="array">Other array</param>        
        </member>
        <member name="M:ShoNS.Array.FloatArray.Add(ShoNS.Array.IntArray)">
            <summary>Adds two arrays.</summary>
            <param name="array">Other array</param>        
        </member>
        <member name="M:ShoNS.Array.FloatArray.Add(System.Double)">
            <summary>Adds a value to each element of the array.</summary>
            <param name="value">Value to add</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Add(System.Int32)">
            <summary>Adds a value to each element of the array.</summary>
            <param name="value">Value to add</param>     
        </member>
        <member name="M:ShoNS.Array.FloatArray.Subtract(ShoNS.Array.FloatArray)">
            <summary>Subtracts two arrays.</summary>
            <param name="array">Other array</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Subtract(System.Single)">
            <summary>Subtracts a value from each element of the array.</summary>
            <param name="value">Value to subtract</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.RSubtract(System.Single)">
            <summary>From a value, subtracts each value of the array.</summary>
            <param name="value">Value from which to subtract</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Subtract(ShoNS.Array.DoubleArray)">
            <summary>Subtracts two arrays.</summary>
            <param name="array">Other array</param>        
        </member>
        <member name="M:ShoNS.Array.FloatArray.Subtract(ShoNS.Array.IntArray)">
            <summary>Subtracts two arrays.</summary>
            <param name="array">Other array</param>        
        </member>
        <member name="M:ShoNS.Array.FloatArray.Subtract(System.Double)">
            <summary>Subtracts a value from each element of the array.</summary>
            <param name="value">Value to subtract</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Subtract(System.Int32)">
            <summary>Subtracts a value from each element of the array.</summary>
            <param name="value">Value to subtract</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.RSubtract(System.Double)">
            <summary>From a value, subtracts each value of the array.</summary>
            <param name="value">Value from which to subtract</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.RSubtract(System.Int32)">
            <summary>From a value, subtracts each value of the array.</summary>
            <param name="value">Value from which to subtract</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Multiply(ShoNS.Array.FloatArray)">
            <summary>Matrix multiply of this array by another.</summary>
            <param name="otherMatrix">The other matrix.</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Multiply(System.Single)">
            <summary>Multiplies each element of the array by a value.</summary>
            <param name="value">Value to multiply</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Multiply(ShoNS.Array.IntArray)">
            <summary>Matrix multiply of this array by another.</summary>
            <param name="otherMatrix">The other matrix.</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Multiply(ShoNS.Array.DoubleArray)">
            <summary>Matrix multiply of this array by another.</summary>
            <param name="otherMatrix">The other matrix.</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Multiply(System.Double)">
            <summary>Multiplies each element of the array by a value.</summary>
            <param name="value">Value to multiply</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Multiply(System.Int32)">
            <summary>Multiplies each element of the array by a value.</summary>
            <param name="value">Value to multiply</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Divide(System.Single)">
            <summary>Divides each element of the array by a value.</summary>
            <param name="value">Value to divide</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.RDivide(System.Single)">
             <summary>From a value, divides each element of the array.</summary>
            <param name="value">Value from which to divide</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Divide(System.Double)">
            <summary>Divides each element of the array by a value.</summary>
            <param name="value">Value to divide</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Divide(System.Int32)">
            <summary>Divides each element of the array by a value.</summary>
            <param name="value">Value to divide</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.RDivide(System.Double)">
             <summary>From a value, divides each element of the array.</summary>
            <param name="value">Value from which to divide</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.RDivide(System.Int32)">
             <summary>From a value, divides each element of the array.</summary>
            <param name="value">Value from which to divide</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.op_Addition(ShoNS.Array.FloatArray,ShoNS.Array.FloatArray)">
            <summary>Adds two arrays.</summary>
            <param name="arrayLeft" type="FloatArray">Array on the left side.</param>
            <param name="arrayRight" type="FloatArray">Array on the right side.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.op_Addition(ShoNS.Array.FloatArray,ShoNS.Array.IntArray)">
            <summary>Adds two arrays.</summary>
            <param name="arrayLeft" type="FloatArray">Array on the left side.</param>
            <param name="arrayRight" type="IntArray">Array on the right side.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.op_Addition(ShoNS.Array.IntArray,ShoNS.Array.FloatArray)">
            <summary>Adds two arrays.</summary>
            <param name="arrayLeft" type="IntArray">Array on the left side.</param>
            <param name="arrayRight" type="FloatArray">Array on the right side.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.op_Addition(ShoNS.Array.FloatArray,ShoNS.Array.SparseDoubleArray)">
            <summary>Adds two arrays.</summary>
            <param name="arrayLeft" type="FloatArray">Array on the left side.</param>
            <param name="arrayRight" type="SparseDoubleArray">Sparse array on the right side.</param>
            <returns>A dense DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.op_Addition(ShoNS.Array.FloatArray,ShoNS.Array.SparseFloatArray)">
            <summary>Adds two arrays.</summary>
            <param name="arrayLeft" type="FloatArray">Array on the left side.</param>
            <param name="arrayRight" type="SparseFloatArray">Sparse array on the right side.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.op_Addition(ShoNS.Array.FloatArray,ShoNS.Array.SparseIntArray)">
            <summary>Adds two arrays.</summary>
            <param name="arrayLeft" type="FloatArray">Array on the left side.</param>
            <param name="arrayRight" type="SparseIntArray">Sparse array on the right side.</param>
            <returns>A dense FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.op_Addition(ShoNS.Array.FloatArray,System.Single)">
            <summary>Adds a value to each element of an array.</summary>
            <param name="array" type="FloatArray">The array to which to add the value.</param>
            <param name="value" type="float">The value to add.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.op_Addition(ShoNS.Array.FloatArray,System.Int32)">
            <summary>Adds a value to each element of an array.</summary>
            <param name="array" type="FloatArray">The array to which to add the value.</param>
            <param name="value" type="int">The value to add.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.op_Addition(ShoNS.Array.FloatArray,System.Double)">
            <summary>Adds a value to each element of an array.</summary>
            <param name="array" type="FloatArray">The array to which to add the value.</param>
            <param name="value" type="double">The value to add.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.op_Addition(System.Single,ShoNS.Array.FloatArray)">
            <summary>Adds a value to each element of an array.</summary>
            <param name="value" type="float">The value to add.</param>
            <param name="array" type="FloatArray">The array to which to add the value.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.op_Addition(System.Int32,ShoNS.Array.FloatArray)">
            <summary>Adds a value to each element of an array.</summary>
            <param name="value" type="int">The value to add.</param>
            <param name="array" type="FloatArray">The array to which to add the value.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.op_Addition(System.Double,ShoNS.Array.FloatArray)">
            <summary>Adds a value to each element of an array.</summary>
            <param name="value" type="double">The value to add.</param>
            <param name="array" type="FloatArray">The array to which to add the value.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.op_Subtraction(ShoNS.Array.FloatArray,ShoNS.Array.FloatArray)">
            <summary>Subtracts two arrays.</summary>
            <param name="arrayLeft" type="FloatArray">Array on the left side.</param>
            <param name="arrayRight" type="FloatArray">Array on the right side.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.op_Subtraction(ShoNS.Array.FloatArray,ShoNS.Array.IntArray)">
            <summary>Subtracts two arrays.</summary>
            <param name="arrayLeft" type="FloatArray">Array on the left side.</param>
            <param name="arrayRight" type="IntArray">Array on the right side.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.op_Subtraction(ShoNS.Array.IntArray,ShoNS.Array.FloatArray)">
            <summary>Subtracts two arrays.</summary>
            <param name="arrayLeft" type="IntArray">Array on the left side.</param>
            <param name="arrayRight" type="FloatArray">Array on the right side.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.op_Subtraction(ShoNS.Array.FloatArray,ShoNS.Array.SparseDoubleArray)">
            <summary>Subtracts two arrays.</summary>
            <param name="arrayLeft" type="FloatArray">Array on the left side.</param>
            <param name="arrayRight" type="SparseDoubleArray">Array on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.op_Subtraction(ShoNS.Array.FloatArray,ShoNS.Array.SparseFloatArray)">
            <summary>Subtracts two arrays.</summary>
            <param name="arrayLeft" type="FloatArray">Array on the left side.</param>
            <param name="arrayRight" type="SparseFloatArray">Array on the right side.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.op_Subtraction(ShoNS.Array.FloatArray,ShoNS.Array.SparseIntArray)">
            <summary>Subtracts two arrays.</summary>
            <param name="arrayLeft" type="FloatArray">Array on the left side.</param>
            <param name="arrayRight" type="SparseIntArray">Array on the right side.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.op_Subtraction(ShoNS.Array.FloatArray,System.Single)">
            <summary>Subtracts a value from each element of an array.</summary>
            <param name="array" type="FloatArray">Array on the left side.</param>
            <param name="value" type="float">The value to subtract.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.op_Subtraction(ShoNS.Array.FloatArray,System.Int32)">
            <summary>Subtracts a value from each element of an array.</summary>
            <param name="array" type="FloatArray">Array on the left side.</param>
            <param name="value" type="int">The value to subtract.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.op_Subtraction(ShoNS.Array.FloatArray,System.Double)">
            <summary>Subtracts a value from each element of an array.</summary>
            <param name="array" type="FloatArray">Array on the left side.</param>
            <param name="value" type="double">The value to subtract.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.op_Subtraction(System.Single,ShoNS.Array.FloatArray)">
            <summary>From a value, subtracts each element of an array.</summary>
            <param name="value" type="float">The value to subtract.</param>
            <param name="array" type="FloatArray">Array on the right side.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.op_Subtraction(System.Int32,ShoNS.Array.FloatArray)">
            <summary>From a value, subtracts each element of an array.</summary>
            <param name="value" type="int">The value to subtract.</param>
            <param name="array" type="FloatArray">Array on the right side.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.op_Subtraction(System.Double,ShoNS.Array.FloatArray)">
            <summary>From a value, subtracts each element of an array.</summary>
            <param name="value" type="double">The value to subtract.</param>
            <param name="array" type="FloatArray">Array on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.op_Multiply(ShoNS.Array.FloatArray,ShoNS.Array.FloatArray)">
            <summary>Multiplies two arrays.</summary>
            <param name="arrayLeft" type="FloatArray">Array on the left side.</param>
            <param name="arrayRight" type="FloatArray">Array on the right side.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.op_Multiply(ShoNS.Array.FloatArray,ShoNS.Array.IntArray)">
            <summary>Multiplies two arrays.</summary>
            <param name="arrayLeft" type="FloatArray">Array on the left side.</param>
            <param name="arrayRight" type="IntArray">Array on the right side.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.op_Multiply(ShoNS.Array.IntArray,ShoNS.Array.FloatArray)">
            <summary>Multiplies two arrays.</summary>
            <param name="arrayLeft" type="IntArray">Array on the left side.</param>
            <param name="arrayRight" type="FloatArray">Array on the right side.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.op_Multiply(ShoNS.Array.FloatArray,ShoNS.Array.SparseDoubleArray)">
            <summary>Multiplies two arrays.</summary>
            <param name="matrixLeft" type="FloatArray">Matrix on the left side.</param>
            <param name="matrixRight" type="SparseDoubleArray">Sparse array on the right side.</param>
            <returns>A dense DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.op_Multiply(ShoNS.Array.FloatArray,ShoNS.Array.SparseFloatArray)">
            <summary>Multiplies two arrays.</summary>
            <param name="matrixLeft" type="FloatArray">Matrix on the left side.</param>
            <param name="matrixRight" type="SparseFloatArray">Sparse array on the right side.</param>
            <returns>A dense FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.op_Multiply(ShoNS.Array.FloatArray,ShoNS.Array.SparseIntArray)">
            <summary>Multiplies two arrays.</summary>
            <param name="matrixLeft" type="FloatArray">Matrix on the left side.</param>
            <param name="matrixRight" type="SparseIntArray">Sparse array on the right side.</param>
            <returns>A dense FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.op_Multiply(ShoNS.Array.FloatArray,System.Single)">
            <summary>Multiplies each element of an array by a value.</summary>
            <param name="array" type="FloatArray">Array on the left side.</param>
            <param name="value" type="float">The value to multiply.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.op_Multiply(ShoNS.Array.FloatArray,System.Int32)">
            <summary>Multiplies each element of an array by a value.</summary>
            <param name="array" type="FloatArray">Array on the left side.</param>
            <param name="value" type="int">The value to multiply.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.op_Multiply(ShoNS.Array.FloatArray,System.Double)">
            <summary>Multiplies each element of an array by a value.</summary>
            <param name="array" type="FloatArray">Array on the left side.</param>
            <param name="value" type="double">The value to multiply.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.op_Multiply(System.Single,ShoNS.Array.FloatArray)">
            <summary>Multiplies each element of an array by a value.</summary>
            <param name="value" type="float">The value to multiply.</param>
            <param name="array" type="FloatArray">Array on the right side.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.op_Multiply(System.Int32,ShoNS.Array.FloatArray)">
            <summary>Multiplies each element of an array by a value.</summary>
            <param name="value" type="int">The value to multiply.</param>
            <param name="array" type="FloatArray">Array on the right side.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.op_Multiply(System.Double,ShoNS.Array.FloatArray)">
            <summary>Multiplies each element of an array by a value.</summary>
            <param name="value" type="double">The value to multiply.</param>
            <param name="array" type="FloatArray">Array on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.MultiplyAccum(System.Single,ShoNS.Array.FloatArray)">
            <summary>array += alpha*b</summary>
            <param name="alpha" type="float">The value to multiply.</param>
            <param name="arrayRight" type="FloatArray">Array on the right side.</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.MultiplyInto(ShoNS.Array.FloatArray,ShoNS.Array.FloatArray)">
            <summary>Multiplies a and b and stores the results in this FloatArray.</summary>
            <param name="arrayLeft" type="FloatArray">Array on the left side.</param>
            <param name="arrayRight" type="FloatArray">Array on the right side.</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.MultiplyInto(System.Single,ShoNS.Array.FloatArray,System.Boolean,ShoNS.Array.FloatArray,System.Boolean,System.Single)">
            <summary>Performs this = alpha*op(arrayLeft)*op(arrayRight) + beta*this, storing the results in this FloatArray.</summary>
            <param name="alpha" type="float">Scalar</param>
            <param name="arrayLeft" type="FloatArray">Array to the left.</param>
            <param name="transLeft" type="bool">If true, op(arrayLeft) = arrayLeft.T. If false, op(arrayLeft) = arrayLeft</param>
            <param name="arrayRight" type="FloatArray">Array to the right.</param>
            <param name="transRight" type="bool">If true, op(arrayRight) = arrayRight.T. If false, op(arrayRight) = arrayRight</param>
            <param name="beta" type="float">Scalar used to multiply this array</param>
        </member>
        <member name="M:ShoNS.Array.FloatArray.MultiplyTranspose(System.Boolean)">
            <summary>Multiplies the array by its transpose or vice versa: A'*A or A*A'.</summary>
            <param name="transFirst" type="bool">If true, the transpose is on the left side; else it's on the right.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.ElementMultiply(ShoNS.Array.FloatArray)">
            <summary>Multiplies the elements of two arrays.</summary>
            <param name="otherArray" type="FloatArray">Array on the right side.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.ElementMultiply(ShoNS.Array.DoubleArray)">
            <summary>Multiplies the elements of two arrays.</summary>
            <param name="otherArray" type="DoubleArray">Array on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.ElementMultiply(ShoNS.Array.IntArray)">
            <summary>Multiplies the elements of two arrays.</summary>
            <param name="otherArray" type="IntArray">Array on the right side.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.ElementMultiply(ShoNS.Array.ComplexArray)">
            <summary>Multiplies the elements of two arrays.</summary>
            <param name="otherArray" type="ComplexArray">Array to the right.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.ElementMultiply(ShoNS.Array.SparseDoubleArray)">
            <summary>Multiplies the elements of two arrays.</summary>
            <param name="otherArray" type="SparseDoubleArray">Sparse array on the right side.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.ElementMultiply(ShoNS.Array.SparseFloatArray)">
            <summary>Multiplies the elements of two arrays.</summary>
            <param name="otherArray" type="SparseFloatArray">Sparse array on the right side.</param>
            <returns>A SparseFloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.ElementMultiply(ShoNS.Array.SparseIntArray)">
            <summary>Multiplies the elements of two arrays.</summary>
            <param name="otherArray" type="SparseIntArray">Sparse array on the right side.</param>
            <returns>A SparseFloatArrayy</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.op_Division(ShoNS.Array.FloatArray,System.Single)">
            <summary>Divides the elements of an array by a value.</summary>
            <param name="array" type="SparseIntArray">Array on the left side.</param>
            <param name="value" type="float">Value to divide.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.op_Division(ShoNS.Array.FloatArray,System.Int32)">
            <summary>Divides the elements of an array by a value.</summary>
            <param name="array" type="FloatArray">Array on the left side.</param>
            <param name="value" type="int">Value to divide.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.op_Division(ShoNS.Array.FloatArray,System.Double)">
            <summary>Divides the elements of an array by a value.</summary>
            <param name="array" type="FloatArray">Array on the left side.</param>
            <param name="value" type="double">Value to divide.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.op_Division(System.Single,ShoNS.Array.FloatArray)">
            <summary>Divides a value by the elements of an array.</summary>
            <param name="value" type="float">Value to divide.</param>
            <param name="array" type="FloatArray">Array on the right side.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.op_Division(System.Int32,ShoNS.Array.FloatArray)">
            <summary>Divides a value by the elements of an array.</summary>
            <param name="value" type="int">Value to divide.</param>
            <param name="array" type="FloatArray">Array on the right side.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.op_Division(System.Double,ShoNS.Array.FloatArray)">
            <summary>Divides a value by the elements of an array.</summary>
            <param name="value" type="double">Value to divide.</param>
            <param name="array" type="FloatArray">Array on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.ElementDivide(ShoNS.Array.FloatArray)">
            <summary>Divides the elements of two arrays.</summary>
            <param name="otherArray" type="FloatArray">Array on the right side.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.ElementDivide(ShoNS.Array.DoubleArray)">
            <summary>Divides the elements of two arrays.</summary>
            <param name="otherArray" type="DoubleArray">Array on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.ElementDivide(ShoNS.Array.IntArray)">
            <summary>Divides the elements of two arrays.</summary>
            <param name="otherArray" type="IntArray">Array on the right side.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.ElementDivide(ShoNS.Array.ComplexArray)">
            <summary>Divides the elements of two arrays.</summary>
            <param name="otherArray" type="ComplexArray">Array on the right.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.ElementDivide(ShoNS.Array.SparseDoubleArray)">
            <summary>Divides the elements of two arrays.</summary>
            <param name="otherArray" type="SparseDoubleArray">Sparse array on the right side.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.ElementDivide(ShoNS.Array.SparseFloatArray)">
            <summary>Divides the elements of two arrays.</summary>
            <param name="otherArray" type="SparseFloatArray">Sparse array on the right side.</param>
            <returns>A SparseFloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.ElementDivide(ShoNS.Array.SparseIntArray)">
            <summary>Divides the elements of two array.s</summary>
            <param name="otherArray" type="SparseIntArray">Sparse array on the right side.</param>
            <returns>A SparseFloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.op_UnaryNegation(ShoNS.Array.FloatArray)">
            <summary>Negates each element of the array.</summary>
            <param name="array">Array to negate</param>        
        </member>
        <member name="M:ShoNS.Array.FloatArray.Negate">
            <summary>Negates each element of the array.</summary>      
        </member>
        <member name="M:ShoNS.Array.FloatArray.AddBroadcast(ShoNS.Array.FloatArray)">
            <summary>Adds the elements of two arrays, broadcasting the arrays if needed.</summary>
            <param name="otherArray" type="FloatArray">Array on the right side.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.SubtractBroadcast(ShoNS.Array.FloatArray)">
            <summary>Subtracts the elements of two arrays, broadcasting the arrays if needed.</summary>
            <param name="otherArray" type="FloatArray">Array on the right side.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.ElementMultiplyBroadcast(ShoNS.Array.FloatArray)">
            <summary>Multiplies the elements of two arrays, broadcasting the arrays if needed.</summary>
            <param name="otherArray" type="FloatArray">Array on the right side.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.ElementDivideBroadcast(ShoNS.Array.FloatArray)">
            <summary>Divides the elements of two arrays, broadcasting the arrays if needed.</summary>
            <param name="otherArray" type="FloatArray">Array on the right side.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Sort">
            <summary>Sorts the array in ascending order.</summary>
            <returns>A vector containing the sorted values.</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.SortDesc">
            <summary>Sorts the array in descending order.</summary>
            <returns>A vector containing the sorted values.</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.SortIndex(ShoNS.Array.IntArray@)">
            <summary>Sorts the array in ascending order, returning the indices into the original array in sorted order.</summary>
            <param name="indexArray">The indices into the original array, an out parameter.</param>
            <returns>A vector containing the sorted values and an IntArray containing the indices into the original array.</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.SortDescIndex(ShoNS.Array.IntArray@)">
            <summary>Sorts the array in descending order, returning the indices into the original array in sorted order.</summary>
            <param name="indexArray">The indices into the original array, an out parameter.</param>
            <returns>A vector containing the sorted values and an IntArray containing the indices into the original array.</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Sort(System.Int32)">
            <summary>Sorts the array in ascending order over the given dimension.</summary>
            <param name="dim">The dimension to sort.</param>
            <returns>An array containing the sorted values.</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.SortDesc(System.Int32)">
            <summary>Sorts the array in descending over along the given dimension.</summary>
            <param name="dim">The dimension to sort.</param>
            <returns>An array containing the sorted values.</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.SortIndex(System.Int32,ShoNS.Array.IntArray@)">
            <summary>Sorts the array in ascending order, over the given dimension, returning the indices into the original array in sorted order.</summary>
            <param name="dim">The dimension to sort.</param>
            <param name="indexArray">The indices into the original array, an out parameter.</param>
            <returns>An array of sorted values and an IntArray containing the indices into the original array.</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.SortDescIndex(System.Int32,ShoNS.Array.IntArray@)">
            <summary>Sorts the array in descending order, over the given dimension, returning the indices into the original array in sorted order.</summary>
            <param name="dim">The dimension to sort.</param>
            <param name="indexArray">The indices into the original array, an out parameter.</param>
            <returns>An array of sorted values and an IntArray containing the indices into the original array.</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.Sort(ShoNS.Array.DimOp)">
            <summary>Sorts the array in ascending order along the given dimension.</summary>
            <param name="dim" type="DimOp">The dimension to sort.</param>
            <returns>An array containing the sorted values.</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.SortDesc(ShoNS.Array.DimOp)">
            <summary>Sorts the array in descending order along the given dimension.</summary>
            <param name="dim" type="DimOp">The dimension to sort.</param>
            <returns>An array containing the sorted values.</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.SortIndex(ShoNS.Array.DimOp,ShoNS.Array.IntArray@)">
            <summary>Sorts the array in ascending order, along the given dimension, returning the indices into the original array in sorted order.</summary>
            <param name="dim" type="DimOp">The dimension to sort.</param>
            <param name="indexArray">The indices into the original array, an out parameter.</param>
            <returns>An array of sorted values and an IntArray containing the indices into the original array.</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.SortDescIndex(ShoNS.Array.DimOp,ShoNS.Array.IntArray@)">
            <summary>Sorts the array in descending order, along the given dimension, returning the indices into the original array in sorted order.</summary>
            <param name="dim" type="DimOp">The dimension to sort.</param>
            <param name="indexArray">The indices into the original array, an out parameter.</param>
            <returns>An array of sorted values and an IntArray containing the indices into the original array.</returns>
        </member>
        <member name="M:ShoNS.Array.FloatArray.VertStack(System.Collections.IEnumerable[])">
            <summary>Stacks the inputs vertically.</summary>
            <param name="items">Items to stack</param>        
        </member>
        <member name="M:ShoNS.Array.FloatArray.HorizStack(System.Collections.IEnumerable[])">
            <summary>Stacks the inputs horizontally.</summary>
            <param name="items">Items to stack</param>       
        </member>
        <member name="P:ShoNS.Array.FloatArray.Rows">
            <summary>Returns an IEnumerable object that can be used to iterate over the rows of the array.</summary>
        </member>
        <member name="P:ShoNS.Array.FloatArray.Cols">
            <summary>Returns an IEnumerable object that can be used to iterate over the columns of the array.</summary>
        </member>
        <member name="P:ShoNS.Array.FloatArray.T">
            <summary>Transposes the 1st and 2nd dimensions of the array, making a shallow copy.</summary>
            <returns>Returns a shallow copy of transposed array.</returns>
        </member>
        <member name="P:ShoNS.Array.FloatArray.Diagonal">
            <summary>Returns the main diagonal of the array as a vectory or sets the main diagonal to the inputObject vector.</summary>
        </member>
        <member name="T:ShoNS.Array.IntArray">
            <summary>This class implements functionality for an array with integer elements.</summary>
        </member>
        <member name="M:ShoNS.Array.IntArray.Zeros(System.Int32)">
            <summary>Creates an IntArray of the given length, filled with zeros.</summary>
            <param name="length">Vector length</param>
        </member>
        <member name="M:ShoNS.Array.IntArray.Zeros(System.Int32,System.Int32)">
            <summary>Creates an IntArray of size0 x size1, filled with zeros.</summary>
            <param name="size0">Number of rows</param>
            <param name="size1">Number of columns</param>             
        </member>
        <member name="M:ShoNS.Array.IntArray.Zeros(System.Int32[])">
             <summary>Creates a multidimensional IntArray of the given size, filled with zeros.</summary>
            <param name="sizes">Sizes</param>        
        </member>
        <member name="M:ShoNS.Array.IntArray.Ones(System.Int32)">
            <summary>Creates an IntArray of the given length, filled with ones.</summary>
            <param name="length">Vector length</param>        
        </member>
        <member name="M:ShoNS.Array.IntArray.Ones(System.Int32,System.Int32)">
            <summary>Creates an IntArray of size0 x size1, filled with ones.</summary>
            <param name="size0">Number of rows</param>
            <param name="size1">Number of columns</param>             
        </member>
        <member name="M:ShoNS.Array.IntArray.Ones(System.Int32[])">
             <summary>Creates a multidimensional IntArray of the given size, filled with ones.</summary>
            <param name="sizes">Sizes</param>        
        </member>
        <member name="M:ShoNS.Array.IntArray.Id(System.Int32,System.Int32)">
            <summary>Creates the size0 x size1 identity IntArray.</summary>
            <param name="size0">Number of rows</param>
            <param name="size1">Number of columns</param>        
        </member>
        <member name="M:ShoNS.Array.IntArray.FromFile(System.String)">
            <summary>Creates an array from a file, using binary serialization.</summary>
            <param name="fileName" type="String">Name of file from which to create the array.</param>    
        </member>
        <member name="M:ShoNS.Array.IntArray.FromStream(System.IO.Stream)">
            <summary>Creates an array from a stream, using binary serialization.</summary>
            <param name="stream" type="System.IO.Stream">Stream from which to create the array.</param>  
        </member>
        <member name="M:ShoNS.Array.IntArray.From(ShoNS.Array.NumArrayBase{System.Int32})">
            <summary>Creates an array (deep copy) from another array.</summary>
            <param name="input">Array to copy</param>        
        </member>
        <member name="M:ShoNS.Array.IntArray.From(ShoNS.Array.NumArrayBase{System.Single})">
            <summary>Creates an array (deep copy) from another array.</summary>
            <param name="input">Array to copy</param>       
        </member>
        <member name="M:ShoNS.Array.IntArray.From(ShoNS.Array.NumArrayBase{System.Double})">
            <summary>Creates an array (deep copy) from another array.</summary>
            <param name="input">Array to copy</param>        
        </member>
        <member name="M:ShoNS.Array.IntArray.FromShallow(ShoNS.Array.NumArrayBase{System.Int32})">
            <summary>Creates an array (shallow copy) from another array.</summary>
            <param name="input">Array to copy</param>
        </member>
        <member name="M:ShoNS.Array.IntArray.From(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>Creates a deep copy from an IEnumerable object.</summary>
            <param name="input">Enumerable to copy</param>         
        </member>
        <member name="M:ShoNS.Array.IntArray.From(System.Collections.IEnumerable)">
            <summary>Creates a deep copy from an IEnumerable object.</summary>
            <param name="input">Enumerable to copy</param>         
        </member>
        <member name="M:ShoNS.Array.IntArray.#ctor(System.Int32)">
            <summary>Creates an IntArray of the given length, filled with zeros.</summary>
            <param name="length">Length of vector</param>        
        </member>
        <member name="M:ShoNS.Array.IntArray.#ctor(System.Int32,System.Int32)">
            <summary>Creates an IntArray of size0 x size1, filled with zeros.</summary>
            <param name="size0">Number of rows</param>
            <param name="size1">Number columns</param>          
        </member>
        <member name="M:ShoNS.Array.IntArray.#ctor(System.Int32[])">
            <summary>Creates a multidimensional IntArray of the given size, filled with zeros.</summary>
            <param name="sizes">Sizes</param>
        </member>
        <member name="M:ShoNS.Array.IntArray.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization.</summary>
        </member>
        <member name="M:ShoNS.Array.IntArray.Squeeze">
            <summary>Squeezes out the size 1 dimensions (shallowly).</summary>
        </member>
        <member name="M:ShoNS.Array.IntArray.AlongDim(System.Int32)">
            <summary>Returns an IEnumerable object that can be used to iterate along a dimension of an array.</summary>
            <param name="dim">Along which dimension</param>        
        </member>
        <member name="M:ShoNS.Array.IntArray.RowElements(System.Int32)">
            <summary>Returns an IEnumerable object that can be used to iterate over the elements of a given row.</summary>
            <param name="rowIndex" type="int">The index of the row to return.</param>
        </member>
        <member name="M:ShoNS.Array.IntArray.ColumnElements(System.Int32)">
            <summary>Returns an IEnumerable object that can be used to iterate over the elements of a given column.</summary>
            <param name="colIndex" type="int">The index of the row to return.</param>
        </member>
        <member name="M:ShoNS.Array.IntArray.TransposeDeep">
            <summary>Transposes the 1st and 2nd dimensions of the array, making a deep copy.</summary>
            <returns>Returns a deep copy of transposed array.</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.Transpose">
            <summary>Transposes the 1st and 2nd dimensions of the array, making a shallow copy.</summary>
            <returns>Returns a shallow copy of transposed array.</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.CopyDeep">
            <summary>Makes a deep copy of the array; the new array has its own storage.</summary>
            <returns>Returns a deep copy the array.</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.CopyShallow">
            <summary>Makes a shallow copy of the array; the new array shares its storage with the original array.</summary>
            <returns>Returns a shallow copy the array.</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.CopyTo(ShoNS.Array.IntArray)">
            <summary>Copies the contents of this array to the specified array.</summary>
            <param name="destArray">Destination array</param>             
        </member>
        <member name="M:ShoNS.Array.IntArray.ToVector">
            <summary>Makes a vector, copying the elements in row-column order.</summary>
        </member>
        <member name="M:ShoNS.Array.IntArray.GetSlice(System.Int32,System.Int32)">
            <summary>Creates a subarray (shallow copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndex" type="int">Maximum index (inclusive) in the slice.</param>  
        </member>
        <member name="M:ShoNS.Array.IntArray.GetSliceDeep(System.Int32,System.Int32)">
            <summary>Creates a subarray (deep copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndex" type="int">Maximum index (inclusive) in the slice.</param>  
        </member>
        <member name="M:ShoNS.Array.IntArray.GetSlice(System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (shallow copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndex" type="int">Maximum index (inclusive) in the slice.</param>  
            <param name="step">Step</param>
        </member>
        <member name="M:ShoNS.Array.IntArray.GetSliceDeep(System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (deep copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndex" type="int">Maximum index (inclusive) in the slice.</param>  
            <param name="step">Step</param>
        </member>
        <member name="M:ShoNS.Array.IntArray.GetRow(System.Int32)">
            <summary>Get a shallow copy of a row.</summary>
            <param name="rowIndex" type="int">Row to retrieve</param>  
            <remarks>This method is a shortcut for calling GetSlice(iRow,iRow,0,size1-1)</remarks>
        </member>
        <member name="M:ShoNS.Array.IntArray.GetCol(System.Int32)">
            <summary>Get a shallow copy of a column.</summary>
            <param name="colIndex" type="int">Column to retrieve</param>  
            <remarks>This method is a shortcut for calling GetSlice(0,size0-1,colIndex,colIndex)</remarks>
        </member>
        <member name="M:ShoNS.Array.IntArray.GetSlice(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (shallow copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRow" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastCol" type="int">Maximum column number (inclusive) in the slice.</param>          
        </member>
        <member name="M:ShoNS.Array.IntArray.GetSliceDeep(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (deep copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRow" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastCol" type="int">Maximum column number (inclusive) in the slice.</param>          
        </member>
        <member name="M:ShoNS.Array.IntArray.GetSliceDeep(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (deep copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRow" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="stepRow" type="int">Row step size.</param> 
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastCol" type="int">Maximum column number (inclusive) in the slice.</param>          
            <param name="stepCol" type="int">Column step size.</param> 
        </member>
        <member name="M:ShoNS.Array.IntArray.GetSlice(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (shallow copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRow" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="stepRow" type="int">Row step size.</param> 
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastCol" type="int">Maximum column number (inclusive) in the slice.</param>          
            <param name="stepCol" type="int">Column step size.</param> 
        </member>
        <member name="M:ShoNS.Array.IntArray.GetSliceDeep(ShoNS.Array.Slice[])">
            <summary>Creates a subarray (deep copy). If your slice contains a list of indices, you must call this method.</summary>
            <param name="slices">Slices to get</param>        
        </member>
        <member name="M:ShoNS.Array.IntArray.GetSlice(ShoNS.Array.Slice[])">
            <summary>Creates a subarray (shallow copy). If your slice contains a list of indices, call GetSliceDeep instead.</summary>
            <param name="slices">Slices to get</param>        
        </member>
        <member name="M:ShoNS.Array.IntArray.GetArrayEntries(System.Collections.Generic.IEnumerable{ShoNS.Array.IArrayEntry})">
            <summary>Creates an array (deep copy) from the array entries.</summary>
            <param name="arrayEntries">Enumerable of array entries to get</param>   
        </member>
        <member name="M:ShoNS.Array.IntArray.Norm(ShoNS.Array.NormType)">
            <summary>Computes the matrix norm.</summary>
            <param name="normToCompute" type="NormType">Type of norm to compute.</param>
            <remarks>IntArray objects implement the two-norm via SVD if the inputObject is a 2D matrix.</remarks>
        </member>
        <member name="M:ShoNS.Array.IntArray.Dot(ShoNS.Array.DoubleArray)">
            <summary>Computes the vector dot product.</summary>
            <param name="otherVector" type="DoubleArray">Vector to dot.</param>
            <returns>Returns the vector dot product (double).</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.Dot(ShoNS.Array.FloatArray)">
            <summary>Computes the vector dot product.</summary>
            <param name="otherVector" type="FloatArray">Vector to dot.</param>
            <returns>Returns the vector dot product (float).</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.Dot(ShoNS.Array.IntArray)">
            <summary>Computes the vector dot product.</summary>
            <param name="otherVector" type="IntArray">Vector to dot.</param>
            <returns>Returns the vector dot product (int).</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.Dot(ShoNS.Array.SparseDoubleArray)">
            <summary>Computes the vector dot product.</summary>
            <param name="otherVector" type="SparseDoubleArray">Vector to dot.</param>
            <returns>Returns the vector dot product (double).</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.Dot(ShoNS.Array.SparseFloatArray)">
            <summary>Computes the vector dot product.</summary>
            <param name="otherVector" type="SparseFloatArray">Vector to dot.</param>
            <returns>Returns the vector dot product (float).</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.Dot(ShoNS.Array.SparseIntArray)">
            <summary>Computes the vector dot product.</summary>
            <param name="otherVector" type="SparseIntArray">Vector to dot.</param>
            <returns>Returns the vector dot product (int).</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.Sum">
            <summary>Returns the sum of all elements of the array.</summary>
        </member>
        <member name="M:ShoNS.Array.IntArray.SumLong">
            <summary>Computes the sum for the matrix, returning the result as a 64-bit integer.</summary>
            <returns>Returns the sum as a 64-bit integer. This method is meant for IntArrays for which the sum would overflow a 32-bit integer.</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.Sum(System.Int32)">
            <summary>Computes the sum over the given dimension.</summary>
            <param name="dim">Dimension over which to compute the sum.</param>
        </member>
        <member name="M:ShoNS.Array.IntArray.Min(System.Int32)">
            <summary>Finds the minimum element value over the given dimension.</summary>
            <param name="dim">Dimension over which to find the minimum.</param>
        </member>
        <member name="M:ShoNS.Array.IntArray.Max(System.Int32)">
            <summary>Finds the maximum element value over the given dimension.</summary>
            <param name="dim">Dimension over which to find the maximum.</param>
        </member>
        <member name="M:ShoNS.Array.IntArray.Sum(ShoNS.Array.DimOp)">
            <summary>Computes the sum along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the sum.</param>
        </member>
        <member name="M:ShoNS.Array.IntArray.CumSum(ShoNS.Array.DimOp)">
            <summary>Computes the cumulative sum along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the cumulative sum.</param>
        </member>
        <member name="M:ShoNS.Array.IntArray.Min(ShoNS.Array.DimOp)">
            <summary>Finds the minimum element value along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to find the minimum.</param>
        </member>
        <member name="M:ShoNS.Array.IntArray.Max(ShoNS.Array.DimOp)">
            <summary>Finds the maximum element value along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to find the maximum.</param>
        </member>
        <member name="M:ShoNS.Array.IntArray.Mean">
            <summary>Computes the mean over the array</summary>
        </member>
        <member name="M:ShoNS.Array.IntArray.Median">
            <summary>Computes the median over the array</summary>
        </member>
        <member name="M:ShoNS.Array.IntArray.Var">
            <summary>Computes the variance (normalized by N-1) over the array</summary>
        </member>
        <member name="M:ShoNS.Array.IntArray.VarN">
            <summary>Computes the variance (normalized by N) over the array</summary>
        </member>
        <member name="M:ShoNS.Array.IntArray.Std">
            <summary>Computes the standard deviation over the array</summary>
        </member>
        <member name="M:ShoNS.Array.IntArray.Det">
            <summary>Computes the determinant, for square matrics only.</summary>
        </member>
        <member name="M:ShoNS.Array.IntArray.Inv">
            <summary>Computes the matrix inverse, for square matrices only.</summary>
        </member>
        <member name="M:ShoNS.Array.IntArray.Mean(System.Int32)">
            <summary>Computes the mean over the given dimension.</summary>
            <param name="dim">Dimension over which to compute the mean.</param>
        </member>
        <member name="M:ShoNS.Array.IntArray.Median(System.Int32)">
            <summary>Computes the median over the given dimension.</summary>
            <param name="dim">Dimension over which to compute the median.</param>
        </member>
        <member name="M:ShoNS.Array.IntArray.Var(System.Int32)">
            <summary>Computes the variance, normalized by N-1, over the given dimension.</summary>
            <param name="dim">Dimension over which to compute the variance.</param>
        </member>
        <member name="M:ShoNS.Array.IntArray.VarN(System.Int32)">
            <summary>Computes the variance, normalized by N, over the given dimension.</summary>
            <param name="dim">Dimension over which to compute the variance.</param>
        </member>
        <member name="M:ShoNS.Array.IntArray.Std(System.Int32)">
            <summary>Computes the standard deviation over the given dimension.</summary>
            <param name="dim">Dimension over which to compute the standard deviation.</param>
        </member>
        <member name="M:ShoNS.Array.IntArray.Mean(ShoNS.Array.DimOp)">
            <summary>Computes the mean along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the mean.</param>
        </member>
        <member name="M:ShoNS.Array.IntArray.Median(ShoNS.Array.DimOp)">
            <summary>Computes the median along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the median.</param>
        </member>
        <member name="M:ShoNS.Array.IntArray.Var(ShoNS.Array.DimOp)">
            <summary>Computes the variance, normalized by N-1, along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the variance.</param>
        </member>
        <member name="M:ShoNS.Array.IntArray.VarN(ShoNS.Array.DimOp)">
            <summary>Computes the variance, normalized by N, along the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the variance.</param>
        </member>
        <member name="M:ShoNS.Array.IntArray.Std(ShoNS.Array.DimOp)">
            <summary>Computes the standard deviation long the given dimension.</summary>
            <param name="dim" type="DimOp">Dimension along which to compute the standard deviation.</param>
        </member>
        <member name="M:ShoNS.Array.IntArray.Add(ShoNS.Array.IntArray)">
            <summary>Adds two arrays.</summary>
            <param name="otherArray" type="IntArray">The other matrix.</param>        
        </member>
        <member name="M:ShoNS.Array.IntArray.Add(ShoNS.Array.FloatArray)">
            <summary>Adds two arrays.</summary>
            <param name="otherArray" type="FloatArray">The other matrix.</param>        
        </member>
        <member name="M:ShoNS.Array.IntArray.Add(ShoNS.Array.DoubleArray)">
            <summary>Adds two arrays.</summary>
            <param name="otherArray" type="DoubleArray">The other matrix.</param>        
        </member>
        <member name="M:ShoNS.Array.IntArray.Add(System.Int32)">
            <summary>Adds a value to each element of the array.</summary>
            <param name="value">Value to add</param>        
        </member>
        <member name="M:ShoNS.Array.IntArray.Add(System.Single)">
            <summary>Adds a value to each element of the array.</summary>
            <param name="value">Value to add</param>        
        </member>
        <member name="M:ShoNS.Array.IntArray.Add(System.Double)">
            <summary>Adds a value to each element of the array.</summary>
            <param name="value">Value to add</param>        
        </member>
        <member name="M:ShoNS.Array.IntArray.Subtract(ShoNS.Array.IntArray)">
            <summary>Subtracts two arrays.</summary>
            <param name="otherArray" type="IntArray">The other matrix.</param>        
        </member>
        <member name="M:ShoNS.Array.IntArray.Subtract(ShoNS.Array.FloatArray)">
            <summary>Subtracts two arrays.</summary>
            <param name="otherArray" type="FloatArray">The other matrix.</param>        
        </member>
        <member name="M:ShoNS.Array.IntArray.Subtract(ShoNS.Array.DoubleArray)">
            <summary>Subtracts two arrays.</summary>
            <param name="otherArray" type="DoubleArray">The other matrix.</param>        
        </member>
        <member name="M:ShoNS.Array.IntArray.Subtract(System.Int32)">
            <summary>Subtracts a value from each element of the array.</summary>
            <param name="value">Value to subtract</param>        
        </member>
        <member name="M:ShoNS.Array.IntArray.Subtract(System.Single)">
            <summary>Subtracts a value from each element of the array.</summary>
            <param name="value">Value to subtract</param>        
        </member>
        <member name="M:ShoNS.Array.IntArray.Subtract(System.Double)">
            <summary>Subtracts a value from each element of the array.</summary>
            <param name="value">Value to subtract</param>        
        </member>
        <member name="M:ShoNS.Array.IntArray.RSubtract(System.Int32)">
            <summary>From a value, subtracts each value of the array.</summary>
            <param name="value">Value from which to subtract</param> 
        </member>
        <member name="M:ShoNS.Array.IntArray.RSubtract(System.Single)">
            <summary>From a value, subtracts each value of the array.</summary>
            <param name="value">Value from which to subtract</param> 
        </member>
        <member name="M:ShoNS.Array.IntArray.RSubtract(System.Double)">
            <summary>From a value, subtracts each value of the array.</summary>
            <param name="value">Value from which to subtract</param> 
        </member>
        <member name="M:ShoNS.Array.IntArray.Multiply(ShoNS.Array.IntArray)">
            <summary>Matrix multiply of this array by another.</summary>
            <param name="otherArray" type="IntArray">The other matrix.</param>
        </member>
        <member name="M:ShoNS.Array.IntArray.Multiply(ShoNS.Array.FloatArray)">
            <summary>Matrix multiply of this array by another.</summary>
            <param name="otherArray" type="FloatArray">The other matrix.</param>
        </member>
        <member name="M:ShoNS.Array.IntArray.Multiply(ShoNS.Array.DoubleArray)">
            <summary>Matrix multiply of this array by another.</summary>
            <param name="otherArray" type="FloatArray">The other matrix.</param>
        </member>
        <member name="M:ShoNS.Array.IntArray.Multiply(System.Int32)">
            <summary>Multiplies each element of the array by a value.</summary>
            <param name="value">Value to multiply</param>        
        </member>
        <member name="M:ShoNS.Array.IntArray.Multiply(System.Single)">
            <summary>Multiplies each element of the array by a value.</summary>
            <param name="value">Value to multiply</param>        
        </member>
        <member name="M:ShoNS.Array.IntArray.Multiply(System.Double)">
            <summary>Multiplies each element of the array by a value.</summary>
            <param name="value">Value to multiply</param>        
        </member>
        <member name="M:ShoNS.Array.IntArray.Divide(System.Int32)">
            <summary>Divides each element of the array by a value.</summary>
            <param name="value">Value to divide</param>       
        </member>
        <member name="M:ShoNS.Array.IntArray.Divide(System.Single)">
            <summary>Divides each element of the array by a value.</summary>
            <param name="value">Value to divide</param>       
        </member>
        <member name="M:ShoNS.Array.IntArray.Divide(System.Double)">
            <summary>Divides each element of the array by a value.</summary>
            <param name="value">Value to divide</param>       
        </member>
        <member name="M:ShoNS.Array.IntArray.RDivide(System.Int32)">
            <summary>From a value, divides each element of the array.</summary>
            <param name="value">Value from which to divide</param>        
        </member>
        <member name="M:ShoNS.Array.IntArray.RDivide(System.Single)">
            <summary>From a value, divides each element of the array.</summary>
            <param name="value">Value from which to divide</param>      
        </member>
        <member name="M:ShoNS.Array.IntArray.RDivide(System.Double)">
            <summary>From a value, divides each element of the array.</summary>
            <param name="value">Value from which to divide</param>      
        </member>
        <member name="M:ShoNS.Array.IntArray.op_Addition(ShoNS.Array.IntArray,ShoNS.Array.IntArray)">
            <summary>Adds two arrays.</summary>
            <param name="arrayLeft" type="IntArray">Array on the left side.</param>
            <param name="arrayRight" type="IntArray">Array on the right side.</param>
            <returns>An IntArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.op_Addition(ShoNS.Array.IntArray,ShoNS.Array.SparseDoubleArray)">
            <summary>Adds two arrays.</summary>
            <param name="arrayLeft" type="IntArray">Array on the left side.</param>
            <param name="arrayRight" type="SparseDoubleArray">Sparse array on the right side.</param>
            <returns>A dense DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.op_Addition(ShoNS.Array.IntArray,ShoNS.Array.SparseFloatArray)">
            <summary>Adds two arrays.</summary>
            <param name="arrayLeft" type="IntArray">Array on the left side.</param>
            <param name="arrayRight" type="SparseFloatArray">Sparse array on the right side.</param>
            <returns>A dense FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.op_Addition(ShoNS.Array.IntArray,ShoNS.Array.SparseIntArray)">
            <summary>Adds two arrays.</summary>
            <param name="arrayLeft" type="IntArray">Array on the left side.</param>
            <param name="arrayRight" type="SparseIntArray">Sparse array on the right side.</param>
            <returns>A dense IntArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.op_Addition(ShoNS.Array.IntArray,System.Int32)">
            <summary>Adds a value to each element of an array.</summary>
            <param name="array" type="IntArray">The array to which to add the value.</param>
            <param name="value" type="int">The value to add.</param>
            <returns>An IntArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.op_Addition(ShoNS.Array.IntArray,System.Single)">
            <summary>Adds a value to each element of an array.</summary>
            <param name="array" type="IntArray">The array to which to add the value.</param>
            <param name="value" type="float">The value to add.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.op_Addition(ShoNS.Array.IntArray,System.Double)">
            <summary>Adds a value to each element of an array.</summary>
            <param name="array" type="IntArray">The array to which to add the value.</param>
            <param name="value" type="double">The value to add.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.op_Addition(System.Int32,ShoNS.Array.IntArray)">
            <summary>Adds a value to each element of an array.</summary>
            <param name="value" type="int">The value to add.</param>
            <param name="array" type="IntArray">The array to which to add the value.</param>
            <returns>An IntArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.op_Addition(System.Single,ShoNS.Array.IntArray)">
            <summary>Adds a value to each element of an array.</summary>
            <param name="value" type="float">The value to add.</param>
            <param name="array" type="IntArray">The array to which to add the value.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.op_Addition(System.Double,ShoNS.Array.IntArray)">
            <summary>Adds a value to each element of an array.</summary>
            <param name="value" type="double">The value to add.</param>
            <param name="array" type="IntArray">The array to which to add the value.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.op_Subtraction(ShoNS.Array.IntArray,ShoNS.Array.IntArray)">
            <summary>Subtracts two arrays.</summary>
            <param name="arrayLeft" type="IntArray">Array on the left side.</param>
            <param name="arrayRight" type="IntArray">Array on the right side.</param>
            <returns>An IntArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.op_Subtraction(ShoNS.Array.IntArray,ShoNS.Array.SparseDoubleArray)">
            <summary>Subtracts two arrays.</summary>
            <param name="arrayLeft" type="IntArray">Array on the left side.</param>
            <param name="arrayRight" type="SparseDoubleArray">Array on the right side.</param>
            <returns>A dense DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.op_Subtraction(ShoNS.Array.IntArray,ShoNS.Array.SparseFloatArray)">
            <summary>Subtracts two arrays.</summary>
            <param name="arrayLeft" type="IntArray">Array on the left side.</param>
            <param name="arrayRight" type="SparseFloatArray">Array on the right side.</param>
            <returns>A dense FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.op_Subtraction(ShoNS.Array.IntArray,ShoNS.Array.SparseIntArray)">
            <summary>Subtracts two arrays.</summary>
            <param name="arrayLeft" type="IntArray">Array on the left side.</param>
            <param name="arrayRight" type="SparseIntArray">Array on the right side.</param>
            <returns>A dense IntArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.op_Subtraction(ShoNS.Array.IntArray,System.Int32)">
            <summary>Subtracts a value from each element of an array.</summary>
            <param name="array" type="IntArray">Array on the left side.</param>
            <param name="value" type="int">The value to subtract.</param>
            <returns>An IntArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.op_Subtraction(ShoNS.Array.IntArray,System.Single)">
            <summary>Subtracts a value from each element of an array.</summary>
            <param name="array" type="IntArray">Array on the left side.</param>
            <param name="value" type="float">The value to subtract.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.op_Subtraction(ShoNS.Array.IntArray,System.Double)">
            <summary>Subtracts a value from each element of an array.</summary>
            <param name="array" type="IntArray">Array on the left side.</param>
            <param name="value" type="double">The value to subtract.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.op_Subtraction(System.Int32,ShoNS.Array.IntArray)">
            <summary>From a value, subtracts each element of an array.</summary>
            <param name="value" type="int">The value to subtract.</param>
            <param name="array" type="IntArray">Array on the right side.</param>
            <returns>An IntArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.op_Subtraction(System.Single,ShoNS.Array.IntArray)">
            <summary>From a value, subtracts each element of an array.</summary>
            <param name="value" type="float">The value to subtract.</param>
            <param name="array" type="IntArray">Array on the right side.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.op_Subtraction(System.Double,ShoNS.Array.IntArray)">
            <summary>From a value, subtracts each element of an array.</summary>
            <param name="value" type="double">The value to subtract.</param>
            <param name="array" type="IntArray">Array on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.op_Multiply(ShoNS.Array.IntArray,ShoNS.Array.IntArray)">
            <summary>Multiplies two arrays.</summary>
            <param name="matrixLeft" type="IntArray">Matrix on the left side.</param>
            <param name="matrixRight" type="IntArray">Matrix on the right side.</param>
            <returns>An IntArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.op_Multiply(ShoNS.Array.IntArray,ShoNS.Array.SparseDoubleArray)">
            <summary>Multiplies two matrices.</summary>
            <param name="matrixLeft" type="IntArray">Matrix on the left side.</param>
            <param name="matrixRight" type="SparseDoubleArray">Sparse matrix on the right side.</param>
            <returns>A dense DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.op_Multiply(ShoNS.Array.IntArray,ShoNS.Array.SparseFloatArray)">
            <summary>Multiplies two matrices.</summary>
            <param name="matrixLeft" type="IntArray">Matrix on the left side.</param>
            <param name="matrixRight" type="SparseFloatArray">Sparse matrix on the right side.</param>
            <returns>A dense FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.op_Multiply(ShoNS.Array.IntArray,ShoNS.Array.SparseIntArray)">
            <summary>Multiplies two matrices.</summary>
            <param name="matrixLeft" type="IntArray">Matrix on the left side.</param>
            <param name="matrixRight" type="SparseIntArray">Sparse matrix on the right side.</param>
            <returns>A dense IntArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.op_Multiply(ShoNS.Array.IntArray,System.Int32)">
            <summary>Multiplies each element of an array by a value.</summary>
            <param name="array" type="IntArray">Array on the left side.</param>
            <param name="value" type="int">The value to multiply.</param>
            <returns>An IntArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.op_Multiply(ShoNS.Array.IntArray,System.Single)">
            <summary>Multiplies each element of an array by a value.</summary>
            <param name="array" type="IntArray">Array on the left side.</param>
            <param name="value" type="float">The value to multiply.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.op_Multiply(ShoNS.Array.IntArray,System.Double)">
            <summary>Multiplies each element of an array by a value.</summary>
            <param name="array" type="IntArray">Array on the left side.</param>
            <param name="value" type="double">The value to multiply.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.op_Multiply(System.Int32,ShoNS.Array.IntArray)">
            <summary>Multiplies each element of an array by a value.</summary>
            <param name="value" type="int">The value to multiply.</param>
            <param name="array" type="IntArray">Array on the right side.</param>
            <returns>An IntArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.op_Multiply(System.Single,ShoNS.Array.IntArray)">
            <summary>Multiplies each element of an array by a value.</summary>
            <param name="value" type="float">The value to multiply.</param>
            <param name="array" type="IntArray">Array on the right side.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.op_Multiply(System.Double,ShoNS.Array.IntArray)">
            <summary>Multiplies each element of an array by a value.</summary>
            <param name="value" type="double">The value to multiply.</param>
            <param name="array" type="IntArray">Array on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.MultiplyAccum(System.Int32,ShoNS.Array.IntArray)">
            <summary>array += alpha*b</summary>
            <param name="alpha" type="int">The value to multiply.</param>
            <param name="arrayRight" type="IntArray">Array on the right side.</param>
        </member>
        <member name="M:ShoNS.Array.IntArray.MultiplyTranspose(System.Boolean)">
            <summary>Multiplies the array by its transpose or vice versa: A'*A or A*A'.</summary>
            <param name="transFirst" type="bool">If true, the transpose is on the left side; else it's on the right.</param>
            <returns>An IntArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.ElementMultiply(ShoNS.Array.DoubleArray)">
            <summary>Multiplies the elements of two arrays.</summary>
            <param name="otherArray" type="DoubleArray">Array on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.ElementMultiply(ShoNS.Array.FloatArray)">
            <summary>Multiplies the elements of two arrays.</summary>
            <param name="otherArray" type="FloatArray">Array on the right side.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.ElementMultiply(ShoNS.Array.IntArray)">
            <summary>Multiplies the elements of two arrays.</summary>
            <param name="otherArray" type="IntArray">Array on the right side.</param>
            <returns>An IntArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.ElementMultiply(ShoNS.Array.ComplexArray)">
            <summary>Multiplies the elements of two arrays.</summary>
            <param name="otherArray" type="ComplexArray">Array to the right.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.ElementMultiply(ShoNS.Array.SparseDoubleArray)">
            <summary>Multiplies the elements of two arrays.</summary>
            <param name="otherArray" type="SparseDoubleArray">Sparse array on the right side.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.ElementMultiply(ShoNS.Array.SparseFloatArray)">
            <summary>Multiplies the elements of two arrays.</summary>
            <param name="otherArray" type="SparseFloatArray">Sparse array on the right side.</param>
            <returns>A SparseFloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.ElementMultiply(ShoNS.Array.SparseIntArray)">
            <summary>Multiplies the elements of two arrays.</summary>
            <param name="otherArray" type="SparseIntArray">Sparse array on the right side.</param>
            <returns>A SparseIntArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.op_Division(ShoNS.Array.IntArray,System.Int32)">
            <summary>Divides a value by the elements of an array.</summary>
            <param name="value" type="int">Value to divide.</param>
            <param name="array" type="IntArray">Array on the right side.</param>
            <returns>An IntArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.op_Division(ShoNS.Array.IntArray,System.Single)">
            <summary>Divides a value by the elements of an array.</summary>
            <param name="value" type="float">Value to divide.</param>
            <param name="array" type="IntArray">Array on the right side.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.op_Division(ShoNS.Array.IntArray,System.Double)">
            <summary>Divides a value by the elements of an array.</summary>
            <param name="value" type="double">Value to divide.</param>
            <param name="array" type="IntArray">Array on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.op_Division(System.Int32,ShoNS.Array.IntArray)">
            <summary>Divides a value by the elements of an array.</summary>
            <param name="value" type="int">Value to divide.</param>
            <param name="array" type="IntArray">Array on the right side.</param>
            <returns>An IntArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.op_Division(System.Single,ShoNS.Array.IntArray)">
            <summary>Divides a value by the elements of an array.</summary>
            <param name="value" type="float">Value to divide.</param>
            <param name="array" type="IntArray">Array on the right side.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.op_Division(System.Double,ShoNS.Array.IntArray)">
            <summary>Divides a value by the elements of an array.</summary>
            <param name="value" type="double">Value to divide.</param>
            <param name="array" type="IntArray">Array on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.ElementDivide(ShoNS.Array.DoubleArray)">
            <summary>Divides the elements of two arrays.</summary>
            <param name="otherArray" type="DoubleArray">Array on the right side.</param>
            <returns>A DoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.ElementDivide(ShoNS.Array.FloatArray)">
            <summary>Divides the elements of two arrays.</summary>
            <param name="otherArray" type="FloatArray">Array on the right side.</param>
            <returns>A FloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.ElementDivide(ShoNS.Array.IntArray)">
            <summary>Divides the elements of two arrays.</summary>
            <param name="otherArray" type="IntArray">Array on the right side.</param>
            <returns>An IntArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.ElementDivide(ShoNS.Array.ComplexArray)">
            <summary>Divides the elements of two arrays.</summary>
            <param name="otherArray" type="ComplexArray">Array on the right.</param>
            <returns>A ComplexArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.ElementDivide(ShoNS.Array.SparseDoubleArray)">
            <summary>Divides the elements of two arrays.</summary>
            <param name="otherArray" type="SparseDoubleArray">Sparse array on the right side.</param>
            <returns>A SparseDoubleArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.ElementDivide(ShoNS.Array.SparseFloatArray)">
            <summary>Divides the elements of two arrays.</summary>
            <param name="otherArray" type="SparseFloatArray">Sparse array on the right side.</param>
            <returns>A SparseFloatArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.ElementDivide(ShoNS.Array.SparseIntArray)">
            <summary>Divides the elements of two arrays.</summary>
            <param name="otherArray" type="SparseIntArray">Sparse array on the right side.</param>
            <returns>A SparseIntArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.op_UnaryNegation(ShoNS.Array.IntArray)">
            <summary>Negates each element of the array.</summary>
            <param name="array">Array to negate</param>        
        </member>
        <member name="M:ShoNS.Array.IntArray.Negate">
            <summary>Negates each element of the array.</summary>     
        </member>
        <member name="M:ShoNS.Array.IntArray.AddBroadcast(ShoNS.Array.IntArray)">
            <summary>Adds the elements of two arrays, broadcasting the arrays if needed.</summary>
            <param name="otherArray" type="IntArray">Array on the right side.</param>
            <returns>A IntArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.SubtractBroadcast(ShoNS.Array.IntArray)">
            <summary>Subtracts the elements of two arrays, broadcasting the arrays if needed.</summary>
            <param name="otherArray" type="IntArray">Array on the right side.</param>
            <returns>A IntArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.ElementMultiplyBroadcast(ShoNS.Array.IntArray)">
            <summary>Multiplies the elements of two arrays, broadcasting the arrays if needed.</summary>
            <param name="otherArray" type="IntArray">Array on the right side.</param>
            <returns>A IntArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.ElementDivideBroadcast(ShoNS.Array.IntArray)">
            <summary>Divides the elements of two arrays, broadcasting the arrays if needed.</summary>
            <param name="otherArray" type="IntArray">Array on the right side.</param>
            <returns>A IntArray</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.Sort">
            <summary>Sorts the array in ascending order.</summary>
            <returns>A vector containing the sorted values.</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.SortDesc">
            <summary>Sorts the array in descending order.</summary>
            <returns>A vector containing the sorted values.</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.SortIndex(ShoNS.Array.IntArray@)">
            <summary>Sorts the array in ascending order, returning the indices into the original array in sorted order.</summary>
            <param name="indexArray">The indices into the original array, an out parameter.</param>
            <returns>A vector containing the sorted values and an IntArray containing the indices into the original array.</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.SortDescIndex(ShoNS.Array.IntArray@)">
            <summary>Sorts the array in descending order, returning the indices into the original array in sorted order.</summary>
            <param name="indexArray">The indices into the original array, an out parameter.</param>
            <returns>A vector containing the sorted values and an IntArray containing the indices into the original array.</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.Sort(System.Int32)">
            <summary>Sorts the array in ascending order over the given dimension.</summary>
            <param name="dim">The dimension to sort.</param>
            <returns>An array containing the sorted values.</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.SortDesc(System.Int32)">
            <summary>Sorts the array in descending order over the given dimension.</summary>
            <param name="dim">The dimension to sort.</param>
            <returns>An array containing the sorted values.</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.SortIndex(System.Int32,ShoNS.Array.IntArray@)">
            <summary>Sorts the array in ascending order, over the given dimension, returning the indices into the original array in sorted order.</summary>
            <param name="dim">The dimension to sort.</param>
            <param name="indexArray">The indices into the original array, an out parameter.</param>
            <returns>An array of sorted values and an IntArray containing the indices into the original array.</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.SortDescIndex(System.Int32,ShoNS.Array.IntArray@)">
            <summary>Sorts the array in descending order, over the given dimension, returning the indices into the original array in sorted order.</summary>
            <param name="dim">The dimension.</param>
            <param name="indexArray">The indices into the original array, an out parameter.</param>
            <returns>An array of sorted values and an IntArray containing the indices into the original array.</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.Sort(ShoNS.Array.DimOp)">
            <summary>Sorts the array in ascending order along the given dimension.</summary>
            <param name="dim" type="DimOp">The dimension to sort.</param>
            <returns>An array containing the sorted values.</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.SortDesc(ShoNS.Array.DimOp)">
            <summary>Sorts the array in descending order along the given dimension.</summary>
            <param name="dim" type="DimOp">The dimension to sort.</param>
            <returns>An array containing the sorted values.</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.SortIndex(ShoNS.Array.DimOp,ShoNS.Array.IntArray@)">
            <summary>Sorts the array in ascending order, along the given dimension, returning the indices into the original array in sorted order.</summary>
            <param name="dim" type="DimOp">The dimension to sort.</param>
            <param name="indexArray">The indices into the original array, an out parameter.</param>
            <returns>An array of sorted values and an IntArray containing the indices into the original array.</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.SortDescIndex(ShoNS.Array.DimOp,ShoNS.Array.IntArray@)">
            <summary>Sorts the array in descending order, along the given dimension, returning the indices into the original array in sorted order.</summary>
            <param name="dim" type="DimOp">The dimension to sort.</param>
            <param name="indexArray">The indices into the original array, an out parameter.</param>
            <returns>An array of sorted values and an IntArray containing the indices into the original array.</returns>
        </member>
        <member name="M:ShoNS.Array.IntArray.VertStack(System.Collections.IEnumerable[])">
            <summary>Stacks the inputs vertically.</summary>
            <param name="items">Items to stack</param>        
        </member>
        <member name="M:ShoNS.Array.IntArray.HorizStack(System.Collections.IEnumerable[])">
            <summary>Stacks the inputs horizontally.</summary>
            <param name="items">Items to stack</param>        
        </member>
        <member name="M:ShoNS.Array.IntArray.SameValues(ShoNS.Array.IntArray)">
            <summary>Determines if two arrays are the exactly same.</summary>
            <param name="arrayToCompare" type="IntArray">Array to compare.</param>
            <returns>true if the arrays are the same; false if different.</returns>
        </member>
        <member name="P:ShoNS.Array.IntArray.Rows">
            <summary>Returns an IEnumerable object that can be used to iterate over the rows of the array.</summary>
        </member>
        <member name="P:ShoNS.Array.IntArray.Cols">
            <summary>Returns an IEnumerable object that can be used to iterate over the columns of the array.</summary>
        </member>
        <member name="P:ShoNS.Array.IntArray.T">
            <summary>Transposes the 1st and 2nd dimensions of the array, making a shallow copy.</summary>
            <returns>Returns a shallow copy of transposed array.</returns>
        </member>
        <member name="P:ShoNS.Array.IntArray.Diagonal">
            <summary>Returns the main diagonal of the array as a vectory or sets the main diagonal to the input vector.</summary>
        </member>
        <member name="T:ShoNS.Array.ArrayFind">
             <summary>This class implements methods that allow a caller to find the non-zero elements of an integer array.</summary>    
            <remarks>It is meant to be used with the output of the ElementXX (e.g. ElementEQ) methods that the numerical arrays implement.</remarks>
        </member>
        <member name="M:ShoNS.Array.ArrayFind.Find(ShoNS.Array.IntArray)">
            <summary>Returns an enumerable object that allows the caller to iterate through the non-zero entries of an integer array.</summary>    
            <param name="inputArray">Input array</param>
        </member>
        <member name="M:ShoNS.Array.ArrayFind.FindList(ShoNS.Array.IntArray)">
            <summary>Returns a List of ArrayEntry object that allows the caller to get the indices of the non-zero entries of an integer array.</summary>    
            <param name="inputArray">Input array</param>
        </member>
        <member name="T:ShoNS.Array.LUBase`1">
            <summary>The LU base class.</summary>
        </member>
        <member name="M:ShoNS.Array.LUBase`1.AbsDet">
            <summary>Computes the absolute value of the array determinant.</summary>
        </member>
        <member name="M:ShoNS.Array.LUBase`1.Det">
            <summary>Computes the array determinant.</summary>
        </member>
        <member name="M:ShoNS.Array.LUBase`1.Rank">
            <summary>Returns the array rank using the default tolerance.</summary>
        </member>
        <member name="M:ShoNS.Array.LUBase`1.Rank(`0)">
            <summary>Returns the array rank using the given tolerance.</summary>
        </member>
        <member name="M:ShoNS.Array.LUBase`1.RCond(System.Boolean)">
            <summary>Computes the reciprocal of the condition number.</summary>
            <param name="oneNorm" type="bool">If true, use the 1-norm; otherwise use the infinity norm.</param>
        </member>
        <member name="T:ShoNS.Array.LU">
            <summary>This class performs an LU-decomposition for a double-precision floating point array.</summary>
        </member>
        <member name="M:ShoNS.Array.LU.#ctor(ShoNS.Array.DoubleArray)">
            <summary>Compute the LU decomposition for the input array.</summary>
            <param name="inputMatrix">Input matrix to decompose</param>              
        </member>
        <member name="M:ShoNS.Array.LU.Inv">
            <summary>Computes the inverse of the array.</summary>
        </member>
        <member name="M:ShoNS.Array.LU.Solve(ShoNS.Array.DoubleArray)">
            <summary>Solves the system: A*x = B</summary>
            <param name="matrixRight">Array on the right side</param>
        </member>
        <member name="M:ShoNS.Array.LU.ImproveSolve(ShoNS.Array.DoubleArray,ShoNS.Array.DoubleArray,ShoNS.Array.DoubleArray@,ShoNS.Array.DoubleArray@)">
            <summary>Get an improved solution to A*x = B, given x and B</summary>
            <param name="matrixRight">The array on the right side.</param>
            <param name="initialSolution">The initial solution.</param>
            <param name="forwardError">Output: Component-wise forward error for each solution.</param>
            <param name="backwardError">Output: Component-wise backward error for each solution.</param>
            <returns>The refined solution</returns>
        </member>
        <member name="P:ShoNS.Array.LU.L">
            <summary>The lower triangular array.</summary>
        </member>
        <member name="P:ShoNS.Array.LU.U">
            <summary>The upper triangular array.</summary>
        </member>
        <member name="P:ShoNS.Array.LU.LUMatrix">
            <summary>The LU decomposition in one array.</summary>
        </member>
        <member name="P:ShoNS.Array.LU.PermMatrix">
            <summary>The permutation array.</summary>
        </member>
        <member name="T:ShoNS.Array.LUFloat">
            <summary>This class performs an LU-decomposition for a single-precision floating point array.</summary>
        </member>
        <member name="M:ShoNS.Array.LUFloat.#ctor(ShoNS.Array.FloatArray)">
            <summary>Compute the LU decomposition for the input array.</summary>
            <param name="inputMatrix">Input matrix to decompose</param>              
        </member>
        <member name="M:ShoNS.Array.LUFloat.Inv">
            <summary>Computes the inverse of the array.</summary>
        </member>
        <member name="M:ShoNS.Array.LUFloat.Solve(ShoNS.Array.FloatArray)">
            <summary>Solves the system: A*x = B</summary>
            <param name="matrixRight">Array on the right side.</param>
        </member>
        <member name="M:ShoNS.Array.LUFloat.ImproveSolve(ShoNS.Array.FloatArray,ShoNS.Array.FloatArray,ShoNS.Array.FloatArray@,ShoNS.Array.FloatArray@)">
            <summary>Get an improved solution to A*x = B, given x and B</summary>
            <param name="matrixRight">The array on the right side.</param>
            <param name="initialSolution">The initial solution.</param>
            <param name="forwardError">Output: Component-wise forward error for each solution.</param>
            <param name="backwardError">Output: Component-wise backward error for each solution.</param>
            <returns>The refined solution</returns>
        </member>
        <member name="P:ShoNS.Array.LUFloat.L">
            <summary>The lower triangular array.</summary>
        </member>
        <member name="P:ShoNS.Array.LUFloat.U">
            <summary>The upper triangular array.</summary>
        </member>
        <member name="P:ShoNS.Array.LUFloat.LUMatrix">
            <summary>The LU decomposition in one array.</summary>
        </member>
        <member name="P:ShoNS.Array.LUFloat.PermMatrix">
            <summary>The permutation array.</summary>
        </member>
        <member name="T:ShoNS.Array.ObjArray">
            <summary>This class implements functionality for an array with System.Object elements.</summary>
        </member>
        <member name="M:ShoNS.Array.ObjArray.Zeros(System.Int32)">
            <summary>Creates an ObjArray of the given length, filled with nulls.</summary>
            <param name="length">Vector length</param>        
        </member>
        <member name="M:ShoNS.Array.ObjArray.Zeros(System.Int32,System.Int32)">
            <summary>Creates an ObjArray of size0 x size1, filled with nulls.</summary>
            <param name="size0">Number of rows</param>
            <param name="size1">Number of columns</param>           
        </member>
        <member name="M:ShoNS.Array.ObjArray.Zeros(System.Int32[])">
             <summary>Creates a multidimensional ObjArray of the given size, filled with nulls.</summary>
            <param name="sizes">Sizes</param>        
        </member>
        <member name="M:ShoNS.Array.ObjArray.FromFile(System.String)">
            <summary>Creates an array from a file, using binary serialization.</summary>
            <param name="fileName" type="String">Name of file from which to create the array.</param>    
        </member>
        <member name="M:ShoNS.Array.ObjArray.FromStream(System.IO.Stream)">
            <summary>Creates an array from a stream, using binary serialization.</summary>
            <param name="stream" type="System.IO.Stream">Stream from which to create the array.</param>  
        </member>
        <member name="M:ShoNS.Array.ObjArray.From(ShoNS.Array.ArrayBase{System.Object})">
            <summary>Creates an array (deep copy) from another array.</summary>
            <param name="input">Array to copy</param>        
        </member>
        <member name="M:ShoNS.Array.ObjArray.FromShallow(ShoNS.Array.ArrayBase{System.Object})">
            <summary>Creates an array (shallow copy) from another array.</summary>
        </member>
        <member name="M:ShoNS.Array.ObjArray.From(System.Collections.IEnumerable)">
            <summary>Creates a deep copy from an IEnumerable object</summary>
            <param name="input">Enumerable to copy</param>         
        </member>
        <member name="M:ShoNS.Array.ObjArray.#ctor(System.Int32)">
            <summary>Creates an ObjArray of the given length, filled with nulls.</summary>
            <param name="length">Length of vector</param>       
        </member>
        <member name="M:ShoNS.Array.ObjArray.#ctor(System.Int32,System.Int32)">
            <summary>Creates an ObjArray of size0 x size1, filled with nulls.</summary>
            <param name="size0">Number rows</param>  
            <param name="size1">Number columns</param>   
        </member>
        <member name="M:ShoNS.Array.ObjArray.#ctor(System.Int32[])">
            <summary>Creates a multidimensional ObjArray of the given size, filled with nulls.</summary>
            <param name="sizes">Sizes</param>       
        </member>
        <member name="M:ShoNS.Array.ObjArray.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization.</summary>
        </member>
        <member name="M:ShoNS.Array.ObjArray.Squeeze">
            <summary>Squeezes out the size 1 dimensions (shallowly).</summary>
        </member>
        <member name="M:ShoNS.Array.ObjArray.AlongDim(System.Int32)">
            <summary>Returns an IEnumerable object that can be used to iterate along a dimension of an array.</summary>
            <param name="dim">Along which dimension</param>        
        </member>
        <member name="M:ShoNS.Array.ObjArray.RowElements(System.Int32)">
            <summary>Returns an IEnumerable object that can be used to iterate over the elements of a given row.</summary>
            <param name="rowIndex" type="int">The index of the row to return.</param>
        </member>
        <member name="M:ShoNS.Array.ObjArray.ColumnElements(System.Int32)">
            <summary>Returns an IEnumerable object that can be used to iterate over the elements of a given column.</summary>
            <param name="colIndex" type="int">The index of the row to return.</param>
        </member>
        <member name="M:ShoNS.Array.ObjArray.TransposeDeep">
            <summary>Transposes the 1st and 2nd dimensions of the array, making a deep copy.</summary>
            <returns>Returns a deep copy of transposed array.</returns>
        </member>
        <member name="M:ShoNS.Array.ObjArray.Transpose">
            <summary>Transposes the 1st and 2nd dimensions of the array, making a shallow copy.</summary>
            <returns>Returns a shallow copy of transposed array.</returns>
        </member>
        <member name="M:ShoNS.Array.ObjArray.CopyDeep">
            <summary>Makes a deep copy of the array; the new array has its own storage.</summary>
            <returns>Returns a deep copy the array.</returns>
        </member>
        <member name="M:ShoNS.Array.ObjArray.CopyShallow">
            <summary>Makes a shallow copy of the array; the new array shares its storage with the original array.</summary>
            <returns>Returns a shallow copy the array.</returns>
        </member>
        <member name="M:ShoNS.Array.ObjArray.CopyTo(ShoNS.Array.ObjArray)">
            <summary>Copies the contents of this array to the specified array.</summary>
            <param name="destArray">Destination array</param>             
        </member>
        <member name="M:ShoNS.Array.ObjArray.ToVector">
            <summary>Makes a vector, copying the elements in row-column order.</summary>
        </member>
        <member name="M:ShoNS.Array.ObjArray.GetSlice(System.Int32,System.Int32)">
            <summary>Creates a subarray (shallow copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndex" type="int">Maximum index (inclusive) in the slice.</param>  
        </member>
        <member name="M:ShoNS.Array.ObjArray.GetSliceDeep(System.Int32,System.Int32)">
            <summary>Creates a subarray (deep copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndex" type="int">Maximum index (inclusive) in the slice.</param>  
        </member>
        <member name="M:ShoNS.Array.ObjArray.GetSlice(System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (shallow copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndex" type="int">Maximum index (inclusive) in the slice.</param>  
            <param name="step">Step</param>
        </member>
        <member name="M:ShoNS.Array.ObjArray.GetSliceDeep(System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (deep copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndex" type="int">Maximum index (inclusive) in the slice.</param>  
            <param name="step">Step</param>
        </member>
        <member name="M:ShoNS.Array.ObjArray.GetSlice(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (shallow copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRow" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastCol" type="int">Maximum column number (inclusive) in the slice.</param>          
        </member>
        <member name="M:ShoNS.Array.ObjArray.GetSliceDeep(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (deep copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRow" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastCol" type="int">Maximum column number (inclusive) in the slice.</param>          
        </member>
        <member name="M:ShoNS.Array.ObjArray.GetSliceDeep(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (deep copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRow" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="stepRow" type="int">Row step size.</param> 
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastCol" type="int">Maximum column number (inclusive) in the slice.</param>          
            <param name="stepCol" type="int">Column step size.</param> 
        </member>
        <member name="M:ShoNS.Array.ObjArray.GetSlice(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (shallow copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRow" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="stepRow" type="int">Row step size.</param> 
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastCol" type="int">Maximum column number (inclusive) in the slice.</param>          
            <param name="stepCol" type="int">Column step size.</param> 
        </member>
        <member name="M:ShoNS.Array.ObjArray.GetSliceDeep(ShoNS.Array.Slice[])">
            <summary>Creates a subarray (deep copy). If your slice contains a list of indices, you must call this method.</summary>
            <param name="slices">Slices to get</param>        
        </member>
        <member name="M:ShoNS.Array.ObjArray.GetSlice(ShoNS.Array.Slice[])">
            <summary>Creates a subarray (shallow copy). If your slice contains a list of indices, call GetSliceDeep instead.</summary>
            <param name="slices">Slices to get</param>       
        </member>
        <member name="M:ShoNS.Array.ObjArray.GetArrayEntries(System.Collections.Generic.IEnumerable{ShoNS.Array.IArrayEntry})">
            <summary>Creates an array (deep copy) from the array entries.</summary>
            <param name="arrayEntries">Enumerable of array entries to get</param>   
        </member>
        <member name="M:ShoNS.Array.ObjArray.VertStack(System.Collections.IEnumerable[])">
            <summary>Stacks the inputs vertically</summary>
            <param name="items">Items to stack</param>           
        </member>
        <member name="M:ShoNS.Array.ObjArray.HorizStack(System.Collections.IEnumerable[])">
            <summary>Stacks the inputs horizontally</summary>
            <param name="items">Items to stack</param>           
        </member>
        <member name="P:ShoNS.Array.ObjArray.Rows">
            <summary>Returns an IEnumerable object that can be used to iterate over the rows of the matrix.</summary>
        </member>
        <member name="P:ShoNS.Array.ObjArray.Cols">
            <summary>Returns an IEnumerable object that can be used to iterate over the columns of the matrix.</summary>
        </member>
        <member name="P:ShoNS.Array.ObjArray.T">
            <summary>Transposes the 1st and 2nd dimensions of the array, making a shallow copy.</summary>
            <returns>Returns a shallow copy of transposed array.</returns>
        </member>
        <member name="P:ShoNS.Array.ObjArray.Diagonal">
            <summary>Returns the main diagonal of the array as a vectory or sets the main diagonal to the input vector.</summary>
        </member>
        <member name="T:ShoNS.Array.QRBase`1">
            <summary>The QR base class.</summary>
        </member>
        <member name="M:ShoNS.Array.QRBase`1.Rank">
            <summary>Returns the array rank using the default tolerance.</summary>
        </member>
        <member name="M:ShoNS.Array.QRBase`1.Rank(`0)">
            <summary>Returns the array rank using the given tolerance.</summary>
        </member>
        <member name="M:ShoNS.Array.QRBase`1.AbsDet">
            <summary>Computes the absolute value of the array determinant.</summary>
        </member>
        <member name="P:ShoNS.Array.QRBase`1.PermVector">
            <summary>Returns the permutation array.</summary>
        </member>
        <member name="T:ShoNS.Array.QR">
            <summary>This class performs a QR-decomposition for a double-precision floating point array.</summary>
        </member>
        <member name="M:ShoNS.Array.QR.#ctor(ShoNS.Array.DoubleArray)">
            <summary>Compute the QR decomposition for the input matrix.</summary>
            <param name="inputMatrix">Input matrix to decompose</param>              
        </member>
        <member name="M:ShoNS.Array.QR.LSSolve(ShoNS.Array.DoubleArray)">
            <summary>Solves the least-squares problem: A*x = B</summary>
            <param name="matrixRight">Array on the right side.</param>
            <returns>The least-squares solution, as a DoubleArray.</returns>
        </member>
        <member name="P:ShoNS.Array.QR.Q">
            <summary>The orthonormal array</summary>
        </member>
        <member name="P:ShoNS.Array.QR.R">
            <summary>The upper triangular array</summary>
        </member>
        <member name="T:ShoNS.Array.QRFloat">
            <summary>This class performs a QR-decomposition for a single-precision floating point array.</summary>
        </member>
        <member name="M:ShoNS.Array.QRFloat.#ctor(ShoNS.Array.FloatArray)">
            <summary>Compute the QR decomposition for the input array.</summary>
            <param name="inputMatrix">Input matrix to decompose</param>              
        </member>
        <member name="M:ShoNS.Array.QRFloat.LSSolve(ShoNS.Array.FloatArray)">
            <summary>Solves the least-squares problem: A*x = B</summary>
            <param name="matrixRight">Array on the right side.</param>
            <returns>The least-squares solution, as a FloatArray.</returns>
        </member>
        <member name="P:ShoNS.Array.QRFloat.Q">
            <summary>The orthonormal array</summary>
        </member>
        <member name="P:ShoNS.Array.QRFloat.R">
            <summary>The upper triangular array</summary>
        </member>
        <member name="T:ShoNS.Array.SchurBase`1">
            <summary>The Schur base class.</summary>
        </member>
        <member name="T:ShoNS.Array.Schur">
            <summary>This class performs a Schur decomposition for a double-precsion floating point array.</summary>
        </member>
        <member name="M:ShoNS.Array.Schur.#ctor(ShoNS.Array.DoubleArray)">
            <summary>Compute the Schur decomposition for the input array.</summary>
            <param name="inputMatrix">Input matrix to decompose</param>              
        </member>
        <member name="P:ShoNS.Array.Schur.U">
            <summary>The orthogonal array</summary>
        </member>
        <member name="P:ShoNS.Array.Schur.R">
            <summary>The upper-right triangular array</summary>
        </member>
        <member name="T:ShoNS.Array.SchurFloat">
            <summary>This class performs a Schur decomposition for a single-precsion floating point array.</summary>
        </member>
        <member name="M:ShoNS.Array.SchurFloat.#ctor(ShoNS.Array.FloatArray)">
            <summary>Compute the Schur decomposition for the input array.</summary>
            <param name="inputMatrix">Input matrix to decompose</param>              
        </member>
        <member name="P:ShoNS.Array.SchurFloat.U">
            <summary>The orthogonal array</summary>
        </member>
        <member name="P:ShoNS.Array.SchurFloat.R">
            <summary>The upper-right triangular array</summary>
        </member>
        <member name="T:ShoNS.Array.NormType">
            <summary>This enumeration lists the norm computations that are implemented.</summary>
        </member>
        <member name="F:ShoNS.Array.NormType.One">
            <summary>Compute the 1-norm</summary>
        </member>
        <member name="F:ShoNS.Array.NormType.Infinity">
            <summary>Compute the infinity norm</summary>
        </member>
        <member name="F:ShoNS.Array.NormType.Frobenius">
            <summary>Compute the Frobenius norm</summary>
        </member>
        <member name="F:ShoNS.Array.NormType.Two">
            <summary>Compute the 2-norm</summary>
        </member>
        <member name="F:ShoNS.Array.NormType.NegInfinity">
            <summary>Compute the negative infinity norm</summary>
        </member>
        <member name="T:ShoNS.Array.Slice">
            <summary>This structure defines an array slice.</summary>
        </member>
        <member name="M:ShoNS.Array.Slice.#ctor(System.Nullable{System.Int32})">
            <summary>Creates a Slice object with the given start value.</summary>
            <param name="start">Start index</param>
        </member>
        <member name="M:ShoNS.Array.Slice.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary> Creates a Slice object with the given start and stop values. </summary>
            <param name="start">Start index</param>
            <param name="stop">Stop index</param>
        </member>
        <member name="M:ShoNS.Array.Slice.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Creates a Slice object with the given start, stop and step values.</summary>
            <param name="start">Start index</param>
            <param name="stop">Stop index</param>
            <param name="step">Step</param>
        </member>
        <member name="M:ShoNS.Array.Slice.#ctor(System.Collections.Generic.IList{System.Int32})">
            <summary>Creates a Slice object with the given indices</summary>
            <param name="indices">List of indices</param>
        </member>
        <member name="M:ShoNS.Array.Slice.#ctor(System.Boolean)">
            <summary>Creates a Slice Object</summary>
            <param name="isNewAxis">true if creating a new axis</param>
        </member>
        <member name="M:ShoNS.Array.Slice.Start(System.Int32)">
            <summary>Returns the start index</summary>
            <param name="arrayLen">Length of array dimension</param>
            <returns>Start index</returns>
        </member>
        <member name="M:ShoNS.Array.Slice.Stop(System.Int32)">
            <summary>Returns the stop index</summary>
            <param name="arrayLen">Length of array dimension</param>
            <returns>Stop index</returns>
        </member>
        <member name="M:ShoNS.Array.Slice.Step">
            <summary>Returns the current step value</summary>
            <returns>Step</returns>
        </member>
        <member name="P:ShoNS.Array.Slice.NewAxis">
            <summary>Creates a new axis Slice object</summary>
        </member>
        <member name="P:ShoNS.Array.Slice.All">
            <summary>Creates a Slice object representing all indices for that dimension. This is equivalent to python's : </summary>
        </member>
        <member name="P:ShoNS.Array.Slice.Indices">
            <summary>List of indices</summary>
        </member>
        <member name="P:ShoNS.Array.Slice.IsNewAxis">
            <summary>Returns true if this is a new axis</summary>
        </member>
        <member name="T:ShoNS.Array.SolverMethod">
            <summary>This enumeration lists the solver methods that are used.</summary>
        </member>
        <member name="F:ShoNS.Array.SolverMethod.NotInit">
            <summary>Error condition</summary>
        </member>
        <member name="F:ShoNS.Array.SolverMethod.SolveChol">
            <summary>Solve by Cholesky decomposition</summary>
        </member>
        <member name="F:ShoNS.Array.SolverMethod.SolveLU">
            <summary>Solve by LU decomposition</summary>
        </member>
        <member name="F:ShoNS.Array.SolverMethod.SolveQR">
            <summary>Solve by QR decomposition</summary>
        </member>
        <member name="F:ShoNS.Array.SolverMethod.SolveSVD">
            <summary>Solve by SVD decomposition</summary>
        </member>
        <member name="T:ShoNS.Array.SolverBase`1">
            <summary>Solver base class</summary>
        </member>
        <member name="P:ShoNS.Array.SolverBase`1.MethodUsed">
            <summary>The solver method that will be used.</summary>
        </member>
        <member name="T:ShoNS.Array.Solver">
            <summary>This class solves the system A*x = B where A, x and B are double floating point arrays.</summary>
        </member>
        <member name="M:ShoNS.Array.Solver.#ctor(ShoNS.Array.DoubleArray)">
            <summary>Initialze the solver with the lefthand side matrix, matrixLeft</summary>
        </member>
        <member name="M:ShoNS.Array.Solver.Solve(ShoNS.Array.DoubleArray)">
            <summary>Solve the system with the righthand side matrix, matrixRight</summary>
        </member>
        <member name="T:ShoNS.Array.SolverFloat">
            <summary>This class solves the system A*x = B where A, x and B are single floating point arrays.</summary>
        </member>
        <member name="M:ShoNS.Array.SolverFloat.#ctor(ShoNS.Array.FloatArray)">
            <summary>Initialze the solver with the lefthand side matrix, A</summary>
        </member>
        <member name="M:ShoNS.Array.SolverFloat.Solve(ShoNS.Array.FloatArray)">
            <summary>Solve the system with the righthand side matrix, matrixRight</summary>
        </member>
        <member name="T:ShoNS.Array.ScalingStatusCode">
            <summary>This enumeration lists the status codes that are returned by MatrixScaling.</summary>
        </member>
        <member name="F:ShoNS.Array.ScalingStatusCode.NoError">
            <summary>No error</summary>
        </member>
        <member name="F:ShoNS.Array.ScalingStatusCode.RowZero">
            <summary>One of the rows was exactly zero</summary>
        </member>
        <member name="F:ShoNS.Array.ScalingStatusCode.ColZero">
            <summary>One of the columns was exactly zero</summary>
        </member>
        <member name="P:ShoNS.Array.MatrixScalingBase`1.Status">
            <summary>Returns the status of the scaling.</summary>
        </member>
        <member name="P:ShoNS.Array.MatrixScalingBase`1.RowCond">
            <summary>Returns the row condition number.</summary>
        </member>
        <member name="P:ShoNS.Array.MatrixScalingBase`1.ColCond">
            <summary>Returns the column condition number.</summary>
        </member>
        <member name="T:ShoNS.Array.MatrixScaling">
            <summary>This class wraps LAPACK's matrix scaling function, geequ, which is used to scale a system to improve its condition number.</summary>
        </member>
        <member name="M:ShoNS.Array.MatrixScaling.#ctor(ShoNS.Array.DoubleArray)">
            <summary>Equilibrates the input matrix to reduce its condition number.</summary>
            <remarks>This class is only available when fast math is enabled.</remarks>
        </member>
        <member name="P:ShoNS.Array.MatrixScaling.RowScaling">
            <summary>The row scaling.</summary>
        </member>
        <member name="P:ShoNS.Array.MatrixScaling.ColScaling">
            <summary>The column scaling.</summary>
        </member>
        <member name="M:ShoNS.Array.MatrixScalingFloat.#ctor(ShoNS.Array.FloatArray)">
            <summary>Equilibrates the input matrix to reduce its condition number.</summary>
            <remarks>This class is only available when fast math is enabled.</remarks>
        </member>
        <member name="P:ShoNS.Array.MatrixScalingFloat.RowScaling">
            <summary>The row scaling.</summary>
        </member>
        <member name="P:ShoNS.Array.MatrixScalingFloat.ColScaling">
            <summary>The column scaling.</summary>
        </member>
        <member name="T:ShoNS.Array.SparseBoolArray">
            <summary>This class implements functionality for a sparse array with boolean elements.</summary>
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.Zeros(System.Int32)">
            <summary>Creates a SparseBoolArray of the given length, filled with the value false.</summary>
            <param name="length">Vector length</param>        
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.Zeros(System.Int32,System.Int32)">
            <summary>Creates a SparseBoolArray of size0 x size1, filled with the value false.</summary>
            <param name="size0">Number of rows</param>
            <param name="size1">Number of columns</param>            
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.FromFile(System.String)">
            <summary>Creates an array from a file, using binary serialization.</summary>
            <param name="fileName" type="String">Name of file from which to create the array.</param>    
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.FromStream(System.IO.Stream)">
            <summary>Creates an array from a stream, using binary serialization.</summary>
            <param name="stream" type="System.IO.Stream">Stream from which to create the array.</param>  
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.From(ShoNS.Array.ArrayBase{System.Boolean})">
             <summary>Creates an array (deep copy) from another array.</summary>
            <param name="input">Array to copy</param>        
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.From(System.Collections.IEnumerable)">
            <summary>Creates a deep copy from an IEnumerable object</summary>
            <param name="input">Enumerable to copy</param>        
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.#ctor(System.Int32)">
            <summary>Creates a SparseBoolArray of the given length, filled with the value false.</summary>
            <param name="length">Vector length</param>        
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.#ctor(System.Int32,System.Int32)">
            <summary>Creates a SparseBoolArray of size0 x size1, filled with the value false.</summary>
            <param name="size0">Number of rows</param>
            <param name="size1">Number of columns</param>            
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.#ctor(ShoNS.Array.SparseBoolArray,ShoNS.Array.SparseStorageFormat)">
            <summary>Creates an array from the input array.</summary>
            <param name="inputArray" type="BoolArray">Input array from which to create the output array.</param>  
            <param name="storageFormat" type="SparseStorageFormat">Storage format of the output sparse array.</param>
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.#ctor(ShoNS.Array.BoolArray,ShoNS.Array.SparseStorageFormat)">
            <summary>Creates an array from the input array.</summary>
            <param name="inputArray" type="BoolArray">Input array from which to create the output array.</param>  
            <param name="storageFormat" type="SparseStorageFormat">Storage format of the output sparse array.</param>
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.#ctor(System.Int32,ShoNS.Array.SparseStorageFormat)">
            <summary>Creates a one-dimensional array.</summary>
            <param name="size" type="int">Number of elements in the array.</param> 
            <param name="storageFormat" type="SparseStorageFormat">Storage format of the sparse array.</param>
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.#ctor(System.Int32,System.Int32,ShoNS.Array.SparseStorageFormat)">
            <summary>Creates a two-dimensional array.</summary>
            <param name="size0" type="int">Number of rows in the array.</param> 
            <param name="size1" type="int">Number of columns in the array.</param> 
            <param name="storageFormat" type="SparseStorageFormat">Storage format of the sparse array.</param>
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.#ctor(System.Int32,System.Int32,System.Single,ShoNS.Array.SparseStorageFormat)">
            <summary>Creates a two-dimensional array.</summary>
            <param name="size0" type="int">Number of rows in the array.</param> 
            <param name="size1" type="int">Number of columns in the array.</param> 
            <param name="density" type="float">Expected approximate ratio of non-zeros to zeros.</param>
            <param name="storageFormat" type="SparseStorageFormat">Storage format of the sparse array.</param>
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.#ctor(System.Object,ShoNS.Array.SparseStorageFormat)">
            <summary>Creates an array from the contents of an object.</summary>
            <param name="inputObject" type="Object">Object from which to create the array.</param>  
            <param name="storageFormat" type="SparseStorageFormat">Storage format of the sparse array.</param>
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.#ctor(System.Collections.IList,System.Collections.IList)">
            <summary>Creates a vector from index and value lists</summary>
            <param name="index0List">Indices</param>
            <param name="valueList">Values</param>
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.#ctor(System.Int32,System.Collections.IList,System.Collections.IList)">
            <summary>Creates a vector from index and value lists</summary>
            <param name="size0">Number of elements</param>
            <param name="index0List">Indices</param>
            <param name="valueList">Values</param>
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.#ctor(System.Collections.IList,System.Collections.IList,System.Boolean)">
            <summary>Creates a vector from index and value lists</summary>
            <param name="index0List">Indices</param>
            <param name="valueList">Values</param>
            <param name="useFastInsert">If true, the list of indices is already sorted</param>
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.#ctor(System.Int32,System.Collections.IList,System.Collections.IList,System.Boolean)">
            <summary>Creates a vector from index and value lists</summary>
            <param name="size0"></param>
            <param name="index0List">Indices</param>
            <param name="valueList">Values</param>
            <param name="useFastInsert">If true, the list of indices is already sorted</param>
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.#ctor(System.Collections.IList,System.Collections.IList,System.Collections.IList)">
            <summary>Creates a matrix from index and value lists</summary>
            <param name="index0List">Row indices</param>
            <param name="index1List">Column indices</param>
            <param name="valueList">Values</param>
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.#ctor(System.Int32,System.Int32,System.Collections.IList,System.Collections.IList,System.Collections.IList)">
            <summary>Creates a matrix from index and value lists</summary>
            <param name="size0">Number of rows</param>
            <param name="size1">Number of columns</param>
            <param name="index0List">Row indices</param>
            <param name="index1List">Column indices</param>
            <param name="valueList">Values</param>
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.#ctor(System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Boolean)">
            <summary>Creates a matrix from index and value lists</summary>
            <param name="index0List">Row indices</param>
            <param name="index1List">Column indices</param>
            <param name="valueList">Values</param>
            <param name="useFastInsert">If true, the list of indices is already sorted</param>
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.#ctor(System.Int32,System.Int32,System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Boolean)">
            <summary>Creates a matrix from index and value lists</summary>
            <param name="size0">Number of rows</param>
            <param name="size1">Number of columns</param>
            <param name="index0List">Row indices</param>
            <param name="index1List">Column indices</param>
            <param name="valueList">Values</param>
            <param name="useFastInsert">If true, the list of indices is already sorted</param>
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.#ctor(System.String,ShoNS.Array.SparseFileFormat,System.Boolean,ShoNS.Array.SparseStorageFormat)">
            <summary>Creates a matrix from index and value lists</summary>
            <param name="fileName">Name of file</param>
            <param name="fileFormat">File format</param>
            <param name="zeroIndexing">If true, uses zero-based indexing</param>
            <param name="storageFormat">Storage format</param>
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.AlongDim(System.Int32)">
            <summary>Returns an IEnumerable object that can be used to iterate along a dimension of an array.</summary>
            <param name="dim">Along which dimension</param>        
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.RowElements(System.Int32)">
            <summary>Returns an IEnumerable object that can be used to iterate over the elements of a given row.</summary>
            <param name="rowIndex" type="int">The index of the row to return.</param>
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.ColumnElements(System.Int32)">
            <summary>Returns an IEnumerable object that can be used to iterate over the elements of a given column.</summary>
            <param name="colIndex" type="int">The index of the row to return.</param>
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.TransposeDeep">
            <summary>Transposes the 1st and 2nd dimensions of the array, making a deep copy.</summary>
            <returns>Returns a deep copy of transposed array.</returns>
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.Transpose">
            <summary>Transposes the 1st and 2nd dimensions of the array, making a shallow copy.</summary>
            <returns>Returns a shallow copy of transposed array.</returns>
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.CopyDeep">
            <summary>Makes a deep copy of the array; the new array has its own storage.</summary>
            <returns>Returns a deep copy the array.</returns>
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.CopyShallow">
            <summary>Makes a shallow copy of the array; the new array shares its storage with the original array.</summary>
            <returns>Returns a shallow copy the array.</returns>
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.ToVector">
            <summary>Makes a vector, copying the elements in row-column order.</summary>
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.GetSlice(System.Int32,System.Int32)">
            <summary>Creates a subarray (shallow copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndexInclusive" type="int">Maximum index (inclusive) in the slice.</param>  
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.GetSliceDeep(System.Int32,System.Int32)">
            <summary>Creates a subarray (deep copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndexInclusive" type="int">Maximum index (inclusive) in the slice.</param>  
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.GetSlice(System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (shallow copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndexInclusive" type="int">Maximum index (inclusive) in the slice.</param>  
            <param name="step">Step</param>
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.GetSliceDeep(System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (deep copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndexInclusive" type="int">Maximum index (inclusive) in the slice.</param>  
            <param name="step">Step</param>
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.GetSlice(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (shallow copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRowInclusive" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastColInclusive" type="int">Maximum column number (inclusive) in the slice.</param>          
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.GetSliceDeep(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (deep copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRowInclusive" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastColInclusive" type="int">Maximum column number (inclusive) in the slice.</param>          
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.GetSliceDeep(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (deep copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRowInclusive" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="stepRow" type="int">Row step size.</param> 
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastColInclusive" type="int">Maximum column number (inclusive) in the slice.</param>          
            <param name="stepCol" type="int">Column step size.</param> 
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.GetSlice(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (shallow copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRowInclusive" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="stepRow" type="int">Row step size.</param> 
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastColInclusive" type="int">Maximum column number (inclusive) in the slice.</param>          
            <param name="stepCol" type="int">Column step size.</param> 
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.GetSliceDeep(ShoNS.Array.Slice[])">
            <summary>Creates a subarray (deep copy).</summary>
            <param name="slices">Slices to get</param>        
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.GetSlice(ShoNS.Array.Slice[])">
            <summary>Creates a subarray (shallow copy).</summary>
            <param name="slices">Slices to get</param>        
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.GetArrayEntries(System.Collections.Generic.IEnumerable{ShoNS.Array.IArrayEntry})">
            <summary>Creates an array (deep copy) from the array entries.</summary>
            <param name="arrayEntries">Enumerable of array entries to get</param>   
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.GetColSparse(System.Int32)">
            <summary>Returns a column in a sparse vector.</summary>
            <param name="colIndex" type="int">The index of the column to retrieve.</param>
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.GetColsSparse(System.Collections.Generic.IList{System.Int32})">
            <summary>Returns one or more columns in a new sparse array.</summary>
            <param name="colsToGet">List of column indices to retrieve.</param>
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.GetRowSparse(System.Int32)">
            <summary>Returns a row in a sparse vector.</summary>
            <param name="rowIndex" type="int">The index of the row to retrieve.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.GetRowsSparse(System.Collections.Generic.IList{System.Int32})">
            <summary>Returns one or more rows in a new sparse array.</summary>
            <param name="rowsToGet">The row indices to retrieve</param>
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.AccumulateValue(System.Int32,System.Int32,System.Boolean)">
            <summary>Used to add or change an element in a sparse array.</summary>
            <param name="rowIndex" type="int">The row index of the element.</param>         
            <param name="colIndex" type="int">The column index of the element.</param>         
            <param name="value" type="Object">The value to set.</param>         
            <remarks>The value is not saved to the array until CommitValues is called.</remarks>
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.AccumulateValue(System.Int32,System.Boolean)">
            <summary>Used to add or change an element in a 1D sparse array.</summary>
            <param name="index" type="int">The index of the element.</param>         
            <param name="value" type="Object">The value to set.</param>         
            <remarks>The value is not saved to the array until CommitValues is called.</remarks>
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.ColumnLength(System.Int32)">
            <summary>Returns the number of set items in the given column.</summary>
            <param name="colIndex" type="int">The index of the column to retrieve.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.CommitValues">
            <summary>Commits the values added by AccumulateValue.</summary>
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.GetCellIndex(System.Int32,System.Int32)">
            <summary>Returns the cell index corresponding to the given array indices, returns -1 for unset elements.</summary>
            <param name="rowIndex">The index of the row to retrieve</param>
            <param name="colIndex">The index of the column to retrieve</param>          
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.GetCellValue(System.Int32)">
            <summary>Returns the value of the array at the given cell index.</summary>
            <param name="cellIndex" type="int">The index of the cell to retrieve.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.RowLength(System.Int32)">
            <summary>Returns the number of set items in the given row.</summary>
            <param name="rowIndex" type="int">The index of the row to retrieve.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.RowElementColumns(System.Int32)">
            <summary>Returns a list of the column indices of the set items in the given row.</summary>
            <param name="rowIndex">Row index</param>            
            <exception cref="T:System.NotImplementedException">Thrown when array not in CSR format</exception>
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.RowElementValues(System.Int32)">
            <summary>Returns a list of the values of the set items in the given row.</summary>
            <param name="rowIndex">Row index</param>            
            <exception cref="T:System.NotImplementedException">Thrown when array not in CSR format</exception>
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.ColumnElementRows(System.Int32)">
            <summary>Returns a list of the row indices of the set items in the given column.</summary>
            <param name="colIndex">Column index</param>            
            <exception cref="T:System.NotImplementedException">Thrown when array not in CSC format</exception>
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.ColumnElementValues(System.Int32)">
            <summary>Returns a list of the values of the set items in the given column.</summary>
            <param name="colIndex">Column index</param>            
            <exception cref="T:System.NotImplementedException">Thrown when array not in CSC format</exception>
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.SwapRows(System.Int32,System.Int32)">
            <summary>Swaps the two rows.</summary>
            <param name="rowIndex1" type="int">The index of the first row to swap.</param>         
            <param name="rowIndex2" type="int">The index of the second row to swap.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.RemoveZeros">
            <summary>Removes zero entries.</summary>
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.ImportFromList(System.Collections.IList,System.Collections.IList)">
            <summary>Loads the 1D sparse array from a pair of lists.</summary>
            <param name="index0List" type="IList">The list of indices in Coordinate format.</param>         
            <param name="inputValueList" type="IList">The list of corresponding values.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.ImportFromList(System.Collections.IList,System.Collections.IList,System.Boolean)">
            <summary>Loads the 1D sparse array from a pair of lists in specific sort-order.</summary>
            <param name="index0List" type="IList">The list of indices.</param>         
            <param name="inputValueList" type="IList">The list of corresponding values.</param>         
            <param name="sortedInput" type="bool">The input list is sorted.</param>     
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.ImportFromList(System.Collections.IList,System.Collections.IList,System.Collections.IList)">
            <summary>Loads the 2D sparse array from a triplet of lists.</summary>
            <param name="index0List" type="IList">The list of row indices in Coordinate format.</param> 
            <param name="index1List" type="IList">The list of corresponding column indices in Coordinate format.</param> 
            <param name="inputValueList" type="IList">The list of corresponding values.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.ImportFromList(System.Collections.IList,System.Collections.IList,System.Collections.IList,ShoNS.Array.SortOrder)">
            <summary>Loads the 2D sparse array from a triplet of lists in specific sort-order.</summary>
            <param name="index0List" type="IList">The first list of indices.</param>         
            <param name="index1List" type="IList">The second list of indices.</param>         
            <param name="inputValueList" type="IList">The list of corresponding values.</param>         
            <param name="inputOrder" type="SortOrder">The linear sort order of input lists.</param> 
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.ExportToList(System.Collections.IList@,System.Collections.IList@)">
            <summary>Constructs pair of lists from the 1D sparse array.</summary>
            <param name="index0List" type="IList">The list of indices in Coordinate format.</param>         
            <param name="outputValueList" type="IList">The list of corresponding values.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.ExportToList(System.Collections.IList@,System.Collections.IList@,System.Collections.IList@)">
            <summary>Constructs triplet of lists from the 2D sparse array.</summary>
            <param name="index0List" type="IList">The list of row indices in Coordinate format.</param> 
            <param name="index1List" type="IList">The list of corresponding column indices in Coordinate format.</param> 
            <param name="outputValueList" type="IList">The list of corresponding values.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.ExportToList(System.Collections.IList@,System.Collections.IList@,System.Collections.IList@,ShoNS.Array.SortOrder)">
            <summary>Constructs triplet of lists in specific sort-order from the 2D sparse array.</summary>
            <param name="index0List" type="IList">The first list of indices.</param>         
            <param name="index1List" type="IList">The second list of indices.</param>         
            <param name="outputValueList" type="IList">The list of corresponding values.</param>         
            <param name="outputOrder" type="SortOrder">The linear sort order of output lists.</param> 
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.ExportToLists(System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Boolean}@)">
            <summary>Constructs pair of lists from the 1D sparse array.</summary>
            <param name="index0List">The list of indices in Coordinate format.</param>         
            <param name="outputValueList">The list of corresponding values.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.ExportToLists(System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Boolean}@)">
            <summary>Constructs triplet of lists from the 2D sparse array.</summary>
            <param name="index0List">The list of row indices in Coordinate format.</param> 
            <param name="index1List">The list of corresponding column indices in Coordinate format.</param> 
            <param name="outputValueList">The list of corresponding values.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.ExportToLists(System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Boolean}@,ShoNS.Array.SortOrder)">
            <summary>Constructs triplet of lists in specific sort-order from the 2D sparse array.</summary>
            <param name="index0List">The first list of indices.</param>         
            <param name="index1List">The second list of indices.</param>         
            <param name="outputValueList">The list of corresponding values.</param>         
            <param name="outputOrder">The linear sort order of output lists.</param> 
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.ImportFromFile(System.String,ShoNS.Array.SparseFileFormat,System.Boolean)">
            <summary>Initialize sparse array from file stored in COO format with default delimiter (space or comma) and specific indexing (0 or 1).</summary>
            <param name="fileName" type="string">The name of input file.</param>
            <param name="fileFormat" type="SparseFileFormat">Input file format: {MM, COOH, MTL, HB}.</param> 
            <param name="zeroIndexing" type="bool">File data indexing is 0 based.</param> 
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.ExportToFile(System.String,ShoNS.Array.SparseFileFormat,System.Boolean)">
            <summary>Create a file in COO format with specific data indexing (0 or 1) from sparse object.</summary>
            <param name="fileName" type="string">The name of input file.</param>
            <param name="fileFormat" type="SparseFileFormat">Input file format: {MM, COOH, MTL, HB}.</param> 
            <param name="zeroIndexing" type="bool">File data indexing is 0 based.</param> 
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.SameValues(ShoNS.Array.BoolArray)">
            <summary>Determines if two arrays are the same.</summary>
            <param name="arrayToCompare">Array to compare</param>
            <returns>true if the arrays are the same; false if different.</returns>
        </member>
        <member name="M:ShoNS.Array.SparseBoolArray.SameValues(ShoNS.Array.SparseBoolArray)">
            <summary>Determines if two arrays are the same.</summary>
            <param name="arrayToCompare">Array to compare</param>        
            <returns>true if the arrays are the same; false if different.</returns>
        </member>
        <member name="P:ShoNS.Array.SparseBoolArray.Rows">
            <summary>Returns an IEnumerable object that can be used to iterate over the rows of the matrix.</summary>
        </member>
        <member name="P:ShoNS.Array.SparseBoolArray.Cols">
            <summary>Returns an IEnumerable object that can be used to iterate over the columns of the matrix.</summary>
        </member>
        <member name="P:ShoNS.Array.SparseBoolArray.T">
            <summary>Transposes the 1st and 2nd dimensions of the array, making a deep copy.</summary>
            <returns>Returns a deep copy of transposed array.</returns>
        </member>
        <member name="P:ShoNS.Array.SparseBoolArray.Diagonal">
            <summary>Returns the main diagonal of the array as a vectory or sets the main diagonal to the inputObject vector.</summary>
        </member>
        <member name="P:ShoNS.Array.SparseBoolArray.CountCells">
            <summary>Returns the number of set items in the array.</summary>
        </member>
        <member name="P:ShoNS.Array.SparseBoolArray.StorageFormat">
            <summary>Returns the storage format of the sparse array.</summary>
        </member>
        <member name="P:ShoNS.Array.SparseBoolArray.NullValue">
            <summary>Returns the null (unset) value for the array.</summary>
        </member>
        <member name="T:ShoNS.Array.SparseCholesky">
            <summary>This class performs a Cholesky decomposition for a sparse double-precision floating point array.</summary>
        </member>
        <member name="M:ShoNS.Array.SparseCholesky.#ctor(ShoNS.Array.SparseDoubleArray)">
            <summary>Compute the Cholesky decomposition for the input array.</summary>
        </member>
        <member name="M:ShoNS.Array.SparseCholesky.SymFactor">
            <summary></summary>
        </member>
        <member name="M:ShoNS.Array.SparseCholesky.Solve(ShoNS.Array.DoubleArray)">
            <summary>Solves the system: A*x = B</summary>
            <param name="B">Array on the right side</param>
            <returns>The solution, as a DoubleArray.</returns>         
        </member>
        <member name="T:ShoNS.Array.SparseLU">
            <summary>This class performs an LU-decomposition for a sparse double-precision floating point array.</summary>
        </member>
        <member name="M:ShoNS.Array.SparseLU.#ctor(ShoNS.Array.SparseDoubleArray)">
            <summary>Compute the LU decomposition for the input array.</summary>
        </member>
        <member name="M:ShoNS.Array.SparseLU.SymFactor">
            <summary></summary>
        </member>
        <member name="M:ShoNS.Array.SparseLU.Solve(ShoNS.Array.DoubleArray)">
            <summary>Solves the system: A*x = B</summary>
            <param name="B">Array on the right side</param>
        </member>
        <member name="T:ShoNS.Array.SparseObjArray">
            <summary>This class implements functionality for a sparse array with System.Object elements.</summary>
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.Zeros(System.Int32)">
            <summary>Creates a SparseObjArray of the given length, filled with nulls.</summary>
            <param name="length">Vector length</param>        
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.Zeros(System.Int32,System.Int32)">
            <summary>Creates a SparseObjArray of size0 x size1, filled with nulls.</summary>
            <param name="size0">Number of rows</param>
            <param name="size1">Number of columns</param>           
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.FromFile(System.String)">
            <summary>Creates an array from a file, using binary serialization.</summary>
            <param name="fileName" type="String">Name of file from which to create the array.</param>    
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.FromStream(System.IO.Stream)">
            <summary>Creates an array from a stream, using binary serialization.</summary>
            <param name="stream" type="System.IO.Stream">Stream from which to create the array.</param>  
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.From(ShoNS.Array.ArrayBase{System.Object})">
             <summary>Creates an array (deep copy) from another array.</summary>
            <param name="input">Array to copy</param>        
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.From(System.Collections.IEnumerable)">
            <summary>Creates a deep copy from an IEnumerable object</summary>
            <param name="input">Enumerable to copy</param>
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.#ctor(System.Int32)">
            <summary>Creates a SparseObjArray of the given length, filled with nulls.</summary>
            <param name="length">Vector length</param>
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.#ctor(System.Int32,System.Int32)">
            <summary>Creates a SparseObjArray of size0 x size1, filled with nulls.</summary>
            <param name="size0">Number of rows</param>
            <param name="size1">Number of columns</param>    
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.#ctor(ShoNS.Array.ObjArray,ShoNS.Array.SparseStorageFormat)">
            <summary>Creates an array from the input array.</summary>
            <param name="inputArray" type="ObjArray">Input array from which to create the output array.</param>  
            <param name="storageFormat" type="SparseStorageFormat">Storage format of the output sparse array.</param>
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.#ctor(System.Int32,ShoNS.Array.SparseStorageFormat)">
            <summary>Creates a one-dimensional array.</summary>
            <param name="size" type="int">Number of elements in the array.</param> 
            <param name="storageFormat" type="SparseStorageFormat">Storage format of the sparse array.</param>
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.#ctor(System.Int32,System.Int32,ShoNS.Array.SparseStorageFormat)">
            <summary>Creates a two-dimensional array.</summary>
            <param name="size0" type="int">Number of rows in the array.</param> 
            <param name="size1" type="int">Number of columns in the array.</param> 
            <param name="storageFormat" type="SparseStorageFormat">Storage format of the sparse array.</param>
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.#ctor(System.Int32,System.Int32,System.Single,ShoNS.Array.SparseStorageFormat)">
            <summary>Creates a two-dimensional array.</summary>
            <param name="size0" type="int">Number of rows in the array.</param> 
            <param name="size1" type="int">Number of columns in the array.</param> 
            <param name="density" type="float">Expected approximate ratio of non-zeros to zeros.</param>
            <param name="storageFormat" type="SparseStorageFormat">Storage format of the sparse array.</param>
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.#ctor(System.Object,ShoNS.Array.SparseStorageFormat)">
            <summary>Creates an array from the contents of an object.</summary>
            <param name="inputObject" type="Object">Object from which to create the array.</param>  
            <param name="storageFormat" type="SparseStorageFormat">Storage format of the sparse array.</param>
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.#ctor(System.Collections.IList,System.Collections.IList)">
            <summary>Creates a vector from index and value lists</summary>
            <param name="index0List">Indices</param>
            <param name="valueList">Values</param>
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.#ctor(System.Int32,System.Collections.IList,System.Collections.IList)">
            <summary>Creates a vector from index and value lists</summary>
            <param name="size0">Number of elements</param>
            <param name="index0List">Indices</param>
            <param name="valueList">Values</param>
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.#ctor(System.Collections.IList,System.Collections.IList,System.Boolean)">
            <summary>Creates a vector from index and value lists</summary>
            <param name="index0List">Indices</param>
            <param name="valueList">Values</param>
            <param name="useFastInsert">If true, the list of indices is already sorted</param>
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.#ctor(System.Int32,System.Collections.IList,System.Collections.IList,System.Boolean)">
            <summary>Creates a vector from index and value lists</summary>
            <param name="size0"></param>
            <param name="index0List">Indices</param>
            <param name="valueList">Values</param>
            <param name="useFastInsert">If true, the list of indices is already sorted</param>
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.#ctor(System.Collections.IList,System.Collections.IList,System.Collections.IList)">
            <summary>Creates a matrix from index and value lists</summary>
            <param name="index0List">Row indices</param>
            <param name="index1List">Column indices</param>
            <param name="valueList">Values</param>
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.#ctor(System.Int32,System.Int32,System.Collections.IList,System.Collections.IList,System.Collections.IList)">
            <summary>Creates a matrix from index and value lists</summary>
            <param name="size0">Number of rows</param>
            <param name="size1">Number of columns</param>
            <param name="index0List">Row indices</param>
            <param name="index1List">Column indices</param>
            <param name="valueList">Values</param>
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.#ctor(System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Boolean)">
            <summary>Creates a matrix from index and value lists</summary>
            <param name="index0List">Row indices</param>
            <param name="index1List">Column indices</param>
            <param name="valueList">Values</param>
            <param name="useFastInsert">If true, the list of indices is already sorted</param>
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.#ctor(System.Int32,System.Int32,System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Boolean)">
            <summary>Creates a matrix from index and value lists</summary>
            <param name="size0">Number of rows</param>
            <param name="size1">Number of columns</param>
            <param name="index0List">Row indices</param>
            <param name="index1List">Column indices</param>
            <param name="valueList">Values</param>
            <param name="useFastInsert">If true, the list of indices is already sorted</param>
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.#ctor(System.String,ShoNS.Array.SparseFileFormat,System.Boolean,ShoNS.Array.SparseStorageFormat)">
            <summary>Creates a matrix from index and value lists</summary>
            <param name="fileName">Name of file</param>
            <param name="fileFormat">File format</param>
            <param name="zeroIndexing">If true, uses zero-based indexing</param>
            <param name="storageFormat">Storage format</param>
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.AlongDim(System.Int32)">
            <summary>Returns an IEnumerable object that can be used to iterate along a dimension of an array.</summary>
            <param name="dim">Along which dimension</param>
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.TransposeDeep">
            <summary>Transposes the 1st and 2nd dimensions of the array, making a deep copy.</summary>
            <returns>Returns a deep copy of transposed array.</returns>
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.Transpose">
            <summary>Transposes the 1st and 2nd dimensions of the array, making a shallow copy.</summary>
            <returns>Returns a shallow copy of transposed array.</returns>
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.CopyDeep">
            <summary>Makes a deep copy of the array; the new array has its own storage.</summary>
            <returns>Returns a deep copy the array.</returns>
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.CopyShallow">
            <summary>Makes a shallow copy of the array; the new array shares its storage with the original array.</summary>
            <returns>Returns a shallow copy the array.</returns>
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.ToVector">
            <summary>Makes a vector, copying the elements in row-column order.</summary>
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.GetSlice(System.Int32,System.Int32)">
            <summary>Creates a subarray (shallow copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndexInclusive" type="int">Maximum index (inclusive) in the slice.</param>  
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.GetSliceDeep(System.Int32,System.Int32)">
            <summary>Creates a subarray (deep copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndexInclusive" type="int">Maximum index (inclusive) in the slice.</param>  
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.GetSlice(System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (shallow copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndexInclusive" type="int">Maximum index (inclusive) in the slice.</param>  
            <param name="step">Step</param>
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.GetSliceDeep(System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (deep copy).</summary>
            <param name="firstIndex" type="int">First index in the slice.</param>  
            <param name="lastIndexInclusive" type="int">Maximum index (inclusive) in the slice.</param>  
            <param name="step">Step</param>
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.GetSlice(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (shallow copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRowInclusive" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastColInclusive" type="int">Maximum column number (inclusive) in the slice.</param>          
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.GetSliceDeep(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (deep copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRowInclusive" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastColInclusive" type="int">Maximum column number (inclusive) in the slice.</param>          
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.GetSliceDeep(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (deep copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRowInclusive" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="stepRow" type="int">Row step size.</param> 
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastColInclusive" type="int">Maximum column number (inclusive) in the slice.</param>          
            <param name="stepCol" type="int">Column step size.</param> 
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.GetSlice(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a subarray (shallow copy).</summary>
            <param name="firstRow" type="int">First row number in the slice.</param>  
            <param name="lastRowInclusive" type="int">Maximum row number (inclusive) in the slice.</param>  
            <param name="stepRow" type="int">Row step size.</param> 
            <param name="firstCol" type="int">First column number in the slice.</param>  
            <param name="lastColInclusive" type="int">Maximum column number (inclusive) in the slice.</param>          
            <param name="stepCol" type="int">Column step size.</param> 
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.GetSliceDeep(ShoNS.Array.Slice[])">
            <summary>Creates a subarray (deep copy).</summary>
            <param name="slices">Slices to get</param>
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.GetSlice(ShoNS.Array.Slice[])">
            <summary>Creates a subarray (shallow copy).</summary>
            <param name="slices">Slices to get</param>
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.GetArrayEntries(System.Collections.Generic.IEnumerable{ShoNS.Array.IArrayEntry})">
            <summary>Creates an array (deep copy) from the array entries.</summary>
            <param name="arrayEntries">Enumerable of array entries to get</param>   
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.GetColSparse(System.Int32)">
            <summary>Returns a column in a sparse vector.</summary>
            <param name="colIndex" type="int">The index of the column to retrieve.</param>
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.GetColsSparse(System.Collections.Generic.IList{System.Int32})">
            <summary>Returns one or more columns in a new sparse array.</summary>
            <param name="colsToGet">List of column indices to retrieve.</param>
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.GetRowSparse(System.Int32)">
            <summary>Returns a row in a sparse vector.</summary>
            <param name="rowIndex" type="int">The index of the row to retrieve.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.GetRowsSparse(System.Collections.Generic.IList{System.Int32})">
            <summary>Returns one or more rows in a new sparse array.</summary>
            <param name="rowsToGet">List of row indices to retrieve</param>     
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.AccumulateValue(System.Int32,System.Int32,System.Object)">
            <summary>Used to add or change an element in a sparse array.</summary>
            <param name="rowIndex" type="int">The row index of the element.</param>         
            <param name="colIndex" type="int">The column index of the element.</param>         
            <param name="value" type="Object">The value to set.</param>         
            <remarks>The value is not saved to the array until CommitValues is called.</remarks>
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.AccumulateValue(System.Int32,System.Object)">
            <summary>Used to add or change an element in a 1D sparse array.</summary>
            <param name="index" type="int">The index of the element.</param>         
            <param name="value" type="Object">The value to set.</param>         
            <remarks>The value is not saved to the array until CommitValues is called.</remarks>
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.ColumnLength(System.Int32)">
            <summary>Returns the number of set items in the given column.</summary>
            <param name="colIndex" type="int">The index of the column to retrieve.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.CommitValues">
            <summary>Commits the values added by AccumulateValue.</summary>
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.GetCellIndex(System.Int32,System.Int32)">
            <summary>Returns the cell index corresponding to the given array indices, returns -1 for unset elements.</summary>
            <param name="rowIndex">The index of the row to retrieve</param>
            <param name="colIndex">The index of the column to retrieve</param>          
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.GetCellValue(System.Int32)">
            <summary>Returns the value of the array at the given cell index.</summary>
            <param name="cellIndex" type="int">The index of the cell to retrieve.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.RowLength(System.Int32)">
            <summary>Returns the number of set items in the given row.</summary>
            <param name="rowIndex" type="int">The index of the row to retrieve.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.RowElementColumns(System.Int32)">
            <summary>Returns a list of the column indices of the set items in the given row.</summary>
            <param name="rowIndex">Row index</param>            
            <exception cref="T:System.NotImplementedException">Thrown when array not in CSR format</exception>
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.RowElementValues(System.Int32)">
            <summary>Returns a list of the values of the set items in the given row.</summary>
            <param name="rowIndex">Row index</param>            
            <exception cref="T:System.NotImplementedException">Thrown when array not in CSR format</exception>
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.ColumnElementRows(System.Int32)">
            <summary>Returns a list of the row indices of the set items in the given column.</summary>
            <param name="colIndex">Column index</param>            
            <exception cref="T:System.NotImplementedException">Thrown when array not in CSC format</exception>
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.ColumnElementValues(System.Int32)">
            <summary>Returns a list of the values of the set items in the given column.</summary>
            <param name="colIndex">Column index</param>            
            <exception cref="T:System.NotImplementedException">Thrown when array not in CSC format</exception>
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.SwapRows(System.Int32,System.Int32)">
            <summary>Swaps the two rows.</summary>
            <param name="rowIndex1" type="int">The index of the first row to swap.</param>         
            <param name="rowIndex2" type="int">The index of the second row to swap.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.RemoveZeros">
            <summary>Removes zero entries.</summary>
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.ImportFromList(System.Collections.IList,System.Collections.IList)">
            <summary>Loads the 1D sparse array from a pair of lists.</summary>
            <param name="index0List" type="IList">The list of indices in Coordinate format.</param>         
            <param name="inputValueList" type="IList">The list of corresponding values.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.ImportFromList(System.Collections.IList,System.Collections.IList,System.Boolean)">
            <summary>Loads the 1D sparse array from a pair of lists in specific sort-order.</summary>
            <param name="index0List" type="IList">The list of indices.</param>         
            <param name="inputValueList" type="IList">The list of corresponding values.</param>         
            <param name="sortedInput" type="bool">The inputObject list is sorted.</param>     
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.ImportFromList(System.Collections.IList,System.Collections.IList,System.Collections.IList)">
            <summary>Loads the 2D sparse array from a triplet of lists.</summary>
            <param name="index0List" type="IList">The list of row indices in Coordinate format.</param> 
            <param name="index1List" type="IList">The list of corresponding column indices in Coordinate format.</param> 
            <param name="inputValueList" type="IList">The list of corresponding values.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.ImportFromList(System.Collections.IList,System.Collections.IList,System.Collections.IList,ShoNS.Array.SortOrder)">
            <summary>Loads the 2D sparse array from a triplet of lists in specific sort-order.</summary>
            <param name="index0List" type="IList">The first list of indices.</param>         
            <param name="index1List" type="IList">The second list of indices.</param>         
            <param name="inputValueList" type="IList">The list of corresponding values.</param>         
            <param name="inputOrder" type="SortOrder">The linear sort order of inputObject lists.</param> 
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.ExportToList(System.Collections.IList@,System.Collections.IList@)">
            <summary>Constructs pair of lists from the 1D sparse array.</summary>
            <param name="index0List" type="IList">The list of indices in Coordinate format.</param>         
            <param name="outputValueList" type="IList">The list of corresponding values.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.ExportToList(System.Collections.IList@,System.Collections.IList@,System.Collections.IList@)">
            <summary>Constructs triplet of lists from the 2D sparse array.</summary>
            <param name="index0List" type="IList">The list of row indices in Coordinate format.</param> 
            <param name="index1List" type="IList">The list of corresponding column indices in Coordinate format.</param> 
            <param name="outputValueList" type="IList">The list of corresponding values.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.ExportToList(System.Collections.IList@,System.Collections.IList@,System.Collections.IList@,ShoNS.Array.SortOrder)">
            <summary>Constructs triplet of lists in specific sort-order from the 2D sparse array.</summary>
            <param name="index0List" type="IList">The first list of indices.</param>         
            <param name="index1List" type="IList">The second list of indices.</param>         
            <param name="outputValueList" type="IList">The list of corresponding values.</param>         
            <param name="outputOrder" type="SortOrder">The linear sort order of output lists.</param> 
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.ExportToLists(System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Object}@)">
            <summary>Constructs pair of lists from the 1D sparse array.</summary>
            <param name="index0List">The list of indices in Coordinate format.</param>         
            <param name="outputValueList">The list of corresponding values.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.ExportToLists(System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Object}@)">
            <summary>Constructs triplet of lists from the 2D sparse array.</summary>
            <param name="index0List">The list of row indices in Coordinate format.</param> 
            <param name="index1List">The list of corresponding column indices in Coordinate format.</param> 
            <param name="outputValueList">The list of corresponding values.</param>         
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.ExportToLists(System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Object}@,ShoNS.Array.SortOrder)">
            <summary>Constructs triplet of lists in specific sort-order from the 2D sparse array.</summary>
            <param name="index0List">The first list of indices.</param>         
            <param name="index1List">The second list of indices.</param>         
            <param name="outputValueList">">The list of corresponding values.</param>         
            <param name="outputOrder">The linear sort order of output lists.</param> 
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.ImportFromFile(System.String,ShoNS.Array.SparseFileFormat,System.Boolean)">
            <summary>Initialize sparse array from file stored in COO format with default delimiter (space or comma) and specific indexing (0 or 1).</summary>
            <param name="fileName" type="string">The name of inputObject file.</param>
            <param name="fileFormat" type="SparseFileFormat">Input file format: {MM, COOH, MTL, HB}.</param> 
            <param name="zeroIndexing" type="bool">File data indexing is 0 based.</param> 
        </member>
        <member name="M:ShoNS.Array.SparseObjArray.ExportToFile(System.String,ShoNS.Array.SparseFileFormat,System.Boolean)">
            <summary>Create a file in COO format with specific data indexing (0 or 1) from sparse object.</summary>
            <param name="fileName" type="string">The name of inputObject file.</param>
            <param name="fileFormat" type="SparseFileFormat">Input file format: {MM, COOH, MTL, HB}.</param> 
            <param name="zeroIndexing" type="bool">File data indexing is 0 based.</param> 
        </member>
        <member name="P:ShoNS.Array.SparseObjArray.T">
            <summary>Transposes the 1st and 2nd dimensions of the array, making a deep copy.</summary>
            <returns>Returns a deep copy of transposed array.</returns>
        </member>
        <member name="P:ShoNS.Array.SparseObjArray.CountCells">
            <summary>Returns the number of set items in the array.</summary>
        </member>
        <member name="P:ShoNS.Array.SparseObjArray.StorageFormat">
            <summary>Returns the storage format of the sparse array.</summary>
        </member>
        <member name="P:ShoNS.Array.SparseObjArray.NullValue">
            <summary>Returns the null (unset) value for the array.</summary>
        </member>
        <member name="T:ShoNS.Array.SingularValsBase`1">
            <summary>Singular values base class</summary>
        </member>
        <member name="M:ShoNS.Array.SingularValsBase`1.Rank">
            <summary>Computes the array rank using the default toleranace.</summary>
        </member>
        <member name="M:ShoNS.Array.SingularValsBase`1.Rank(`0)">
            <summary>Computes the array rank using the given toleranace.</summary>
            <param name="tolerance">Tolerance to use</param>
        </member>
        <member name="M:ShoNS.Array.SingularValsBase`1.TwoNorm">
            <summary>Computes the array 2-norm.</summary>
        </member>
        <member name="T:ShoNS.Array.SingularVals">
            <summary>This class computes the singular values for a double floating point array.</summary>
        </member>
        <member name="M:ShoNS.Array.SingularVals.#ctor(ShoNS.Array.DoubleArray)">
            <summary>Computes the singular values for the input array.</summary>
            <param name="inputMatrix">Matrix for which to compute the singular values</param>
        </member>
        <member name="P:ShoNS.Array.SingularVals.D">
            <summary>The singular values.</summary>
        </member>
        <member name="T:ShoNS.Array.SingularValsFloat">
            <summary>This class computes the singular values for a single floating point array.</summary>
        </member>
        <member name="M:ShoNS.Array.SingularValsFloat.#ctor(ShoNS.Array.FloatArray)">
            <summary>Computes the singular values for the input array.</summary>
            <param name="inputMatrix">Matrix for which to compute the singular values</param>        
        </member>
        <member name="P:ShoNS.Array.SingularValsFloat.D">
            <summary>The singular values.</summary>
        </member>
        <member name="T:ShoNS.Array.SVDBase`1">
            <summary>The SVD base class.</summary>
        </member>
        <member name="M:ShoNS.Array.SVDBase`1.ConditionNumber">
            <summary>Computes the condition number.</summary>
        </member>
        <member name="M:ShoNS.Array.SVDBase`1.Rank">
            <summary>Computes the array rank using the default toleranace.</summary>
        </member>
        <member name="M:ShoNS.Array.SVDBase`1.Rank(`0)">
            <summary>Computes the array rank using the given toleranace.</summary>
            <param name="tolerance">Tolerance to use</param>
        </member>
        <member name="M:ShoNS.Array.SVDBase`1.TwoNorm">
            <summary>Computes the array 2-norm.</summary>
        </member>
        <member name="T:ShoNS.Array.SVD">
            <summary>This class computes the SVD decomposition for a double floating point array.</summary>
        </member>
        <member name="M:ShoNS.Array.SVD.#ctor(ShoNS.Array.DoubleArray)">
            <summary>Computes the SVD decomposition for the input array.</summary>
            <param name="inputMatrix">Matrix to decompose</param>        
        </member>
        <member name="M:ShoNS.Array.SVD.PseudoInverse">
            <summary>Computes the pseudo-inverse of the array using the default threshold.</summary>
        </member>
        <member name="M:ShoNS.Array.SVD.PseudoInverse(System.Double)">
             <summary>Computes the pseudo-inverse of the array using the given threshold.</summary>
            <param name="thresh">Threshold to use</param>        
        </member>
        <member name="M:ShoNS.Array.SVD.Solve(ShoNS.Array.DoubleArray)">
            <summary>Computes the minimum-norm least-squares solution for the system: A*x = B.</summary>
            <param name="matrixRight" type="DoubleArray">Array on the right side of the system (B).</param>
        </member>
        <member name="P:ShoNS.Array.SVD.U">
            <summary>The unitary array U.</summary>
        </member>
        <member name="P:ShoNS.Array.SVD.V">
            <summary>The unitary array V.</summary>
        </member>
        <member name="P:ShoNS.Array.SVD.D">
            <summary>The singular values.</summary>
        </member>
        <member name="T:ShoNS.Array.SVDFloat">
            <summary>This class computes the SVD decomposition for a single floating point array.</summary>
        </member>
        <member name="M:ShoNS.Array.SVDFloat.#ctor(ShoNS.Array.FloatArray)">
            <summary>Computes the SVD decomposition for the input array.</summary>
            <param name="inputMatrix">Matrix to decompose</param>         
        </member>
        <member name="M:ShoNS.Array.SVDFloat.PseudoInverse">
            <summary>Computes the pseudo-inverse of the array using the default threshold.</summary>
        </member>
        <member name="M:ShoNS.Array.SVDFloat.PseudoInverse(System.Single)">
             <summary>Computes the pseudo-inverse of the array using the given threshold.</summary>
            <param name="thresh">Threshold to use</param>
        </member>
        <member name="M:ShoNS.Array.SVDFloat.Solve(ShoNS.Array.FloatArray)">
            <summary>Computes the minimum-norm least-squares solution for the system: A*x = B.</summary>
            <param name="matrixRight" type="FloatArray">Array on the right side of the system (B).</param>
        </member>
        <member name="P:ShoNS.Array.SVDFloat.U">
            <summary>The unitary array U.</summary>
        </member>
        <member name="P:ShoNS.Array.SVDFloat.V">
            <summary>The unitary array V.</summary>
        </member>
        <member name="P:ShoNS.Array.SVDFloat.D">
            <summary>The singular values.</summary>
        </member>
    </members>
</doc>
